import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  
  test: {
    // Environment configuration
    environment: 'jsdom',
    globals: true,
    
    // Setup files for different testing scenarios
    setupFiles: [
      './test/setup.ts',
      './test/healthcare-setup.ts'
    ],
    
    // Test file patterns - comprehensive coverage for monorepo
    include: [
      'apps/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}',
      'apps/**/__tests__/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}',
      'packages/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}',
      'packages/**/__tests__/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}',
      'tools/testing/unit/**/*.{test,spec}.{js,ts,jsx,tsx}',
      'test/**/*.{test,spec}.{js,ts,jsx,tsx}',
      '**/__tests__/**/*.{test,spec}.{js,ts,jsx,tsx}'
    ],
    
    // Exclude patterns for performance and clarity
    exclude: [
      '**/node_modules/**',
      '**/dist/**',
      '**/build/**',
      '**/.next/**',
      '**/.turbo/**',
      '**/coverage/**',
      '**/test-results/**',
      '**/playwright-report/**',
      // Exclude E2E tests (separate configuration)
      '**/*.e2e.{test,spec}.{js,ts,jsx,tsx}',
      'tools/testing/e2e/**',
      'tools/testing/playwright/**',
      'tools/testing/cypress/**'
    ],

    // Coverage configuration optimized for healthcare compliance
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html', 'lcov', 'clover'],
      reportsDirectory: './tools/testing/coverage',
      include: [
        'apps/**/*.{js,ts,jsx,tsx}',
        'packages/**/*.{js,ts,jsx,tsx}'
      ],
      exclude: [
        '**/*.config.{js,ts,mjs}',
        '**/*.test.{js,ts,jsx,tsx}',
        '**/*.spec.{js,ts,jsx,tsx}',
        '**/node_modules/**',
        '**/dist/**',
        '**/build/**',
        '**/.next/**',
        '**/coverage/**',
        '**/test-results/**',
        // Exclude generated files
        '**/*.d.ts',
        '**/migrations/**',
        '**/seeds/**'
      ],
      // Healthcare compliance requires higher coverage thresholds
      thresholds: {
        global: {
          branches: 70,
          functions: 70,
          lines: 70,
          statements: 70
        },
        // Critical healthcare modules require higher coverage
        'apps/web/lib/patient-portal/**': {
          branches: 85,
          functions: 85,
          lines: 85,
          statements: 85
        },
        'apps/web/lib/compliance/**': {
          branches: 90,
          functions: 90,
          lines: 90,
          statements: 90
        }
      }
    },

    // Performance and execution settings
    testTimeout: 15000, // Increased for healthcare data processing
    hookTimeout: 10000,
    teardownTimeout: 5000,
    
    // Parallel execution optimized for monorepo
    pool: 'threads',
    poolOptions: {
      threads: {
        minThreads: 1,
        maxThreads: 4,
        useAtomics: true
      }
    },
    
    // Watch settings for development
    watch: true,
    watchExclude: [
      '**/node_modules/**',
      '**/dist/**',
      '**/.next/**',
      '**/coverage/**',
      '**/test-results/**'
    ],
    
    // Reporter configuration
    reporters: ['default', 'verbose', 'json', 'html'],
    outputFile: {
      json: './tools/testing/reports/vitest-results.json',
      html: './tools/testing/reports/vitest-report.html'
    },

    // Environment variables for testing
    env: {
      NODE_ENV: 'test',
      NEXT_PUBLIC_ENVIRONMENT: 'test',
      SUPABASE_URL: 'http://localhost:54321',
      SUPABASE_ANON_KEY: 'test-key'
    },

    // Sequence configuration for deterministic testing
    sequence: {
      shuffle: false,
      concurrent: true,
      setupFiles: 'list' // Execute setup files sequentially
    }
  },

  // Path resolution matching project structure
  resolve: {
    alias: {
      // Monorepo package aliases
      '@neonpro/ui': path.resolve(__dirname, './packages/ui/src'),
      '@neonpro/utils': path.resolve(__dirname, './packages/utils/src'),
      '@neonpro/types': path.resolve(__dirname, './packages/types/src'),
      '@neonpro/config': path.resolve(__dirname, './packages/config'),
      
      // App-specific aliases
      '@': path.resolve(__dirname, './apps/web'),
      '@/components': path.resolve(__dirname, './apps/web/components'),
      '@/lib': path.resolve(__dirname, './apps/web/lib'),
      '@/hooks': path.resolve(__dirname, './apps/web/hooks'),
      '@/utils': path.resolve(__dirname, './apps/web/utils'),
      '@/types': path.resolve(__dirname, './apps/web/types'),
      '@/contexts': path.resolve(__dirname, './apps/web/contexts'),
      '@/styles': path.resolve(__dirname, './apps/web/styles'),
      
      // Testing utilities
      '@/test': path.resolve(__dirname, './test'),
      '@/test-utils': path.resolve(__dirname, './test/utils')
    }
  },

  // Global definitions for testing
  define: {
    __TEST__: true,
    __DEV__: false,
    'process.env.NODE_ENV': '"test"'
  },

  // Vite-specific optimizations for testing
  optimizeDeps: {
    include: [
      '@testing-library/react',
      '@testing-library/user-event',
      '@testing-library/jest-dom'
    ]
  }
})