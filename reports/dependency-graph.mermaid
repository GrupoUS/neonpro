```mermaid
graph TB
    %% NeonPro Workspace Dependency Graph
    %% Generated by PREP-003 Analysis - 2025-09-06

    %% Apps Layer (Top Level)
    subgraph "üè• Applications"
        WEB["@neonpro/web<br/>Next.js App"]
        API["@neonpro/api<br/>Hono API"]
    end

    %% Presentation Layer  
    subgraph "üé® Presentation Layer"
        UI["@neonpro/ui<br/>Design System"]
        SHARED["@neonpro/shared<br/>RPC & Hooks"]
    end

    %% Business Logic Layer
    subgraph "‚öôÔ∏è Business Layer" 
        CORE["@neonpro/core-services<br/>Business Logic"]
    end

    %% Utilities Layer
    subgraph "üîß Utilities Layer"
        UTILS["@neonpro/utils<br/>Helper Functions"]
        SECURITY["@neonpro/security<br/>Auth & Encryption"]
    end

    %% Foundation Layer (Bottom)
    subgraph "üèóÔ∏è Foundation Layer"
        DATABASE["@neonpro/database<br/>Prisma + Supabase"]
        TYPES["@neonpro/types<br/>TypeScript Types"] 
        CONFIG["@neonpro/config<br/>Build Configuration"]
    end

    %% App Dependencies
    WEB --> DATABASE
    WEB --> SHARED
    WEB --> UI  
    WEB --> UTILS

    API --> SHARED
    API --> TYPES
    API --> SECURITY

    %% Presentation Dependencies
    UI --> UTILS
    SHARED --> DATABASE

    %% Business Dependencies  
    CORE --> DATABASE
    CORE --> UTILS

    %% Utility Dependencies
    UTILS --> DATABASE
    
    %% Foundation (no internal dependencies)
    DATABASE -.-> CONFIG
    TYPES -.-> CONFIG
    
    %% Styling
    classDef app fill:#e1f5fe,stroke:#0277bd,stroke-width:3px
    classDef presentation fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px  
    classDef business fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef utilities fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
    classDef foundation fill:#fafafa,stroke:#424242,stroke-width:2px

    class WEB,API app
    class UI,SHARED presentation
    class CORE business  
    class UTILS,SECURITY utilities
    class DATABASE,TYPES,CONFIG foundation
```

## Dependency Analysis Summary

### Layer Architecture (Bottom-up)
1. **Foundation Layer**: Core building blocks
   - `@neonpro/config` - Build configurations  
   - `@neonpro/types` - TypeScript definitions
   - `@neonpro/database` - Data access layer

2. **Utilities Layer**: Reusable functionality
   - `@neonpro/utils` - Helper functions
   - `@neonpro/security` - Authentication & security

3. **Business Layer**: Domain logic
   - `@neonpro/core-services` - Healthcare business logic

4. **Presentation Layer**: User interface
   - `@neonpro/ui` - Design system components
   - `@neonpro/shared` - RPC client & realtime hooks

5. **Applications Layer**: Entry points
   - `@neonpro/web` - Next.js frontend
   - `@neonpro/api` - Hono.dev backend

### Critical Dependencies
- **Database**: Core dependency for 4 packages (utils, shared, core-services, web)
- **Utils**: Shared by UI and core-services
- **Shared**: Bridge between frontend and backend  
- **Security**: Isolated security layer for API

### Architecture Quality
‚úÖ **Clean layering**: No circular dependencies  
‚úÖ **Separation of concerns**: Clear domain boundaries
‚úÖ **Minimal coupling**: Foundation packages have no internal deps
‚úÖ **Healthcare compliance**: Security isolated, database centralized

### Potential Issues
‚ö†Ô∏è **Database coupling**: Many packages depend on database directly
üí° **Optimization opportunity**: Consider abstracting database access through core-services

### Dependencies by Type
- **Internal**: 10 workspace dependencies total
- **External**: 50+ external dependencies  
- **Healthcare**: Specialized packages for compliance (security, database)
- **Framework**: Next.js, Hono, React 19, TypeScript 5.7