# NEONPRO Production Docker Compose
# GRUPO US VIBECODE SYSTEM V5.0 - Phase 8 Production Monitoring
# 
# Production deployment configuration with monitoring stack
# Includes application, monitoring, observability, and supporting services

version: '3.8'

services:
  # NEONPRO Application
  neonpro-app:
    image: ghcr.io/grupous/neonpro:latest
    container_name: neonpro-production
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_TELEMETRY_DISABLED=1
      - MONITORING_ENABLED=true
      - OBSERVABILITY_ENABLED=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=neonpro-production
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_SAMPLING_RATE=0.1
    env_file:
      - ../.env.production
    volumes:
      - app-logs:/app/logs
      - app-tmp:/app/tmp
    networks:
      - neonpro-network
    depends_on:
      - postgres
      - redis
      - jaeger
    healthcheck:
      test: ["/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neonpro.rule=Host(`neonpro.grupous.com`)"
      - "traefik.http.routers.neonpro.tls=true"
      - "traefik.http.routers.neonpro.tls.certresolver=letsencrypt"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: neonpro-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=neonpro_production
      - POSTGRES_USER=neonpro
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - neonpro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neonpro -d neonpro_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: neonpro-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - neonpro-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: neonpro-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger-data:/tmp
    networks:
      - neonpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: neonpro-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - neonpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: neonpro-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
    secrets:
      - grafana_password
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - neonpro-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: neonpro-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    networks:
      - neonpro-network
    depends_on:
      - neonpro-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  neonpro-network:
    driver: bridge
    name: neonpro-production-network

# Volumes
volumes:
  postgres-data:
    name: neonpro-postgres-data
  redis-data:
    name: neonpro-redis-data
  jaeger-data:
    name: neonpro-jaeger-data
  prometheus-data:
    name: neonpro-prometheus-data
  grafana-data:
    name: neonpro-grafana-data
  app-logs:
    name: neonpro-app-logs
  app-tmp:
    name: neonpro-app-tmp
  nginx-logs:
    name: neonpro-nginx-logs

# Secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
