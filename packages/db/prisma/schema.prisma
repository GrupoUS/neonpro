// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// üè• NEONPRO HEALTHCARE DATABASE SCHEMA
// Enterprise healthcare platform with LGPD/ANVISA compliance

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================================================
// üë• USER MANAGEMENT & AUTHENTICATION
// =============================================================================

enum UserRole {
  SUPER_ADMIN      // System administration
  MEDICAL_DIRECTOR // Clinical oversight
  DOCTOR          // Full patient access
  NURSE           // Limited patient access
  TECHNICIAN      // Specific procedures
  RECEPTIONIST    // Scheduling only
  BILLING         // Financial data only
  AUDITOR         // Read-only compliance
  PATIENT         // Own data only
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  phone             String?
  password_hash     String?   // For local auth
  supabase_id       String?   @unique // Supabase auth integration
  
  // Profile Information
  first_name        String
  last_name         String
  cpf               String?   @unique // Brazilian tax ID
  birth_date        DateTime?
  gender            String?
  
  // Professional Information (for healthcare providers)
  professional_id   String?   @unique // CRM, COREN, etc.
  specialty         String?
  license_number    String?
  license_expiry    DateTime?
  
  // System Information
  role              UserRole  @default(PATIENT)
  status            UserStatus @default(PENDING_VERIFICATION)
  email_verified    Boolean   @default(false)
  phone_verified    Boolean   @default(false)
  is_verified       Boolean   @default(false)
  
  // Healthcare Compliance
  lgpd_consent_date DateTime?
  lgpd_consent_version String?
  emergency_contact String?
  
  // Timestamps
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  last_login        DateTime?
  
  // Relations
  patient           Patient?
  healthcare_provider HealthcareProvider?
  consent_records   ConsentRecord[]
  audit_logs        AuditLog[]
  notifications     Notification[]
  inventory_usage   InventoryUsage[]
  communication_logs CommunicationLog[]
  
  @@map("users")
}// =============================================================================
// üë§ PATIENT MANAGEMENT
// =============================================================================

model Patient {
  id                String    @id @default(cuid())
  user_id           String    @unique
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  // Patient Identification
  medical_record_number String @unique
  patient_id        String    @unique // External patient ID
  
  // Contact Information
  address_street    String?
  address_number    String?
  address_complement String?
  address_neighborhood String?
  address_city      String?
  address_state     String?
  address_zipcode   String?
  
  // Emergency Contact
  emergency_contact_name String?
  emergency_contact_phone String?
  emergency_contact_relationship String?
  
  // Medical Information
  allergies         String[]  // Array of allergies
  medications       String[]  // Current medications
  medical_conditions String[] // Chronic conditions
  insurance_number  String?
  insurance_provider String?
  
  // Timestamps
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Relations
  appointments      Appointment[]
  medical_records   MedicalRecord[]
  billing_records   Billing[]
  notifications     Notification[]
  inventory_usage   InventoryUsage[]
  communication_logs CommunicationLog[]
  prescriptions     Prescription[]
  appointment_feedback AppointmentFeedback[]
  
  @@map("patients")
}// =============================================================================
// üë®‚Äç‚öïÔ∏è HEALTHCARE PROVIDERS
// =============================================================================

model HealthcareProvider {
  id                String    @id @default(cuid())
  user_id           String    @unique
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  // Professional Details
  provider_type     String    // "DOCTOR", "NURSE", "TECHNICIAN"
  specialization    String[]  // Array of specializations
  license_state     String?   // State where licensed
  board_certified   Boolean   @default(false)
  
  // Schedule & Availability
  working_hours     Json?     // Flexible schedule data
  consultation_duration Int?  @default(30) // Default 30 minutes
  
  // Performance Metrics
  average_rating    Float?    @default(0)
  total_patients    Int       @default(0)
  total_appointments Int      @default(0)
  
  // Timestamps
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Relations
  appointments      Appointment[]
  medical_records   MedicalRecord[]
  billing_records   Billing[]
  analytics         Analytics[]
  prescriptions     Prescription[]
  
  @@map("healthcare_providers")
}

// =============================================================================
// üìÖ APPOINTMENT MANAGEMENT
// =============================================================================

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}enum AppointmentType {
  CONSULTATION
  PROCEDURE
  FOLLOW_UP
  EMERGENCY
  TELEMEDICINE
}

model Appointment {
  id                String    @id @default(cuid())
  patient_id        String
  patient           Patient   @relation(fields: [patient_id], references: [id])
  provider_id       String?
  provider          HealthcareProvider? @relation(fields: [provider_id], references: [id])
  appointment_date  DateTime
  duration_minutes  Int       @default(30)
  appointment_type  AppointmentType @default(CONSULTATION)
  status            AppointmentStatus @default(SCHEDULED)
  chief_complaint   String?
  notes             String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Relations
  medical_records   MedicalRecord[]
  billing_records   Billing[]
  appointment_feedback AppointmentFeedback[]
  
  @@map("appointments")
}

// Basic models for functionality
model MedicalRecord {
  id                String    @id @default(cuid())
  patient_id        String
  patient           Patient   @relation(fields: [patient_id], references: [id])
  provider_id       String
  provider          HealthcareProvider @relation(fields: [provider_id], references: [id])
  appointment_id    String?
  appointment       Appointment? @relation(fields: [appointment_id], references: [id])
  
  title             String
  description       String?
  created_at        DateTime  @default(now())
  
  // Relations
  prescriptions     Prescription[]
  
  @@map("medical_records")
}// Basic additional models
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model Billing {
  id                String    @id @default(cuid())
  patient_id        String
  patient           Patient   @relation(fields: [patient_id], references: [id])
  provider_id       String
  provider          HealthcareProvider @relation(fields: [provider_id], references: [id])
  appointment_id    String?
  appointment       Appointment? @relation(fields: [appointment_id], references: [id])
  
  amount            Decimal   @db.Decimal(10, 2)
  payment_status    PaymentStatus @default(PENDING)
  created_at        DateTime  @default(now())
  
  @@map("billing")
}

enum ConsentType {
  DATA_PROCESSING
  MARKETING
  MEDICAL_TREATMENT
}

model ConsentRecord {
  id                String    @id @default(cuid())
  user_id           String
  user              User      @relation(fields: [user_id], references: [id])
  consent_type      ConsentType
  granted_at        DateTime?
  created_at        DateTime  @default(now())
  
  @@map("consent_records")
}enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
}

model AuditLog {
  id                String    @id @default(cuid())
  user_id           String?
  user              User?     @relation(fields: [user_id], references: [id])
  action            AuditAction
  resource_type     String
  description       String
  created_at        DateTime  @default(now())
  
  @@map("audit_logs")
}

enum NotificationType {
  APPOINTMENT_REMINDER
  PAYMENT_CONFIRMATION
  SYSTEM_UPDATE
}

model Notification {
  id                String    @id @default(cuid())
  user_id           String?
  user              User?     @relation(fields: [user_id], references: [id])
  patient_id        String?
  patient           Patient?  @relation(fields: [patient_id], references: [id])
  type              NotificationType
  title             String
  message           String
  created_at        DateTime  @default(now())
  
  @@map("notifications")
}// Basic additional models for complete schema
model Analytics {
  id                String    @id @default(cuid())
  provider_id       String?
  provider          HealthcareProvider? @relation(fields: [provider_id], references: [id])
  metric_name       String
  metric_value      Decimal   @db.Decimal(15, 4)
  created_at        DateTime  @default(now())
  
  @@map("analytics")
}

model InventoryItem {
  id                String    @id @default(cuid())
  name              String
  current_stock     Int       @default(0)
  created_at        DateTime  @default(now())
  
  // Relations
  usage_logs        InventoryUsage[]
  
  @@map("inventory_items")
}

model InventoryUsage {
  id                String    @id @default(cuid())
  item_id           String
  item              InventoryItem @relation(fields: [item_id], references: [id])
  used_by_id        String
  used_by           User      @relation(fields: [used_by_id], references: [id])
  patient_id        String?
  patient           Patient?  @relation(fields: [patient_id], references: [id])
  quantity_used     Int
  used_at           DateTime  @default(now())
  
  @@map("inventory_usage")
}

enum CommunicationChannel {
  EMAIL
  SMS
  WHATSAPP
}

model CommunicationLog {
  id                String    @id @default(cuid())
  patient_id        String?
  patient           Patient?  @relation(fields: [patient_id], references: [id])
  user_id           String?
  user              User?     @relation(fields: [user_id], references: [id])
  channel           CommunicationChannel
  content           String
  sent_at           DateTime?
  created_at        DateTime  @default(now())
  
  @@map("communication_logs")
}// Final models to complete schema
model AppointmentFeedback {
  id                String    @id @default(cuid())
  appointment_id    String    @unique
  appointment       Appointment @relation(fields: [appointment_id], references: [id])
  patient_id        String
  patient           Patient   @relation(fields: [patient_id], references: [id])
  overall_rating    Int
  submitted_at      DateTime  @default(now())
  
  @@map("appointment_feedback")
}

enum PrescriptionStatus {
  DRAFT
  ACTIVE
  CANCELLED
}

model Prescription {
  id                String    @id @default(cuid())
  patient_id        String
  patient           Patient   @relation(fields: [patient_id], references: [id])
  provider_id       String
  provider          HealthcareProvider @relation(fields: [provider_id], references: [id])
  medical_record_id String?
  medical_record    MedicalRecord? @relation(fields: [medical_record_id], references: [id])
  prescription_number String  @unique
  status            PrescriptionStatus @default(DRAFT)
  diagnosis         String
  created_at        DateTime  @default(now())
  
  @@map("prescriptions")
}

// Basic specialty and procedure models for seed
model Specialty {
  id                String    @id @default(cuid())
  name              String    @unique
  description       String?
  created_at        DateTime  @default(now())
  
  @@map("specialties")
}

model ProcedureCategory {
  id                String    @id @default(cuid())
  name              String    @unique
  description       String?
  created_at        DateTime  @default(now())
  
  @@map("procedure_categories")
}