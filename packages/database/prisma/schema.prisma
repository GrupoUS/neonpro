// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// üè• NEONPRO HEALTHCARE DATABASE SCHEMA
// Enterprise healthcare platform with LGPD/ANVISA compliance

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================================================
// üë• USER MANAGEMENT & AUTHENTICATION
// =============================================================================

enum UserRole {
  SUPER_ADMIN      // System administration
  MEDICAL_DIRECTOR // Clinical oversight
  DOCTOR          // Full patient access
  NURSE           // Limited patient access
  TECHNICIAN      // Specific procedures
  RECEPTIONIST    // Scheduling only
  BILLING         // Financial data only
  AUDITOR         // Read-only compliance
  PATIENT         // Own data only
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  phone             String?
  password_hash     String?   // For local auth
  supabase_id       String?   @unique // Supabase auth integration
  
  // Profile Information
  first_name        String
  last_name         String
  cpf               String?   @unique // Brazilian tax ID
  date_of_birth     DateTime?
  
  // System Fields
  role              UserRole  @default(PATIENT)
  status            UserStatus @default(PENDING_VERIFICATION)
  
  // Healthcare Professional Data (optional)
  cfm_number        String?   @unique // Medical license
  crm_state         String?   // State of medical registration
  specialty         String?
  
  // LGPD Compliance
  lgpd_consent      Boolean   @default(false)
  lgpd_consent_date DateTime?
  marketing_consent Boolean   @default(false)
  
  // Multi-tenant isolation
  clinic_id         String?
  clinic            Clinic?   @relation(fields: [clinic_id], references: [id])
  
  // Timestamps
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  last_login        DateTime?
  
  // Relations
  patient_record           Patient?                @relation("UserPatientRecord")
  professional_record      HealthcareProfessional? @relation("UserProfessionalRecord")
  audit_logs              AuditLog[]
  notifications           Notification[]
  created_appointments    Appointment[]           @relation("CreatedByUser")
  
  @@map("users")
}

// =============================================================================
// üè• HEALTHCARE ENTITIES
// =============================================================================

model Clinic {
  id                String  @id @default(cuid())
  name              String
  cnpj              String  @unique // Brazilian business registration
  description       String?
  
  // Address
  address_street    String
  address_number    String
  address_complement String?
  address_district  String
  address_city      String
  address_state     String  // Brazilian state
  address_zip       String
  
  // Contact
  phone             String
  email             String
  website           String?
  
  // Healthcare Compliance
  anvisa_license    String? // Brazilian health authority license
  cnes_code         String? // National healthcare establishment code
  
  // Configuration
  timezone          String  @default("America/Sao_Paulo")
  active            Boolean @default(true)
  
  // Timestamps
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  users             User[]
  patients          Patient[]
  professionals     HealthcareProfessional[]
  appointments      Appointment[]
  audit_logs        AuditLog[]
  notifications     Notification[]
  system_configurations SystemConfiguration[]
  
  @@map("clinics")
}

model Patient {
  id                    String    @id @default(cuid())
  
  // Patient Profile (linked to User)
  user_id               String    @unique
  user                  User      @relation("UserPatientRecord", fields: [user_id], references: [id], onDelete: Cascade)
  
  // Medical Information
  medical_record_number String?   @unique
  blood_type            String?
  allergies             String?   // Encrypted in production
  chronic_conditions    String?   // Encrypted in production
  current_medications   String?   // Encrypted in production
  medical_history       String?   // Encrypted in production
  
  // Emergency Contact
  emergency_contact_name  String?
  emergency_contact_phone String?
  emergency_contact_relation String?
  
  // Insurance Information
  insurance_provider    String?
  insurance_number      String?   // Encrypted in production
  
  // Multi-tenant isolation
  clinic_id             String
  clinic                Clinic    @relation(fields: [clinic_id], references: [id])
  
  // Timestamps
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  created_by            String?   // User who created this record
  
  // Relations
  appointments          Appointment[]
  
  @@map("patients")
}

model HealthcareProfessional {
  id                    String    @id @default(cuid())
  
  // Professional Profile (linked to User)
  user_id               String    @unique
  user                  User      @relation("UserProfessionalRecord", fields: [user_id], references: [id], onDelete: Cascade)
  
  // Professional Information
  professional_id       String?   @unique // Internal professional ID
  department            String?
  position              String?
  
  // Schedule Configuration
  default_appointment_duration Int @default(30) // minutes
  calendar_color        String?   @default("#3B82F6")
  
  // Permissions & Access
  can_prescribe         Boolean   @default(false)
  can_access_all_patients Boolean @default(false)
  can_modify_schedules  Boolean   @default(false)
  
  // Multi-tenant isolation
  clinic_id             String
  clinic                Clinic    @relation(fields: [clinic_id], references: [id])
  
  // Status
  active                Boolean   @default(true)
  
  // Timestamps
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  // Relations
  appointments          Appointment[]
  
  @@map("healthcare_professionals")
}

// =============================================================================
// üìÖ APPOINTMENT MANAGEMENT
// =============================================================================

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum AppointmentType {
  CONSULTATION      // Regular consultation
  FOLLOW_UP        // Follow-up appointment
  PROCEDURE        // Medical procedure
  EMERGENCY        // Emergency consultation
  TELEMEDICINE     // Remote consultation
  VACCINATION      // Vaccination appointment
  EXAM             // Medical exam/test
  SURGERY          // Surgical procedure
}

model Appointment {
  id                    String            @id @default(cuid())
  
  // Core appointment data
  appointment_date      DateTime
  duration_minutes      Int               @default(30)
  status                AppointmentStatus @default(SCHEDULED)
  appointment_type      AppointmentType   @default(CONSULTATION)
  
  // Participants
  patient_id            String
  patient               Patient           @relation(fields: [patient_id], references: [id])
  
  professional_id       String
  professional          HealthcareProfessional @relation(fields: [professional_id], references: [id])
  
  // Location
  room_number           String?
  location_notes        String?
  
  // Clinical Information
  chief_complaint       String?           // Patient's main concern
  symptoms              String?           // Encrypted in production
  vital_signs           String?           // JSON: blood pressure, temperature, etc.
  diagnosis             String?           // Encrypted in production
  treatment_plan        String?           // Encrypted in production
  prescription          String?           // Encrypted in production
  notes                 String?           // General notes
  
  // Administrative
  insurance_authorized  Boolean           @default(false)
  payment_status        String?           @default("pending")
  invoice_number        String?
  
  // Multi-tenant isolation
  clinic_id             String
  clinic                Clinic            @relation(fields: [clinic_id], references: [id])
  
  // Audit Trail
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
  created_by            String
  creator               User              @relation("CreatedByUser", fields: [created_by], references: [id])
  
  // Cancellation/Rescheduling
  cancelled_at          DateTime?
  cancelled_by          String?
  cancellation_reason   String?
  original_appointment_id String?         // For rescheduled appointments
  
  @@map("appointments")
}

// =============================================================================
// üîî NOTIFICATION SYSTEM
// =============================================================================

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  SYSTEM_MAINTENANCE
  COMPLIANCE_ALERT
  PAYMENT_DUE
  PRESCRIPTION_READY
}

model Notification {
  id              String           @id @default(cuid())
  
  // Recipient
  user_id         String
  user            User             @relation(fields: [user_id], references: [id])
  
  // Notification Content
  title           String
  message         String
  type            NotificationType @default(INFO)
  
  // Behavior
  read            Boolean          @default(false)
  read_at         DateTime?
  priority        Int              @default(0) // Higher number = higher priority
  
  // Optional metadata (JSON)
  metadata        Json?
  
  // Scheduling
  scheduled_for   DateTime?        // For future notifications
  expires_at      DateTime?        // When notification expires
  
  // Multi-tenant isolation
  clinic_id       String
  clinic          Clinic           @relation(fields: [clinic_id], references: [id])
  
  // Timestamps
  created_at      DateTime         @default(now())
  
  @@map("notifications")
}

// =============================================================================
// üîê AUDIT & COMPLIANCE
// =============================================================================

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  BACKUP
  RESTORE
}

model AuditLog {
  id              String      @id @default(cuid())
  
  // Who performed the action
  user_id         String?
  user            User?       @relation(fields: [user_id], references: [id])
  user_ip         String?
  user_agent      String?
  
  // What action was performed
  action          AuditAction
  resource_type   String      // e.g., "Patient", "Appointment", "User"
  resource_id     String?     // ID of the affected resource
  
  // Action details
  description     String?
  old_values      Json?       // Previous values (for updates)
  new_values      Json?       // New values (for creates/updates)
  
  // Context
  metadata        Json?       // Additional context data
  
  // Multi-tenant isolation
  clinic_id       String?
  clinic          Clinic?     @relation(fields: [clinic_id], references: [id])
  
  // Compliance
  lgpd_category   String?     // LGPD data category
  retention_until DateTime?   // When this log can be deleted
  
  // Timestamp
  created_at      DateTime    @default(now())
  
  @@map("audit_logs")
}

// =============================================================================
// üìä SYSTEM CONFIGURATION
// =============================================================================

model SystemConfiguration {
  id                    String    @id @default(cuid())
  key                   String    @unique
  value                 Json
  description           String?
  category              String?   // e.g., "security", "features", "integrations"
  
  // Access control
  requires_admin        Boolean   @default(true)
  
  // Multi-tenant (null = system-wide)
  clinic_id             String?
  clinic                Clinic?   @relation(fields: [clinic_id], references: [id])
  
  // Timestamps
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  @@map("system_configurations")
}