// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Business Models
model Clinic {
  id           String  @id @default(uuid())
  name         String
  description  String?
  address      Json?
  phone        String?
  email        String?
  website      String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  patients     Patient[]
  appointments Appointment[]
  professionals Professional[]
  
  @@map("clinics")
}

model Patient {
  id           String  @id @default(uuid())
  clinic_id    String
  first_name   String
  last_name    String
  email        String?
  phone        String?
  date_of_birth DateTime?
  gender       String?
  address      Json?
  emergency_contact Json?
  medical_history Json?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  clinic       Clinic @relation(fields: [clinic_id], references: [id])
  appointments Appointment[]
  
  @@map("patients")
}

model Professional {
  id           String  @id @default(uuid())
  clinic_id    String?
  first_name   String
  last_name    String
  email        String  @unique
  phone        String?
  specialty    String?
  registration Json?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  clinic       Clinic? @relation(fields: [clinic_id], references: [id])
  appointments Appointment[]
  
  @@map("professionals")
}

model ServiceType {
  id           String  @id @default(uuid())
  name         String
  description  String?
  duration_minutes Int?
  price        Float?
  category     String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  appointments Appointment[]
  
  @@map("service_types")
}

model Appointment {
  id              String  @id @default(uuid())
  clinic_id       String
  patient_id      String
  professional_id String
  service_type_id String
  start_time      DateTime
  end_time        DateTime
  status          String  @default("scheduled")
  notes           String?
  internal_notes  String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  clinic       Clinic @relation(fields: [clinic_id], references: [id])
  patient      Patient @relation(fields: [patient_id], references: [id])
  professional Professional @relation(fields: [professional_id], references: [id])
  service_type ServiceType @relation(fields: [service_type_id], references: [id])
  
  @@map("appointments")
}

// Audit and Compliance Models
model AuditLog {
  id           String  @id @default(uuid())
  user_id      String
  action       String
  resource_type String
  resource_id  String?
  old_values   Json?
  new_values   Json?
  ip_address   String?
  user_agent   String?
  clinic_id    String?
  lgpd_basis   String?
  created_at   DateTime @default(now())

  @@map("audit_logs")
}

model LGPDDataRequest {
  id           String  @id @default(uuid())
  patient_id   String
  request_type String  // access, rectification, deletion, portability
  status       String  @default("pending")
  requested_by String
  processed_by String?
  processed_at DateTime?
  data_exported Json?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("lgpd_data_requests")
}

// System Models
model Profile {
  id           String  @id @default(uuid())
  email        String  @unique
  full_name    String?
  role         String?
  department   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("profiles")
}

// Treatment and Progress Models
model Treatment {
  id           String  @id @default(uuid())
  patient_id   String
  professional_id String
  treatment_type String
  description  String?
  start_date   DateTime
  end_date     DateTime?
  status       String  @default("active")
  notes        String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("treatments")
}

// Communication Models
model Message {
  id           String  @id @default(uuid())
  sender_id    String
  recipient_id String
  subject      String?
  content      String
  message_type String  @default("email") // email, sms, whatsapp
  status       String  @default("pending")
  sent_at      DateTime?
  created_at   DateTime @default(now())

  @@map("messages")
}

// Financial Models
model PaymentTransaction {
  id               String  @id @default(uuid())
  clinic_id        String
  patient_id       String?
  amount           Float
  currency         String  @default("BRL")
  payment_method   String
  payment_status   String  @default("pending")
  gateway_fee      Float?
  net_amount       Float?
  processed_at     DateTime?
  settled_at       DateTime?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("payment_transactions")
}