// hooks/appointments/use-keyboard-shortcuts.ts
// Global keyboard shortcuts hook for appointments
// Story 1.1 Task 8 - Accessibility and Keyboard Navigation

'use client';

import { useRouter } from '../placeholders/next-navigation';
import { useCallback, useEffect, useState } from 'react';

export type KeyboardShortcut = {
  key: string;
  ctrlKey?: boolean;
  altKey?: boolean;
  shiftKey?: boolean;
  description: string;
  action: () => void;
};

type UseKeyboardShortcutsProps = {
  onRefresh?: () => void;
  onToggleFilters?: () => void;
  onNewAppointment?: () => void;
  onCloseDialog?: () => void;
  onShowHelp?: () => void;
};

export function useKeyboardShortcuts({
  onRefresh,
  onToggleFilters,
  onNewAppointment,
  onCloseDialog,
  onShowHelp,
}: UseKeyboardShortcutsProps = {}) {
  const [isEnabled, setIsEnabled] = useState(true);
  const [showHelp, setShowHelp] = useState(false);
  const router = useRouter();

  // Define keyboard shortcuts
  const shortcuts: KeyboardShortcut[] = [
    {
      key: 'n',
      ctrlKey: true,
      description: 'Criar novo agendamento',
      action: useCallback(() => {
        if (onNewAppointment) {
          onNewAppointment();
        } else {
          router.push('/dashboard/appointments/new');
        }
      }, [onNewAppointment, router]),
    },
    {
      key: 'f',
      description: 'Alternar filtros',
      action: useCallback(() => {
        onToggleFilters?.();
      }, [onToggleFilters]),
    },
    {
      key: 'r',
      description: 'Atualizar agendamentos',
      action: useCallback(() => {
        onRefresh?.();
      }, [onRefresh]),
    },
    {
      key: 'Escape',
      description: 'Fechar diÃ¡logos e modais',
      action: useCallback(() => {
        onCloseDialog?.();
      }, [onCloseDialog]),
    },
    {
      key: '?',
      shiftKey: true,
      description: 'Mostrar atalhos de teclado',
      action: useCallback(() => {
        if (onShowHelp) {
          onShowHelp();
        } else {
          setShowHelp((prev) => !prev);
        }
      }, [onShowHelp]),
    },
  ];

  // Handle keydown events
  const handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      // Don't handle shortcuts when typing in input fields
      const target = event.target as HTMLElement;
      if (
        !isEnabled ||
        target.tagName === 'INPUT' ||
        target.tagName === 'TEXTAREA' ||
        target.contentEditable === 'true'
      ) {
        return;
      }

      const matchingShortcut = shortcuts.find((shortcut) => {
        return (
          shortcut.key.toLowerCase() === event.key.toLowerCase() &&
          Boolean(shortcut.ctrlKey) === event.ctrlKey &&
          Boolean(shortcut.altKey) === event.altKey &&
          Boolean(shortcut.shiftKey) === event.shiftKey
        );
      });

      if (matchingShortcut) {
        event.preventDefault();
        event.stopPropagation();
        matchingShortcut.action();
      }
    },
    [isEnabled, shortcuts]
  );

  // Set up event listeners
  useEffect(() => {
    if (typeof window !== 'undefined') {
      window.addEventListener('keydown', handleKeyDown);
      return () => {
        window.removeEventListener('keydown', handleKeyDown);
      };
    }
  }, [handleKeyDown]);

  // Format shortcut key for display
  const formatShortcut = (shortcut: KeyboardShortcut): string => {
    const parts: string[] = [];

    if (shortcut.ctrlKey) {
      parts.push('Ctrl');
    }
    if (shortcut.altKey) {
      parts.push('Alt');
    }
    if (shortcut.shiftKey) {
      parts.push('Shift');
    }

    const key = shortcut.key === '?' ? '?' : shortcut.key.toUpperCase();
    parts.push(key);

    return parts.join(' + ');
  };

  return {
    shortcuts,
    isEnabled,
    setIsEnabled,
    showHelp,
    setShowHelp,
    formatShortcut,
  };
}
