// hooks/use-profile-sync.ts
// VIBECODE V1.0 - Professional OAuth Profile Synchronization Hook
// Story 1.4 - OAuth Google Integration Enhancement
// Created: 2025-07-22

'use client';

import { useCallback, useEffect, useState } from 'react';
import { toast } from '../placeholders/sonner';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
// import { useAuth } // PLACEHOLDER: from '@/contexts/auth-context'; // PLACEHOLDER - NEEDS FIXING

export type Profile = {
  id: string;
  email?: string;
  full_name?: string;
  first_name?: string;
  last_name?: string;
  avatar_url?: string;
  professional_title?: string;
  medical_license?: string;
  department?: string;
  phone?: string;
  role: 'admin' | 'doctor' | 'nurse' | 'staff' | 'professional';
  google_provider_id?: string;
  google_picture?: string;
  google_verified_email: boolean;
  profile_sync_status: 'pending' | 'synced' | 'conflict' | 'error';
  google_sync_enabled: boolean;
  last_google_sync?: string;
  created_at: string;
  updated_at: string;
  data_consent_given: boolean;
  data_consent_date?: string;
};

export type ProfileSyncStatus = {
  user_id: string;
  sync_status: string;
  google_sync_enabled: boolean;
  last_sync?: string;
  google_verified: boolean;
  has_conflicts: boolean;
};

export type UseProfileSyncReturn = {
  profile: Profile | null;
  syncStatus: ProfileSyncStatus | null;
  isLoading: boolean;
  isUpdating: boolean;
  error: string | null;

  // Methods
  refreshProfile: () => Promise<void>;
  updateProfile: (updates: Partial<Profile>) => Promise<boolean>;
  syncWithGoogle: () => Promise<boolean>;
  resolveConflict: (resolutionData: Record<string, any>) => Promise<boolean>;
  toggleGoogleSync: (enabled: boolean) => Promise<boolean>;
};

export function useProfileSync(): UseProfileSyncReturn {
  const { user, session, getValidSession } = useAuth();
  const [profile, setProfile] = useState<Profile | null>(null);
  const [syncStatus, setSyncStatus] = useState<ProfileSyncStatus | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isUpdating, setIsUpdating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const supabase = createClientComponentClient();

  // Fetch user profile from database
  const fetchProfile = useCallback(async (): Promise<Profile | null> => {
    if (!user?.id) {
      return null;
    }

    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (error) {
        setError(`Erro ao carregar perfil: ${error.message}`);
        return null;
      }
      setError(null);
      return data as Profile;
    } catch (_err) {
      setError('Erro inesperado ao carregar perfil');
      return null;
    }
  }, [user?.id, supabase]);

  // Fetch profile sync status
  const fetchSyncStatus = useCallback(async (): Promise<ProfileSyncStatus | null> => {
    if (!user?.id) {
      return null;
    }

    try {
      const { data, error } = await supabase.rpc('get_profile_sync_status', {
        user_id: user.id,
      });

      if (error) {
        return null;
      }

      return data as ProfileSyncStatus;
    } catch (_err) {
      return null;
    }
  }, [user?.id, supabase]);

  // Refresh profile data
  const refreshProfile = useCallback(async () => {
    setIsLoading(true);
    try {
      const [profileData, statusData] = await Promise.all([fetchProfile(), fetchSyncStatus()]);

      setProfile(profileData);
      setSyncStatus(statusData);
    } finally {
      setIsLoading(false);
    }
  }, [fetchProfile, fetchSyncStatus]);

  // Update profile data
  const updateProfile = useCallback(
    async (updates: Partial<Profile>): Promise<boolean> => {
      if (!user?.id) {
        setError('Usuário não autenticado');
        return false;
      }

      setIsUpdating(true);
      setError(null);

      try {
        // Get valid session for critical operation
        const { session: validSession, error: sessionError } = await getValidSession();

        if (sessionError || !validSession) {
          setError('Sessão inválida. Faça login novamente.');
          return false;
        }

        const { error } = await supabase
          .from('profiles')
          .update({
            ...updates,
            updated_at: new Date().toISOString(),
          })
          .eq('id', user.id);

        if (error) {
          setError(`Erro ao atualizar perfil: ${error.message}`);
          return false;
        }

        // Refresh profile after update
        await refreshProfile();

        toast.success('Perfil atualizado com sucesso!');
        return true;
      } catch (_err) {
        setError('Erro inesperado ao atualizar perfil');
        return false;
      } finally {
        setIsUpdating(false);
      }
    },
    [user?.id, getValidSession, supabase, refreshProfile]
  );

  // Sync profile with Google data
  const syncWithGoogle = useCallback(async (): Promise<boolean> => {
    if (!(user?.id && session)) {
      setError('Usuário não autenticado');
      return false;
    }

    setIsUpdating(true);
    setError(null);

    try {
      // Call the sync function with current user metadata
      const { error } = await supabase.rpc('sync_google_profile_data', {
        user_id: user.id,
        raw_user_metadata: user.user_metadata || {},
      });

      if (error) {
        setError(`Erro na sincronização: ${error.message}`);
        return false;
      }

      // Refresh profile after sync
      await refreshProfile();

      toast.success('Perfil sincronizado com Google!');
      return true;
    } catch (_err) {
      setError('Erro inesperado na sincronização');
      return false;
    } finally {
      setIsUpdating(false);
    }
  }, [user, session, supabase, refreshProfile]);

  // Resolve profile conflicts
  const resolveConflict = useCallback(
    async (resolutionData: Record<string, any>): Promise<boolean> => {
      if (!user?.id) {
        setError('Usuário não autenticado');
        return false;
      }

      setIsUpdating(true);
      setError(null);

      try {
        const { error } = await supabase.rpc('resolve_profile_conflict', {
          user_id: user.id,
          resolution_data: resolutionData,
          keep_google_data: true,
        });

        if (error) {
          setError(`Erro ao resolver conflito: ${error.message}`);
          return false;
        }

        // Refresh profile after resolution
        await refreshProfile();

        toast.success('Conflito resolvido com sucesso!');
        return true;
      } catch (_err) {
        setError('Erro inesperado ao resolver conflito');
        return false;
      } finally {
        setIsUpdating(false);
      }
    },
    [user?.id, supabase, refreshProfile]
  );

  // Toggle Google sync
  const toggleGoogleSync = useCallback(
    async (enabled: boolean): Promise<boolean> => {
      if (!user?.id) {
        setError('Usuário não autenticado');
        return false;
      }

      return await updateProfile({ google_sync_enabled: enabled });
    },
    [user?.id, updateProfile]
  );

  // Load profile on mount and user change
  useEffect(() => {
    if (user?.id) {
      refreshProfile();
    } else {
      setProfile(null);
      setSyncStatus(null);
      setIsLoading(false);
    }
  }, [user?.id, refreshProfile]);

  // Setup real-time subscription for profile changes
  useEffect(() => {
    if (!user?.id) {
      return;
    }

    const subscription = supabase
      .channel('profile-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'profiles',
          filter: `id=eq.${user.id}`,
        },
        (payload: unknown) => {
          if (payload.eventType === 'UPDATE') {
            setProfile(payload.new as Profile);
            toast.info('Perfil atualizado automaticamente');
          }
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [user?.id, supabase]);

  return {
    profile,
    syncStatus,
    isLoading,
    isUpdating,
    error,
    refreshProfile,
    updateProfile,
    syncWithGoogle,
    resolveConflict,
    toggleGoogleSync,
  };
}
