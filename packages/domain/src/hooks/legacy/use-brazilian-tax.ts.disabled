/**
 * Brazilian Tax Hooks
 * React hooks for CNPJ validation, tax calculation, and compliance features
 */

import { useCallback, useEffect, useState } from 'react';
import CNPJConsultationService from '../../lib/services/brazilian-tax/cnpj-consultation';
import {
  type CNPJCompanyData,
  type CNPJConsultationResult,
  formatCNPJ,
  validateCNPJFormat,
} from '../../lib/services/brazilian-tax/cnpj-validator';
import BrazilianTaxCalculatorService from '../../lib/services/brazilian-tax/tax-calculator-v2';
import type { TaxCalculationRequest, TaxCalculationResponse } from '../../lib/types/brazilian-tax';

/**
 * Hook for CNPJ validation and consultation
 */
export function useCNPJValidation() {
  const [validationState, setValidationState] = useState<{
    cnpj: string;
    isValid: boolean;
    isLoading: boolean;
    companyData: CNPJCompanyData | null;
    errors: string[];
    consultationResult: CNPJConsultationResult | null;
  }>({
    cnpj: '',
    isValid: false,
    isLoading: false,
    companyData: null,
    errors: [],
    consultationResult: null,
  });

  const validateCNPJ = useCallback((cnpj: string) => {
    const validation = validateCNPJFormat(cnpj);

    setValidationState((prev) => ({
      ...prev,
      cnpj,
      isValid: validation.valid,
      errors: validation.errors || [],
    }));

    return validation;
  }, []);

  const consultCNPJ = useCallback(async (cnpj: string) => {
    if (!cnpj) {
      return;
    }

    setValidationState((prev) => ({
      ...prev,
      isLoading: true,
      errors: [],
    }));

    try {
      const result = await CNPJConsultationService.consultCNPJ(cnpj);

      setValidationState((prev) => ({
        ...prev,
        isLoading: false,
        consultationResult: result,
        companyData: result.success ? result.data || null : null,
        errors: result.errors || [],
      }));

      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro na consulta';

      setValidationState((prev) => ({
        ...prev,
        isLoading: false,
        errors: [errorMessage],
      }));

      return null;
    }
  }, []);

  const formatAndValidate = useCallback(
    (cnpj: string) => {
      const formatted = formatCNPJ(cnpj);
      const validation = validateCNPJ(formatted);

      return {
        formatted,
        validation,
      };
    },
    [validateCNPJ]
  );

  const clearValidation = useCallback(() => {
    setValidationState({
      cnpj: '',
      isValid: false,
      isLoading: false,
      companyData: null,
      errors: [],
      consultationResult: null,
    });
  }, []);

  return {
    ...validationState,
    validateCNPJ,
    consultCNPJ,
    formatAndValidate,
    clearValidation,
  };
}

/**
 * Hook for tax calculations
 */
export function useTaxCalculation() {
  const [calculationState, setCalculationState] = useState<{
    isLoading: boolean;
    result: TaxCalculationResponse | null;
    errors: string[];
    history: TaxCalculationResponse[];
  }>({
    isLoading: false,
    result: null,
    errors: [],
    history: [],
  });

  const calculateTaxes = useCallback(async (request: TaxCalculationRequest) => {
    setCalculationState((prev) => ({
      ...prev,
      isLoading: true,
      errors: [],
    }));

    try {
      const result = BrazilianTaxCalculatorService.calculateTaxes(request);

      setCalculationState((prev) => ({
        ...prev,
        isLoading: false,
        result,
        history: [result, ...prev.history.slice(0, 9)], // Keep last 10 calculations
      }));

      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro no cálculo';

      setCalculationState((prev) => ({
        ...prev,
        isLoading: false,
        errors: [errorMessage],
      }));

      return null;
    }
  }, []);

  const batchCalculate = useCallback(async (requests: TaxCalculationRequest[]) => {
    setCalculationState((prev) => ({
      ...prev,
      isLoading: true,
      errors: [],
    }));

    try {
      const results = BrazilianTaxCalculatorService.batchCalculateTaxes(requests);

      setCalculationState((prev) => ({
        ...prev,
        isLoading: false,
      }));

      return results;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro no cálculo em lote';

      setCalculationState((prev) => ({
        ...prev,
        isLoading: false,
        errors: [errorMessage],
      }));

      return null;
    }
  }, []);

  const estimateAnnualTax = useCallback(
    (
      monthlyRevenue: number,
      regime: 'simples_nacional' | 'lucro_presumido' | 'lucro_real',
      serviceType: string
    ) => {
      try {
        return BrazilianTaxCalculatorService.estimateAnnualTax(monthlyRevenue, regime, serviceType);
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Erro na estimativa';

        setCalculationState((prev) => ({
          ...prev,
          errors: [errorMessage],
        }));

        return null;
      }
    },
    []
  );

  const clearCalculations = useCallback(() => {
    setCalculationState({
      isLoading: false,
      result: null,
      errors: [],
      history: [],
    });
  }, []);

  return {
    ...calculationState,
    calculateTaxes,
    batchCalculate,
    estimateAnnualTax,
    clearCalculations,
  };
}

/**
 * Hook for Brazilian tax compliance features
 */
export function useBrazilianTaxCompliance() {
  const [complianceState, setComplianceState] = useState<{
    isLoading: boolean;
    healthcareCNAEValid: boolean;
    regimeTributario: 'simples_nacional' | 'lucro_presumido' | 'lucro_real' | null;
    complianceChecks: {
      cnpj_valid: boolean;
      inscricao_estadual_valid: boolean;
      inscricao_municipal_valid: boolean;
      simples_nacional_active: boolean;
    };
    errors: string[];
  }>({
    isLoading: false,
    healthcareCNAEValid: false,
    regimeTributario: null,
    complianceChecks: {
      cnpj_valid: false,
      inscricao_estadual_valid: false,
      inscricao_municipal_valid: false,
      simples_nacional_active: false,
    },
    errors: [],
  });

  const checkHealthcareCNAE = useCallback((cnae: string) => {
    const healthcareCNAEs = [
      '8610-1', // Atividades de atendimento hospitalar
      '8630-5', // Atividades de atenção ambulatorial
      '8640-2', // Atividades de serviços de complementação diagnóstica
      '8650-0', // Atividades de profissionais da área de saúde
      '9609-2', // Outras atividades de serviços pessoais (estética)
      '8591-1', // Ensino de esportes (relacionado a estética/fitness)
      '8292-0', // Envasamento e empacotamento sob contrato (cosméticos)
      '4771-7', // Comércio varejista de produtos farmacêuticos
      '4772-5', // Comércio varejista de cosméticos
    ];

    const isValid = healthcareCNAEs.some((code) => cnae.startsWith(code.replace('-', '')));

    setComplianceState((prev) => ({
      ...prev,
      healthcareCNAEValid: isValid,
    }));

    return isValid;
  }, []);

  const validateCompliance = useCallback(
    async (companyData: CNPJCompanyData) => {
      setComplianceState((prev) => ({
        ...prev,
        isLoading: true,
        errors: [],
      }));

      try {
        // Validate CNPJ format
        const cnpjValid = validateCNPJFormat(companyData.cnpj).valid;

        // Check if it's healthcare/aesthetic related
        const healthcareValid = checkHealthcareCNAE(companyData.atividade_principal.code);

        // Determine likely tax regime based on company size and activity
        let regimeTributario: 'simples_nacional' | 'lucro_presumido' | 'lucro_real' =
          'simples_nacional';

        if (companyData.capital_social > 5_000_000) {
          regimeTributario = 'lucro_real';
        } else if (companyData.capital_social > 1_000_000) {
          regimeTributario = 'lucro_presumido';
        }

        setComplianceState((prev) => ({
          ...prev,
          isLoading: false,
          healthcareCNAEValid: healthcareValid,
          regimeTributario,
          complianceChecks: {
            cnpj_valid: cnpjValid,
            inscricao_estadual_valid: true, // Would need additional validation
            inscricao_municipal_valid: true, // Would need additional validation
            simples_nacional_active: regimeTributario === 'simples_nacional',
          },
        }));

        return {
          cnpjValid,
          healthcareValid,
          regimeTributario,
        };
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Erro na validação';

        setComplianceState((prev) => ({
          ...prev,
          isLoading: false,
          errors: [errorMessage],
        }));

        return null;
      }
    },
    [checkHealthcareCNAE]
  );

  const clearCompliance = useCallback(() => {
    setComplianceState({
      isLoading: false,
      healthcareCNAEValid: false,
      regimeTributario: null,
      complianceChecks: {
        cnpj_valid: false,
        inscricao_estadual_valid: false,
        inscricao_municipal_valid: false,
        simples_nacional_active: false,
      },
      errors: [],
    });
  }, []);

  return {
    ...complianceState,
    checkHealthcareCNAE,
    validateCompliance,
    clearCompliance,
  };
}

/**
 * Master hook that combines all Brazilian tax functionality
 */
export function useBrazilianTax() {
  const cnpjValidation = useCNPJValidation();
  const taxCalculation = useTaxCalculation();
  const compliance = useBrazilianTaxCompliance();

  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    // Initialization logic if needed
    setIsInitialized(true);
  }, []);

  const validateAndCalculate = useCallback(
    async (cnpj: string, serviceType: string, serviceValue: number) => {
      // Step 1: Validate CNPJ
      const cnpjResult = await cnpjValidation.consultCNPJ(cnpj);
      if (!cnpjResult?.success) {
        throw new Error('CNPJ inválido ou não encontrado');
      }

      // Step 2: Validate compliance
      const complianceResult = await compliance.validateCompliance(cnpjResult.data!);
      if (!complianceResult) {
        throw new Error('Erro na validação de compliance');
      }

      // Step 3: Calculate taxes
      const taxRequest: TaxCalculationRequest = {
        clinic_id: 'temp', // Would come from context
        valor_base: serviceValue,
        tipo_servico: serviceType,
        regime_tributario: complianceResult.regimeTributario,
      };

      const taxResult = await taxCalculation.calculateTaxes(taxRequest);
      if (!taxResult) {
        throw new Error('Erro no cálculo de impostos');
      }

      return {
        cnpj: cnpjResult,
        compliance: complianceResult,
        tax: taxResult,
      };
    },
    [cnpjValidation, taxCalculation, compliance]
  );

  const resetAll = useCallback(() => {
    cnpjValidation.clearValidation();
    taxCalculation.clearCalculations();
    compliance.clearCompliance();
  }, [cnpjValidation, taxCalculation, compliance]);

  return {
    cnpj: cnpjValidation,
    tax: taxCalculation,
    compliance,
    isInitialized,
    validateAndCalculate,
    resetAll,
  };
}
