/**
 * Real-time Subscription Status Hook
 *
 * React hook that provides real-time subscription status updates with
 * automatic UI synchronization and state management.
 *
 * @author NeonPro Development Team
 * @version 1.0.0
 */

'use client';

import { useCallback, useEffect, useRef, useState } from 'react';
import { useAuth } from '../contexts/auth-context';
import type { RealtimeMetrics, SubscriptionRealtimeUpdate } from '../lib/subscription-realtime';
import { subscriptionRealtimeManager } from '../lib/subscription-realtime';
import type { SubscriptionStatus } from '../lib/subscription-status';

export type SubscriptionState = {
  status: SubscriptionStatus;
  tier: string | null;
  features: string[];
  gracePeriodEnd: string | null;
  nextBilling: string | null;
  isLoading: boolean;
  isConnected: boolean;
  lastUpdate: string | null;
  error: string | null;
};

export type SubscriptionActions = {
  refresh: () => Promise<void>;
  connect: () => Promise<void>;
  disconnect: () => Promise<void>;
  clearError: () => void;
};

export type UseSubscriptionStatusOptions = {
  autoConnect?: boolean;
  enableLogging?: boolean;
  onStatusChange?: (status: SubscriptionStatus, previous?: SubscriptionStatus) => void;
  onError?: (error: string) => void;
  onConnect?: () => void;
  onDisconnect?: () => void;
};

export interface UseSubscriptionStatusReturn extends SubscriptionState, SubscriptionActions {
  metrics: RealtimeMetrics;
  events: SubscriptionRealtimeUpdate[];
  isExpired: boolean;
  isActive: boolean;
  canAccessFeature: (feature: string) => boolean;
}

/**
 * Hook for real-time subscription status management
 *
 * @param options Configuration options for the hook
 * @returns Subscription state, actions, and utilities
 */
export function useSubscriptionStatus(
  options: UseSubscriptionStatusOptions = {}
): UseSubscriptionStatusReturn {
  const { user } = useAuth();
  const [state, setState] = useState<SubscriptionState>({
    status: 'trialing',
    tier: null,
    features: [],
    gracePeriodEnd: null,
    nextBilling: null,
    isLoading: false,
    isConnected: false,
    lastUpdate: null,
    error: null,
  });

  const [events, setEvents] = useState<SubscriptionRealtimeUpdate[]>([]);
  const [metrics, setMetrics] = useState<RealtimeMetrics>({
    connectionsActive: 0,
    messagesReceived: 0,
    messagesSent: 0,
    reconnectAttempts: 0,
    lastConnected: '',
    uptime: 0,
    latency: 0,
  });

  const unsubscribeRef = useRef<(() => void) | null>(null);
  const optionsRef = useRef(options);

  // Update options ref when options change
  useEffect(() => {
    optionsRef.current = options;
  }, [options]);

  /**
   * Handle subscription status updates
   */
  const handleSubscriptionUpdate = useCallback((update: SubscriptionRealtimeUpdate) => {
    const { status, previousStatus, metadata = {}, event, timestamp } = update;

    if (optionsRef.current.enableLogging) {
    }

    // Add event to history (keep last 50 events)
    setEvents((prev) => [update, ...prev.slice(0, 49)]);

    // Update state
    setState((prevState) => ({
      ...prevState,
      status,
      tier: metadata.tier || prevState.tier,
      features: metadata.features || prevState.features,
      gracePeriodEnd: metadata.gracePeriodEnd || prevState.gracePeriodEnd,
      nextBilling: metadata.nextBilling || prevState.nextBilling,
      lastUpdate: timestamp,
      isLoading: false,
      error: null,
    }));

    // Trigger status change callback
    if (optionsRef.current.onStatusChange && previousStatus !== status) {
      optionsRef.current.onStatusChange(status, previousStatus);
    }

    // Handle specific events
    switch (event) {
      case 'subscription_expired':
      case 'subscription_cancelled':
        if (optionsRef.current.enableLogging) {
        }
        break;
      case 'subscription_activated':
      case 'subscription_upgraded':
        if (optionsRef.current.enableLogging) {
        }
        break;
      case 'payment_failed':
        setState((prev) => ({
          ...prev,
          error: 'Payment failed. Please update your payment method.',
        }));
        if (optionsRef.current.onError) {
          optionsRef.current.onError('Payment failed. Please update your payment method.');
        }
        break;
    }
  }, []);

  /**
   * Connect to real-time updates
   */
  const connect = useCallback(async () => {
    if (!user?.id || unsubscribeRef.current) {
      return;
    }

    setState((prev) => ({ ...prev, isLoading: true }));

    try {
      // Subscribe to user's subscription updates
      const unsubscribe = subscriptionRealtimeManager.subscribe(user.id, handleSubscriptionUpdate);

      unsubscribeRef.current = unsubscribe;

      setState((prev) => ({
        ...prev,
        isConnected: true,
        isLoading: false,
        error: null,
      }));

      if (optionsRef.current.onConnect) {
        optionsRef.current.onConnect();
      }

      if (optionsRef.current.enableLogging) {
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to connect';
      setState((prev) => ({
        ...prev,
        isLoading: false,
        error: errorMessage,
      }));

      if (optionsRef.current.onError) {
        optionsRef.current.onError(errorMessage);
      }
    }
  }, [user?.id, handleSubscriptionUpdate]);

  /**
   * Disconnect from real-time updates
   */
  const disconnect = useCallback(async () => {
    if (unsubscribeRef.current) {
      unsubscribeRef.current();
      unsubscribeRef.current = null;
    }

    setState((prev) => ({
      ...prev,
      isConnected: false,
      isLoading: false,
    }));

    if (optionsRef.current.onDisconnect) {
      optionsRef.current.onDisconnect();
    }

    if (optionsRef.current.enableLogging) {
    }
  }, []);

  /**
   * Refresh subscription status
   */
  const refresh = useCallback(async () => {
    if (!user?.id) {
      return;
    }

    setState((prev) => ({ ...prev, isLoading: true }));

    try {
      await subscriptionRealtimeManager.forceRefresh(user.id);
      setState((prev) => ({ ...prev, isLoading: false }));
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to refresh';
      setState((prev) => ({
        ...prev,
        isLoading: false,
        error: errorMessage,
      }));
    }
  }, [user?.id]);

  /**
   * Clear current error
   */
  const clearError = useCallback(() => {
    setState((prev) => ({ ...prev, error: null }));
  }, []);

  /**
   * Check if user can access a specific feature
   */
  const canAccessFeature = useCallback(
    (feature: string): boolean => {
      if (!state.features.length) {
        return false;
      }
      return state.features.includes(feature);
    },
    [state.features]
  );

  // Update metrics periodically
  useEffect(() => {
    const updateMetrics = () => {
      setMetrics(subscriptionRealtimeManager.getMetrics());
    };

    updateMetrics();
    const interval = setInterval(updateMetrics, 5000); // Update every 5 seconds

    return () => clearInterval(interval);
  }, []);

  // Auto-connect on mount if enabled
  useEffect(() => {
    if (options.autoConnect !== false && user?.id) {
      connect();
    }

    return () => {
      disconnect();
    };
  }, [user?.id, connect, disconnect, options.autoConnect]);

  // Update connection status based on realtime manager
  useEffect(() => {
    const checkConnection = () => {
      const isConnected = subscriptionRealtimeManager.isConnectedToRealtime();
      setState((prev) => ({ ...prev, isConnected }));
    };

    const interval = setInterval(checkConnection, 1000); // Check every second
    return () => clearInterval(interval);
  }, []);

  // Computed values
  const isExpired = state.status === 'expired' || state.status === 'cancelled';
  const isActive = state.status === 'active' || state.status === 'trialing';

  return {
    // State
    ...state,

    // Computed values
    isExpired,
    isActive,

    // Actions
    connect,
    disconnect,
    refresh,
    clearError,
    canAccessFeature,

    // Additional data
    metrics,
    events,
  };
}

/**
 * Simplified hook for just subscription status (no real-time updates)
 */
export function useSubscriptionStatusSimple() {
  const { user } = useAuth();
  const [status, setStatus] = useState<SubscriptionStatus | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (!user?.id) {
      return;
    }

    const fetchStatus = async () => {
      setIsLoading(true);
      try {
        // This would typically call your subscription service
        // For now, we'll use a placeholder
        setStatus('active');
      } catch (_error) {
      } finally {
        setIsLoading(false);
      }
    };

    fetchStatus();
  }, [user?.id]);

  return {
    status,
    isLoading,
    isActive: status === 'active' || status === 'trialing',
    isExpired: status === 'expired' || status === 'cancelled',
  };
}

/**
 * Hook for subscription feature access checking
 */
export function useSubscriptionFeatures() {
  const { features, tier, canAccessFeature } = useSubscriptionStatus({
    autoConnect: true,
  });

  return {
    features,
    tier,
    canAccess: canAccessFeature,
    hasBasicFeatures: tier === 'basic' || tier === 'premium' || tier === 'enterprise',
    hasPremiumFeatures: tier === 'premium' || tier === 'enterprise',
    hasEnterpriseFeatures: tier === 'enterprise',
  };
}
