// Comprehensive Error Handling System with LGPD Compliance
'use client';

import { useCallback, useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useToast } from '../use-toast-mock';

// LGPD-compliant error types that don't expose sensitive data
export type ErrorCategory =
  | 'network'
  | 'authentication'
  | 'authorization'
  | 'validation'
  | 'conflict'
  | 'resource_not_found'
  | 'system'
  | 'external_service'
  | 'data_processing'
  | 'privacy_compliance';

export type ErrorSeverity = 'low' | 'medium' | 'high' | 'critical';

export type ErrorContext = {
  component: string;
  action: string;
  userId?: string;
  sessionId: string;
  timestamp: string;
  userAgent: string;
  metadata?: Record<string, any>;
};

export type AppError = {
  id: string;
  category: ErrorCategory;
  severity: ErrorSeverity;
  code: string;
  title: string;
  message: string;
  description?: string;
  suggestedActions: string[];
  technicalDetails?: string; // Only shown to authorized users
  context: ErrorContext;
  isUserFacing: boolean;
  requiresSupport: boolean;
  helpUrl?: string;
  canRetry: boolean;
  retryDelay?: number;
};

// LGPD-compliant error message templates (PT-BR)
const ERROR_TEMPLATES: Record<string, Partial<AppError>> = {
  // Network Errors
  NETWORK_UNAVAILABLE: {
    category: 'network',
    severity: 'medium',
    title: 'Conexão Indisponível',
    message: 'Não foi possível conectar ao servidor. Verifique sua conexão com a internet.',
    suggestedActions: [
      'Verifique sua conexão com a internet',
      'Tente novamente em alguns instantes',
      'Entre em contato com o suporte se o problema persistir',
    ],
    canRetry: true,
    retryDelay: 5000,
  },

  NETWORK_TIMEOUT: {
    category: 'network',
    severity: 'medium',
    title: 'Tempo Limite Excedido',
    message: 'A operação demorou mais que o esperado. Isso pode indicar lentidão na rede.',
    suggestedActions: [
      'Tente novamente',
      'Verifique a velocidade da sua conexão',
      'Aguarde alguns minutos e tente novamente',
    ],
    canRetry: true,
    retryDelay: 3000,
  },

  // Authentication Errors (LGPD-compliant - no personal data exposure)
  AUTH_INVALID_CREDENTIALS: {
    category: 'authentication',
    severity: 'low',
    title: 'Credenciais Inválidas',
    message: 'Email ou senha incorretos. Verifique suas informações e tente novamente.',
    suggestedActions: [
      'Verifique se digitou o email corretamente',
      'Confirme sua senha',
      'Use "Esqueci minha senha" se necessário',
    ],
    helpUrl: '/auth/forgot-password',
    canRetry: true,
  },

  AUTH_SESSION_EXPIRED: {
    category: 'authentication',
    severity: 'medium',
    title: 'Sessão Expirada',
    message: 'Sua sessão expirou por segurança. Por favor, faça login novamente.',
    suggestedActions: [
      'Faça login novamente',
      'Seus dados não foram perdidos',
      'Configure "Lembrar-me" para sessões mais longas',
    ],
    helpUrl: '/auth/login',
    canRetry: false,
  },

  // Authorization Errors (LGPD-compliant)
  AUTH_INSUFFICIENT_PERMISSIONS: {
    category: 'authorization',
    severity: 'medium',
    title: 'Acesso Não Autorizado',
    message: 'Você não tem permissão para executar esta ação. Entre em contato com seu supervisor.',
    suggestedActions: [
      'Verifique se você tem as permissões necessárias',
      'Entre em contato com o administrador do sistema',
      'Faça login com uma conta autorizada',
    ],
    requiresSupport: true,
    canRetry: false,
  },

  // Validation Errors (Data-protective)
  VALIDATION_REQUIRED_FIELD: {
    category: 'validation',
    severity: 'low',
    title: 'Campo Obrigatório',
    message: 'Alguns campos obrigatórios não foram preenchidos. Verifique o formulário.',
    suggestedActions: [
      'Preencha todos os campos marcados com *',
      'Verifique se os dados estão no formato correto',
      'Salve o formulário após preencher',
    ],
    canRetry: true,
  },

  VALIDATION_INVALID_FORMAT: {
    category: 'validation',
    severity: 'low',
    title: 'Formato Inválido',
    message: 'Alguns dados não estão no formato esperado. Verifique as informações.',
    suggestedActions: [
      'Verifique o formato dos campos (email, telefone, CPF)',
      'Use apenas números para campos numéricos',
      'Consulte os exemplos fornecidos',
    ],
    canRetry: true,
  },

  // Conflict Errors (Healthcare-specific)
  APPOINTMENT_CONFLICT: {
    category: 'conflict',
    severity: 'medium',
    title: 'Conflito de Agendamento',
    message: 'Já existe um agendamento neste horário. Escolha um horário alternativo.',
    suggestedActions: [
      'Escolha um horário diferente',
      'Veja os horários sugeridos automaticamente',
      'Entre em contato para reagendar agendamentos existentes',
    ],
    helpUrl: '/help/scheduling-conflicts',
    canRetry: true,
  },

  // System Errors (Privacy-protective)
  SYSTEM_MAINTENANCE: {
    category: 'system',
    severity: 'high',
    title: 'Sistema em Manutenção',
    message: 'O sistema está temporariamente indisponível para manutenção programada.',
    suggestedActions: [
      'Tente novamente em alguns minutos',
      'Verifique nossos canais de comunicação para atualizações',
      'Seus dados estão seguros e serão preservados',
    ],
    canRetry: true,
    retryDelay: 60_000, // 1 minute
  },

  SYSTEM_OVERLOAD: {
    category: 'system',
    severity: 'high',
    title: 'Sistema Sobrecarregado',
    message: 'O sistema está com alta demanda. Aguarde um momento e tente novamente.',
    suggestedActions: [
      'Aguarde alguns minutos',
      'Evite múltiplas tentativas simultâneas',
      'Tente novamente fora dos horários de pico',
    ],
    canRetry: true,
    retryDelay: 30_000, // 30 seconds
  },

  // Data Processing Errors (LGPD-compliant)
  DATA_PROCESSING_ERROR: {
    category: 'data_processing',
    severity: 'medium',
    title: 'Erro no Processamento',
    message: 'Ocorreu um erro ao processar suas informações. Seus dados não foram alterados.',
    suggestedActions: [
      'Tente a operação novamente',
      'Verifique se todos os dados estão corretos',
      'Entre em contato com o suporte se persistir',
    ],
    requiresSupport: true,
    canRetry: true,
  },

  // Privacy Compliance Errors
  PRIVACY_CONSENT_REQUIRED: {
    category: 'privacy_compliance',
    severity: 'medium',
    title: 'Consentimento Necessário',
    message: 'Esta operação requer seu consentimento para processamento de dados pessoais.',
    suggestedActions: [
      'Revise e aceite os termos de consentimento',
      'Consulte nossa política de privacidade',
      'Entre em contato para esclarecimentos sobre LGPD',
    ],
    helpUrl: '/privacy/consent',
    canRetry: true,
  },
};

export function useErrorHandling() {
  const [errors, setErrors] = useState<AppError[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const supabase = createClientComponentClient();

  // Generate unique session ID for error tracking
  const sessionId = useCallback(() => {
    if (typeof window !== 'undefined') {
      let id = sessionStorage.getItem('session_id');
      if (!id) {
        id = `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        sessionStorage.setItem('session_id', id);
      }
      return id;
    }
    return `sess_${Date.now()}`;
  }, []);

  // Create comprehensive error context following LGPD principles
  const createErrorContext = useCallback(
    (component: string, action: string, metadata?: Record<string, any>): ErrorContext => {
      return {
        component,
        action,
        sessionId: sessionId(),
        timestamp: new Date().toISOString(),
        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'server',
        metadata: metadata ? { ...metadata, sensitive_data_removed: true } : undefined,
      };
    },
    [sessionId]
  );

  // Create standardized error following privacy-by-design principles
  const createError = useCallback(
    (
      errorCode: string,
      context: ErrorContext,
      customMessage?: string,
      customDetails?: Partial<AppError>
    ): AppError => {
      const template = ERROR_TEMPLATES[errorCode] || ERROR_TEMPLATES.SYSTEM_MAINTENANCE;

      const error: AppError = {
        id: `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        code: errorCode,
        title: template.title || 'Erro do Sistema',
        message: customMessage || template.message || 'Ocorreu um erro inesperado.',
        category: template.category || 'system',
        severity: template.severity || 'medium',
        suggestedActions: template.suggestedActions || ['Entre em contato com o suporte'],
        context,
        isUserFacing: true,
        requiresSupport: template.requiresSupport,
        helpUrl: template.helpUrl,
        canRetry: template.canRetry,
        retryDelay: template.retryDelay,
        ...customDetails,
      };

      return error;
    },
    []
  );

  // Log error with LGPD compliance (no sensitive data)
  const logError = useCallback(
    async (error: AppError, originalError?: Error) => {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();

        // Only log essential information, no sensitive data (LGPD compliance)
        const logEntry = {
          error_id: error.id,
          error_code: error.code,
          category: error.category,
          severity: error.severity,
          user_id: user?.id || null, // Anonymous if not authenticated
          session_id: error.context.sessionId,
          component: error.context.component,
          action: error.context.action,
          user_agent: error.context.userAgent,
          timestamp: error.context.timestamp,
          can_retry: error.canRetry,
          requires_support: error.requiresSupport,
          // Technical details only for debugging, never expose sensitive data
          technical_details: originalError
            ? {
                name: originalError.name,
                message: originalError.message.substring(0, 200), // Truncate to avoid data exposure
                stack: originalError.stack?.substring(0, 500), // Limited stack trace
              }
            : null,
        };

        await supabase.from('error_logs').insert([logEntry]);
      } catch (_logError) {}
    },
    [supabase]
  );

  // Handle error with progressive disclosure and user-friendly messaging
  const handleError = useCallback(
    async (
      errorCode: string,
      component: string,
      action: string,
      originalError?: Error,
      metadata?: Record<string, any>
    ) => {
      setIsLoading(true);

      try {
        const context = createErrorContext(component, action, metadata);
        const appError = createError(errorCode, context);

        // Log for debugging and compliance
        await logError(appError, originalError);

        // Add to current session errors
        setErrors((prev) => [...prev, appError]);

        // Show user-friendly toast notification
        toast({
          variant:
            appError.severity === 'critical' || appError.severity === 'high'
              ? 'destructive'
              : 'default',
          title: appError.title,
          description: appError.message,
          action: appError.canRetry
            ? {
                label: 'Tentar Novamente',
                onClick: () => {
                  // Remove this error from the list when retrying
                  setErrors((prev) => prev.filter((e) => e.id !== appError.id));
                },
              }
            : undefined,
        });

        return appError;
      } finally {
        setIsLoading(false);
      }
    },
    [createErrorContext, createError, logError, toast]
  );

  // Handle different types of API errors with privacy protection
  const handleApiError = useCallback(
    async (error: unknown, component: string, action: string, metadata?: Record<string, any>) => {
      let errorCode = 'SYSTEM_MAINTENANCE'; // Default safe error

      // Map API errors to user-friendly codes without exposing technical details
      if (error?.status === 401) {
        errorCode = 'AUTH_SESSION_EXPIRED';
      } else if (error?.status === 403) {
        errorCode = 'AUTH_INSUFFICIENT_PERMISSIONS';
      } else if (error?.status === 404) {
        errorCode = 'RESOURCE_NOT_FOUND';
      } else if (error?.status === 409) {
        errorCode = 'APPOINTMENT_CONFLICT';
      } else if (error?.status === 422) {
        errorCode = 'VALIDATION_INVALID_FORMAT';
      } else if (error?.status >= 500) {
        errorCode = 'SYSTEM_OVERLOAD';
      } else if (error?.name === 'AbortError') {
        errorCode = 'NETWORK_TIMEOUT';
      } else if (!navigator.onLine) {
        errorCode = 'NETWORK_UNAVAILABLE';
      }

      return handleError(errorCode, component, action, error, metadata);
    },
    [handleError]
  );

  // Clear specific error
  const clearError = useCallback((errorId: string) => {
    setErrors((prev) => prev.filter((error) => error.id !== errorId));
  }, []);

  // Clear all errors
  const clearAllErrors = useCallback(() => {
    setErrors([]);
  }, []);

  // Get errors by category for progressive disclosure
  const getErrorsByCategory = useCallback(
    (category: ErrorCategory) => {
      return errors.filter((error) => error.category === category);
    },
    [errors]
  );

  // Check if there are critical errors requiring immediate attention
  const hasCriticalErrors = useCallback(() => {
    return errors.some((error) => error.severity === 'critical');
  }, [errors]);

  return {
    // State
    errors,
    isLoading,
    hasCriticalErrors: hasCriticalErrors(),

    // Actions
    handleError,
    handleApiError,
    clearError,
    clearAllErrors,
    createError,
    getErrorsByCategory,

    // Utilities
    ERROR_TEMPLATES,
  };
}
