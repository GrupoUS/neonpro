/**
 * Jest Configuration for NeonPro UI Package
 *
 * Component Library + Healthcare Accessibility Testing
 * WCAG 2.1 AA+ Compliance + Anxiety-Reducing Design Patterns
 * Quality Standards: ≥9.9/10 Healthcare Validation
 */

const { createJestConfig } = require('../../jest.shared');

/** @type {import('jest').Config} */
const config = createJestConfig({
  packageName: 'neonpro-ui',
  displayName: 'NeonPro UI Components',
  rootDir: __dirname,

  // Additional setup files for UI testing
  additionalSetupFiles: ['<rootDir>/jest.setup.js'],

  // Healthcare UI component coverage thresholds
  coverageThreshold: {
    global: {
      branches: 95, // High threshold for reusable components
      functions: 95,
      lines: 95,
      statements: 95,
    },
    // Healthcare form components (100% coverage)
    '**/components/forms/**/*.{ts,tsx}': {
      branches: 100,
      functions: 100,
      lines: 100,
      statements: 100,
    },
    // Accessibility components (100% coverage)
    '**/components/accessibility/**/*.{ts,tsx}': {
      branches: 100,
      functions: 100,
      lines: 100,
      statements: 100,
    },
    // LGPD compliance components (≥98% coverage)
    '**/components/lgpd/**/*.{ts,tsx}': {
      branches: 98,
      functions: 98,
      lines: 98,
      statements: 98,
    },
    // Medical UI components (≥98% coverage)
    '**/components/medical/**/*.{ts,tsx}': {
      branches: 98,
      functions: 98,
      lines: 98,
      statements: 98,
    },
  },

  // Module name mapping for UI package
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '^@/components/(.*)$': '<rootDir>/src/components/$1',
    '^@/hooks/(.*)$': '<rootDir>/src/hooks/$1',
    '^@/utils/(.*)$': '<rootDir>/src/utils/$1',
    '^@/types/(.*)$': '<rootDir>/src/types/$1',
    '^@/styles/(.*)$': '<rootDir>/src/styles/$1',
    // Test utilities
    '^@test/(.*)$': '<rootDir>/../../test-utils/$1',
    // CSS Modules and Styled Components
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '\\.(jpg|jpeg|png|gif|svg)$': '<rootDir>/../../test-utils/file-mock.js',
  },

  // UI-specific test patterns
  testMatch: [
    '<rootDir>/**/__tests__/**/*.(ts|tsx)',
    '<rootDir>/**/*.(test|spec).(ts|tsx)',
    '<rootDir>/src/components/**/*.test.(ts|tsx)',
    '<rootDir>/src/hooks/**/*.test.(ts|tsx)',
  ],

  // Coverage collection for UI components
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{ts,tsx}',
    '!src/**/*.config.{js,ts}',
    '!src/index.ts', // Export file
    '!src/types/**/*', // Type definitions
  ],

  // UI testing globals
  globals: {
    __HEALTHCARE_MODE__: true,
    __LGPD_COMPLIANCE__: true,
    __ANVISA_VALIDATION__: true,
    __CFM_STANDARDS__: true,
    __UI_TESTING__: true,
    __ACCESSIBILITY_TESTING__: true,
  },

  // Reporters for UI component testing
  reporters: [
    'default',
    [
      'jest-junit',
      {
        outputDirectory: 'coverage',
        outputName: 'ui-components-junit.xml',
        suiteNameTemplate: '{title} - UI Components',
      },
    ],
  ],

  // Cache directory for UI tests
  cacheDirectory: '<rootDir>/../../node_modules/.cache/jest-ui',

  // Transform ignore patterns for UI dependencies
  transformIgnorePatterns: ['/node_modules/(?!(.*\\.mjs$|@radix-ui|@headlessui|framer-motion))'],

  // Test environment options for UI testing
  testEnvironmentOptions: {
    url: 'http://localhost:3000',
    customExportConditions: ['healthcare', 'accessibility', 'node'],
  },

  // Verbose output for component testing
  verbose: true,

  // Clear mocks between UI tests
  clearMocks: true,
  restoreMocks: true,
  resetMocks: true,

  // Max workers for UI testing
  maxWorkers: '50%',

  // Bail configuration
  bail: process.env.CI ? 1 : 0,
});

module.exports = config;
