{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "title": "Deployment Workflow Configuration",
  "description": "Example proactive hook configuration for deployment workflow: security ‚Üí quality ‚Üí build ‚Üí test ‚Üí deploy ‚Üí verify",
  "version": "1.0.0",
  "workflowType": "deployment",

  "taskCompletionCommands": {
    "description": "Commands executed when a deployment preparation task completes",
    "always": [
      {
        "command": "echo",
        "args": [
          "Deployment preparation task completed - running security and quality checks"
        ],
        "timeout": 5,
        "continueOnFailure": true,
        "description": "Deployment task completion notification"
      }
    ],
    "onSuccess": [
      {
        "command": "npm",
        "args": ["audit", "--audit-level", "moderate"],
        "timeout": 60,
        "continueOnFailure": false,
        "description": "Run security audit for vulnerabilities",
        "conditions": {
          "fileExists": "package.json"
        }
      },
      {
        "command": "npm",
        "args": ["run", "lint"],
        "timeout": 45,
        "continueOnFailure": false,
        "description": "Ensure code quality before deployment",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "lint",
          "previousCommandSuccess": true
        }
      },
      {
        "command": "npm",
        "args": ["run", "test:production"],
        "timeout": 120,
        "continueOnFailure": false,
        "description": "Run production-specific tests",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "test:production",
          "previousCommandSuccess": true
        }
      }
    ],
    "onFailure": [
      {
        "command": "echo",
        "args": ["‚ùå DEPLOYMENT BLOCKED: Task failed security/quality checks"],
        "timeout": 5,
        "continueOnFailure": true,
        "description": "Critical failure notification - deployment blocked"
      },
      {
        "command": "npm",
        "args": ["run", "deployment-rollback-prep"],
        "timeout": 30,
        "continueOnFailure": true,
        "description": "Prepare rollback strategy if available",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "deployment-rollback-prep"
        }
      }
    ]
  },

  "planCompletionCommands": {
    "description": "Commands executed when the deployment plan completes",
    "always": [
      {
        "command": "echo",
        "args": [
          "Deployment plan completed - initiating production deployment sequence"
        ],
        "timeout": 5,
        "continueOnFailure": true,
        "description": "Deployment plan completion notification"
      }
    ],
    "onSuccess": [
      {
        "command": "npm",
        "args": ["run", "build:production"],
        "timeout": 300,
        "continueOnFailure": false,
        "description": "Create optimized production build",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "build:production"
        }
      },
      {
        "command": "npm",
        "args": ["run", "test:build"],
        "timeout": 120,
        "continueOnFailure": false,
        "description": "Test the production build",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "test:build",
          "previousCommandSuccess": true
        }
      },
      {
        "command": "npm",
        "args": ["run", "deploy:staging"],
        "timeout": 600,
        "continueOnFailure": false,
        "description": "Deploy to staging environment",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "deploy:staging",
          "previousCommandSuccess": true
        }
      },
      {
        "command": "npm",
        "args": ["run", "test:smoke"],
        "timeout": 180,
        "continueOnFailure": false,
        "description": "Run smoke tests on staging",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "test:smoke",
          "previousCommandSuccess": true
        }
      },
      {
        "command": "npm",
        "args": ["run", "deploy:production"],
        "timeout": 900,
        "continueOnFailure": false,
        "description": "Deploy to production environment",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "deploy:production",
          "previousCommandSuccess": true
        }
      },
      {
        "command": "npm",
        "args": ["run", "health-check"],
        "timeout": 120,
        "continueOnFailure": false,
        "description": "Verify production deployment health",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "health-check",
          "previousCommandSuccess": true
        }
      },
      {
        "command": "echo",
        "args": [
          "üöÄ DEPLOYMENT SUCCESSFUL: Application deployed to production and health checks passed!"
        ],
        "timeout": 5,
        "continueOnFailure": true,
        "description": "Deployment success celebration"
      }
    ],
    "onFailure": [
      {
        "command": "echo",
        "args": ["üö® DEPLOYMENT FAILED: Initiating rollback procedures"],
        "timeout": 5,
        "continueOnFailure": true,
        "description": "Deployment failure alert"
      },
      {
        "command": "npm",
        "args": ["run", "rollback:production"],
        "timeout": 300,
        "continueOnFailure": true,
        "description": "Rollback production deployment",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "rollback:production"
        }
      },
      {
        "command": "npm",
        "args": ["run", "notify-deployment-failure"],
        "timeout": 30,
        "continueOnFailure": true,
        "description": "Notify team of deployment failure",
        "conditions": {
          "fileExists": "package.json",
          "scriptExists": "notify-deployment-failure"
        }
      }
    ]
  },

  "securityChecks": {
    "description": "Security validation steps for deployment workflow",
    "dependencyAudit": {
      "enabled": true,
      "level": "moderate",
      "autoFix": false,
      "blockOnVulnerabilities": true
    },
    "secretsScanning": {
      "enabled": true,
      "patterns": [".env", "*.key", "*.pem", "config/*.json"],
      "excludePatterns": ["node_modules/**", "dist/**"]
    },
    "codeScanning": {
      "enabled": true,
      "tools": ["eslint-plugin-security", "semgrep"],
      "failOnHigh": true,
      "failOnMedium": false
    }
  },

  "deploymentEnvironments": {
    "description": "Environment-specific deployment configurations",
    "staging": {
      "name": "staging",
      "url": "https://staging.example.com",
      "healthCheckEndpoint": "/api/health",
      "deploymentTimeout": 600,
      "rollbackTimeout": 300
    },
    "production": {
      "name": "production",
      "url": "https://example.com",
      "healthCheckEndpoint": "/api/health",
      "deploymentTimeout": 900,
      "rollbackTimeout": 180,
      "requiresApproval": true
    }
  },

  "qualityGates": {
    "description": "Quality gates that must pass before deployment",
    "securityAudit": {
      "enabled": true,
      "failOnHigh": true,
      "failOnMedium": false
    },
    "codeQuality": {
      "enabled": true,
      "minimumScore": 8.5,
      "failOnError": true
    },
    "testCoverage": {
      "enabled": true,
      "minimumCoverage": 85,
      "failOnBelow": true
    },
    "performanceTests": {
      "enabled": true,
      "maxResponseTime": 500,
      "maxMemoryUsage": "512MB"
    }
  },

  "rollbackStrategy": {
    "description": "Automated rollback configuration",
    "enabled": true,
    "triggers": [
      "health_check_failure",
      "deployment_timeout",
      "critical_error"
    ],
    "rollbackTimeout": 300,
    "verifyRollback": true,
    "notifyOnRollback": true
  },

  "monitoring": {
    "description": "Post-deployment monitoring configuration",
    "healthChecks": {
      "enabled": true,
      "interval": 30,
      "timeout": 10,
      "retries": 3
    },
    "errorMonitoring": {
      "enabled": true,
      "alertThreshold": 5,
      "timeWindow": 300
    },
    "performanceMonitoring": {
      "enabled": true,
      "metricsToTrack": [
        "response_time",
        "memory_usage",
        "cpu_usage",
        "error_rate"
      ]
    }
  },

  "notifications": {
    "description": "Notification settings for deployment workflow",
    "channels": ["slack", "email", "webhook"],
    "onDeploymentStart": {
      "enabled": true,
      "message": "üöÄ Deployment started for {{environment}} environment"
    },
    "onDeploymentSuccess": {
      "enabled": true,
      "message": "‚úÖ Deployment successful to {{environment}} environment"
    },
    "onDeploymentFailure": {
      "enabled": true,
      "message": "‚ùå Deployment failed to {{environment}} environment - rollback initiated"
    },
    "onRollback": {
      "enabled": true,
      "message": "üîÑ Rollback completed for {{environment}} environment"
    }
  },

  "examples": {
    "description": "Example deployment scenarios",
    "webApplication": {
      "description": "Standard web application deployment",
      "requiredScripts": [
        "build:production",
        "deploy:staging",
        "deploy:production",
        "health-check",
        "rollback:production"
      ]
    },
    "microservice": {
      "description": "Microservice deployment with Docker",
      "requiredScripts": [
        "docker:build",
        "docker:test",
        "deploy:staging",
        "test:smoke",
        "deploy:production",
        "health-check"
      ]
    },
    "staticSite": {
      "description": "Static site deployment to CDN",
      "requiredScripts": [
        "build:production",
        "deploy:cdn",
        "purge:cache",
        "test:e2e"
      ]
    }
  },

  "troubleshooting": {
    "description": "Common deployment issues and solutions",
    "commonIssues": {
      "buildFailures": {
        "problem": "Production build fails with errors",
        "solution": "Check environment variables, dependency versions, and build configuration"
      },
      "deploymentTimeout": {
        "problem": "Deployment times out",
        "solution": "Check network connectivity, server resources, and deployment configuration"
      },
      "healthCheckFailure": {
        "problem": "Health checks fail after deployment",
        "solution": "Verify application startup, database connections, and external service dependencies"
      },
      "rollbackFailure": {
        "problem": "Automatic rollback fails",
        "solution": "Check rollback scripts, previous version availability, and manual intervention procedures"
      }
    }
  }
}
