{
	"$schema": "https://json-schema.org/draft-07/schema#",
	"title": "Testing-Focused Workflow Configuration",
	"description": "Comprehensive proactive hook configuration focused on thorough testing: unit ‚Üí integration ‚Üí e2e ‚Üí coverage",
	"version": "1.0.0",
	"workflowType": "testing",

	"taskCompletionCommands": {
		"description": "Commands executed when a testing-related task completes",
		"always": [
			{
				"command": "echo",
				"args": ["Testing task completed - running test validation"],
				"timeout": 5,
				"continueOnFailure": true,
				"description": "Testing task completion notification"
			}
		],
		"onSuccess": [
			{
				"command": "npm",
				"args": ["run", "test:unit"],
				"timeout": 120,
				"continueOnFailure": false,
				"description": "Run Vitest unit tests after code changes",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:unit"
				}
			},
			{
				"command": "npm",
				"args": ["run", "test:changed"],
				"timeout": 90,
				"continueOnFailure": true,
				"description": "Run tests for changed files only",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:changed",
					"previousCommandSuccess": true
				}
			},
			{
				"command": "npm",
				"args": ["run", "lint:test"],
				"timeout": 30,
				"continueOnFailure": true,
				"description": "Lint test files for consistency",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "lint:test"
				}
			}
		],
		"onFailure": [
			{
				"command": "echo",
				"args": ["Testing task failed - investigating test failures"],
				"timeout": 5,
				"continueOnFailure": true,
				"description": "Test failure notification"
			},
			{
				"command": "npm",
				"args": ["run", "test:debug"],
				"timeout": 60,
				"continueOnFailure": true,
				"description": "Run tests in debug mode for troubleshooting",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:debug"
				}
			}
		]
	},

	"planCompletionCommands": {
		"description": "Commands executed when the testing plan completes",
		"always": [
			{
				"command": "echo",
				"args": ["Testing plan completed - running comprehensive test suite"],
				"timeout": 5,
				"continueOnFailure": true,
				"description": "Testing plan completion notification"
			}
		],
		"onSuccess": [
			{
				"command": "npm",
				"args": ["run", "test:all"],
				"timeout": 300,
				"continueOnFailure": false,
				"description": "Run complete test suite",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:all"
				}
			},
			{
				"command": "npm",
				"args": ["run", "test:integration"],
				"timeout": 240,
				"continueOnFailure": false,
				"description": "Run integration tests",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:integration",
					"previousCommandSuccess": true
				}
			},
			{
				"command": "npm",
				"args": ["run", "test:e2e"],
				"timeout": 600,
				"continueOnFailure": true,
				"description": "Run Playwright end-to-end tests",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:e2e",
					"previousCommandSuccess": true
				}
			},
			{
				"command": "npm",
				"args": ["run", "test:coverage"],
				"timeout": 180,
				"continueOnFailure": false,
				"description": "Generate comprehensive coverage report",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:coverage"
				}
			},
			{
				"command": "npm",
				"args": ["run", "test:performance"],
				"timeout": 300,
				"continueOnFailure": true,
				"description": "Run performance tests",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:performance"
				}
			},
			{
				"command": "npm",
				"args": ["run", "test:security"],
				"timeout": 120,
				"continueOnFailure": true,
				"description": "Run security-focused tests",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:security"
				}
			},
			{
				"command": "echo",
				"args": [
					"üß™ Testing workflow completed! All test suites have been executed."
				],
				"timeout": 5,
				"continueOnFailure": true,
				"description": "Testing completion celebration"
			}
		],
		"onFailure": [
			{
				"command": "echo",
				"args": [
					"‚ùå Testing workflow completed with failures - generating failure report"
				],
				"timeout": 5,
				"continueOnFailure": true,
				"description": "Testing failure notification"
			},
			{
				"command": "npm",
				"args": ["run", "test:failure-report"],
				"timeout": 60,
				"continueOnFailure": true,
				"description": "Generate detailed failure analysis",
				"conditions": {
					"fileExists": "package.json",
					"scriptExists": "test:failure-report"
				}
			}
		]
	},

	"testingSuite": {
		"description": "Comprehensive testing suite configuration",
		"unitTesting": {
			"enabled": true,
			"framework": "vitest",
			"coverage": {
				"threshold": 85,
				"enforceOnBuild": true,
				"provider": "v8"
			},
			"parallelExecution": true,
			"watchMode": false
		},
		"integrationTesting": {
			"enabled": true,
			"framework": "vitest",
			"database": "testDatabase",
			"externalServices": "mock",
			"cleanup": "afterEach"
		},
		"e2eTesting": {
			"enabled": true,
			"framework": "playwright",
			"browsers": ["chromium", "firefox", "webkit"],
			"timeout": 30000,
			"retries": 2,
			"screenshots": true,
			"headless": true
		},
		"performanceTesting": {
			"enabled": true,
			"framework": "vitest",
			"loadTesting": true,
			"memoryLeakDetection": true,
			"benchmarking": true
		}
	},

	"qualityMetrics": {
		"description": "Quality metrics and thresholds for testing workflow",
		"coverageThresholds": {
			"statements": 85,
			"branches": 80,
			"functions": 90,
			"lines": 85
		},
		"performanceThresholds": {
			"maxTestDuration": 300000,
			"maxMemoryUsage": "1GB",
			"maxCpuUsage": 80
		},
		"reliabilityMetrics": {
			"maxFlakiness": 5,
			"minPassRate": 95,
			"maxRetries": 3
		}
	},

	"testEnvironments": {
		"description": "Different test environment configurations",
		"unit": {
			"name": "unit",
			"isolated": true,
			"mocks": "all-external",
			"database": false
		},
		"integration": {
			"name": "integration",
			"isolated": false,
			"mocks": "external-services-only",
			"database": "test-db"
		},
		"e2e": {
			"name": "e2e",
			"isolated": false,
			"mocks": "none",
			"database": "staging-db",
			"browser": true
		}
	},

	"reportGeneration": {
		"description": "Test report generation configuration",
		"formats": ["html", "json", "xml", "lcov"],
		"outputDirectory": "./test-reports",
		"includeCoverage": true,
		"includePerformanceMetrics": true,
		"generateTrends": true,
		"historicalComparison": true
	},

	"testDataManagement": {
		"description": "Test data management and fixtures",
		"fixtures": {
			"enabled": true,
			"directory": "./tests/fixtures",
			"autoGeneration": false
		},
		"seedData": {
			"enabled": true,
			"resetBeforeTests": true,
			"cleanupAfterTests": true
		},
		"mocking": {
			"strategy": "smart-mocks",
			"persistMocks": false,
			"mockExternalAPIs": true
		}
	},

	"continuousIntegration": {
		"description": "CI-specific testing configuration",
		"parallel": {
			"enabled": true,
			"maxWorkers": 4,
			"smartDistribution": true
		},
		"caching": {
			"enabled": true,
			"cacheKey": "dependencies-test-files",
			"restoreKeys": ["dependencies-"]
		},
		"reporting": {
			"junitXML": true,
			"cobertura": true,
			"githubAnnotations": true
		}
	},

	"examples": {
		"description": "Example testing scenarios and configurations",
		"webApplication": {
			"description": "Full-stack web application testing",
			"requiredScripts": [
				"test:unit",
				"test:integration",
				"test:e2e",
				"test:coverage",
				"test:all"
			],
			"testTypes": [
				"Component tests with React Testing Library",
				"API integration tests with supertest",
				"E2E tests with Cypress or Playwright",
				"Performance tests with Lighthouse CI"
			]
		},
		"apiService": {
			"description": "REST API service testing",
			"requiredScripts": [
				"test:unit",
				"test:integration",
				"test:contract",
				"test:security"
			],
			"testTypes": [
				"Unit tests for business logic",
				"Integration tests for database operations",
				"Contract tests for API compatibility",
				"Security tests for vulnerabilities"
			]
		},
		"libraryPackage": {
			"description": "NPM library/package testing",
			"requiredScripts": [
				"test:unit",
				"test:types",
				"test:compatibility",
				"test:coverage"
			],
			"testTypes": [
				"Unit tests for all public APIs",
				"TypeScript type checking",
				"Cross-platform compatibility tests",
				"Documentation example tests"
			]
		}
	},

	"troubleshooting": {
		"description": "Common testing issues and solutions",
		"commonIssues": {
			"flakytests": {
				"problem": "Tests pass sometimes, fail other times",
				"solution": "Add proper async/await handling, increase timeouts, isolate test data, check for race conditions"
			},
			"slowTests": {
				"problem": "Test suite takes too long to complete",
				"solution": "Enable parallel execution, optimize test data setup, use test.concurrent, profile slow tests"
			},
			"memoryLeaks": {
				"problem": "Tests consume excessive memory",
				"solution": "Add proper cleanup in afterEach, avoid global state, check for unresolved promises"
			},
			"coverageIssues": {
				"problem": "Coverage reports are inaccurate",
				"solution": "Configure coverage collection properly, exclude irrelevant files, check source maps"
			},
			"e2eFailures": {
				"problem": "E2E tests fail frequently in CI",
				"solution": "Increase timeouts, add explicit waits, use stable selectors, record videos for debugging"
			}
		},
		"debugging": {
			"unitTests": "Use --verbose flag, add console.logs, use debugger statements",
			"integrationTests": "Check database state, verify API responses, use logging middleware",
			"e2eTests": "Enable video recording, take screenshots on failure, use browser dev tools"
		}
	}
}
