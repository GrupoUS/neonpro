#!/usr/bin/env bash
# NeonPro Enhanced Pre-commit Hook
# Following Husky v9+ best practices with healthcare compliance
# Last Updated: 2025-09-29
# Documentation: .husky/README.md

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running NeonPro Quality Control Checks...${NC}"
echo -e "${BLUE}üìö See .husky/README.md for troubleshooting guidance${NC}"

# 1. CRITICAL: Type Safety Check
echo -e "${YELLOW}‚ö° Checking TypeScript types...${NC}"
if ! bun run type-check; then
    echo -e "${RED}‚ùå Type check failed! Please fix TypeScript errors before committing.${NC}"
    echo -e "${BLUE}üí° Run 'bun run type-check' for detailed errors${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ TypeScript type check passed${NC}"

# 2. CRITICAL: Security & Healthcare Compliance Linting
echo -e "${YELLOW}üõ°Ô∏è Running security and healthcare compliance linting...${NC}"
if ! bun run lint:security; then
    echo -e "${RED}‚ùå Security linting failed! Please fix security issues before committing.${NC}"
    echo -e "${BLUE}üí° Run 'bun run lint:security' for detailed errors${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Security linting passed${NC}"

# 3. Code Quality & Standards Check
echo -e "${YELLOW}üîß Running code quality checks...${NC}"
if ! bun run lint; then
    echo -e "${RED}‚ùå Code quality check failed! Please fix linting errors before committing.${NC}"
    echo -e "${BLUE}üí° Run 'bun run lint:fix' to auto-fix issues${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Code quality check passed${NC}"

# 4. Format Check (auto-fixable)
echo -e "${YELLOW}üìù Checking code formatting...${NC}"
if ! bun run biome:check; then
    echo -e "${YELLOW}‚ö†Ô∏è Code formatting issues detected. Attempting auto-fix...${NC}"
    if bun run biome:fix; then
        echo -e "${GREEN}‚úÖ Code formatting auto-fixed${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è Files have been auto-formatted. Please review and re-add them to your commit.${NC}"
    else
        echo -e "${RED}‚ùå Could not auto-fix formatting issues. Please fix manually.${NC}"
        echo -e "${BLUE}üí° Run 'bun run biome:fix' for detailed errors${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Code formatting is correct${NC}"
fi

# 5. Healthcare Data Protection Check
echo -e "${YELLOW}üè• Checking LGPD and healthcare compliance...${NC}"
# Check for personal data in unsafe contexts, excluding comments
if grep -r -i -E "(cpf|rg|email|phone|patient.*data)" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=dist --exclude-dir=.husky --exclude-dir=.bun --exclude-dir=coverage . | grep -v -E "(test|spec|mock|//|/\*|\*)" | grep -E "(console\.log|localStorage|sessionStorage)" > /dev/null; then
    echo -e "${RED}‚ùå LGPD Violation: Personal data detected in unsafe contexts${NC}"
    echo -e "${BLUE}üí° Use secure storage utilities from @neonpro/security${NC}"
    echo -e "${BLUE}üìö See .husky/README.md for LGPD compliance examples${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ LGPD compliance check passed${NC}"

# 6. Accessibility Check (for modified UI files)
echo -e "${YELLOW}‚ôø Checking accessibility compliance (WCAG 2.1 AA)...${NC}"
STAGED_UI_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.(tsx|jsx)$" | grep -E "(components|ui|pages)" | head -10 || true)
if [ ! -z "$STAGED_UI_FILES" ]; then
    echo "Checking accessibility in UI files: $STAGED_UI_FILES"
    # Check for basic accessibility patterns
    for file in $STAGED_UI_FILES; do
        if [ -f "$file" ]; then
            # Check for missing alt text
            if grep -q "<img" "$file" && ! grep -q "alt=" "$file"; then
                echo -e "${RED}‚ùå Accessibility: Missing alt text in $file${NC}"
                echo -e "${BLUE}üí° Add alt attribute to all images${NC}"
                exit 1
            fi
            # Check for unlabeled form inputs
            if grep -q "<input" "$file" && ! grep -q -E "(aria-label|aria-labelledby|<label)" "$file"; then
                echo -e "${YELLOW}‚ö†Ô∏è Accessibility: Consider adding labels to inputs in $file${NC}"
            fi
        fi
    done
fi
echo -e "${GREEN}‚úÖ Accessibility check passed${NC}"

# 7. Critical Healthcare Functions Test Coverage
echo -e "${YELLOW}üß™ Checking critical healthcare function test coverage...${NC}"
CRITICAL_DIRS=("lgpd" "patient" "medical" "telemedicine" "compliance")
for dir in "${CRITICAL_DIRS[@]}"; do
    if find . -name "*.ts" -path "*/${dir}/*" -not -path "*/node_modules/*" -not -path "*/dist/*" -not -path "*/.husky/*" | while read -r file; do
        test_file="${file%.ts}.test.ts"
        spec_file="${file%.ts}.spec.ts"
        if [[ ! -f "$test_file" && ! -f "$spec_file" ]]; then
            echo -e "${YELLOW}‚ö†Ô∏è Missing Test: Critical healthcare file $file has no test coverage${NC}"
            echo -e "${BLUE}üí° Consider adding: ${test_file} or ${spec_file}${NC}"
        fi
    done | head -3; then  # Limit warnings to avoid spam
        :
    fi
done
echo -e "${GREEN}‚úÖ Test coverage check completed${NC}"

echo -e "${GREEN}üéâ All quality control checks passed! Proceeding with commit...${NC}"
echo -e "${BLUE}üìö For troubleshooting, see: .husky/README.md${NC}"
