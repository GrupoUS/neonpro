name: Compliance Audit

on:
  schedule:
    # Run compliance audits daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of compliance audit'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - healthcare
        - security
        - regulatory
      environment:
        description: 'Environment to audit'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - all

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  compliance-audit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run Full Compliance Audit
        if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == ''
        run: |
          echo "=== FULL COMPLIANCE AUDIT ==="
          pnpm test:all-compliance
          pnpm test:coverage
          
      - name: Run Healthcare Compliance Audit
        if: github.event.inputs.audit_type == 'healthcare'
        run: |
          echo "=== HEALTHCARE COMPLIANCE AUDIT ==="
          pnpm test:healthcare-compliance
          pnpm test:audit-compliance
          
      - name: Run Security Compliance Audit
        if: github.event.inputs.audit_type == 'security'
        run: |
          echo "=== SECURITY COMPLIANCE AUDIT ==="
          pnpm test:security-compliance
          pnpm lint:security
          
      - name: Run Regulatory Compliance Audit
        if: github.event.inputs.audit_type == 'regulatory'
        run: |
          echo "=== REGULATORY COMPLIANCE AUDIT ==="
          pnpm test:regulatory-compliance
          
      - name: Generate Compliance Report
        run: |
          echo "=== COMPLIANCE AUDIT REPORT ===" > compliance-audit-report.txt
          echo "Audit Type: ${{ github.event.inputs.audit_type || 'full' }}" >> compliance-audit-report.txt
          echo "Environment: ${{ github.event.inputs.environment || 'all' }}" >> compliance-audit-report.txt
          echo "Branch: ${{ github.ref }}" >> compliance-audit-report.txt
          echo "Commit: ${{ github.sha }}" >> compliance-audit-report.txt
          echo "Timestamp: $(date)" >> compliance-audit-report.txt
          echo "=================================" >> compliance-audit-report.txt
          
          # Add test results summary
          if [ -f "coverage/lcov.info" ]; then
            echo "Test Coverage Available: YES" >> compliance-audit-report.txt
          else
            echo "Test Coverage Available: NO" >> compliance-audit-report.txt
          fi
          
      - name: Upload compliance audit report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-audit-report-${{ github.run_number }}
          path: compliance-audit-report.txt
          retention-days: 90

      - name: Notify compliance team on critical issues
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#neonpro-compliance'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  security-scan:
    runs-on: ubuntu-latest
    needs: compliance-audit
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run security vulnerability scan
        run: |
          echo "=== SECURITY VULNERABILITY SCAN ==="
          # Add npm audit for vulnerabilities
          pnpm audit --audit-level moderate
          
      - name: Check for dependency vulnerabilities
        run: |
          echo "=== DEPENDENCY SECURITY CHECK ==="
          # Use npm audit to check for known vulnerabilities
          npm audit --audit-level moderate --production || echo "Security issues found - review required"
          
      - name: Generate security report
        run: |
          echo "=== SECURITY SCAN REPORT ===" > security-scan-report.txt
          echo "Scan Date: $(date)" >> security-scan-report.txt
          echo "Environment: ${{ github.event.inputs.environment || 'all' }}" >> security-scan-report.txt
          echo "Commit: ${{ github.sha }}" >> security-scan-report.txt
          echo "=================================" >> security-scan-report.txt
          
      - name: Upload security scan report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report-${{ github.run_number }}
          path: security-scan-report.txt
          retention-days: 90

  notify:
    runs-on: ubuntu-latest
    needs: [compliance-audit, security-scan]
    if: always()
    
    steps:
      - name: Generate audit summary
        run: |
          echo "=== COMPLIANCE AUDIT SUMMARY ===" > audit-summary.txt
          echo "Audit ID: ${{ github.run_number }}" >> audit-summary.txt
          echo "Type: ${{ github.event.inputs.audit_type || 'full' }}" >> audit-summary.txt
          echo "Environment: ${{ github.event.inputs.environment || 'all' }}" >> audit-summary.txt
          echo "Status: ${{ needs.compliance-audit.result == 'success' && needs.security-scan.result == 'success' && 'PASSED' || 'FAILED' }}" >> audit-summary.txt
          echo "Timestamp: $(date)" >> audit-summary.txt
          echo "=============================" >> audit-summary.txt
          
      - name: Upload audit summary
        uses: actions/upload-artifact@v4
        with:
          name: audit-summary-${{ github.run_number }}
          path: audit-summary.txt
          retention-days: 365
          
      - name: Notify compliance team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.compliance-audit.result == 'success' && needs.security-scan.result == 'success' && 'success' || 'failure' }}
          channel: '#neonpro-compliance'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}