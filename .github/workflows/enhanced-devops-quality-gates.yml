name: 🔰 Enhanced DevOps Quality Gates - Healthcare ≥9.9/10

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Run comprehensive checks daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  HEALTHCARE_STANDARD: '9.9'
  CONSTITUTIONAL_AI_MODE: 'true'
  QUALITY_THRESHOLD: '99'

jobs:
  # Phase 1: Pre-flight Quality Assessment
  pre-flight-assessment:
    name: 🔍 Pre-flight Quality Assessment
    runs-on: ubuntu-latest
    outputs:
      baseline-score: ${{ steps.baseline.outputs.score }}
      risk-level: ${{ steps.risk.outputs.level }}
      ai-governance-status: ${{ steps.ai-governance.outputs.status }}
    
    steps:
      - name: 📥 Checkout Healthcare Codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Enhanced Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🚀 Install Dependencies with Cache Optimization
        run: |
          pnpm install --frozen-lockfile
          pnpm store status

      - name: 🎯 Baseline Quality Assessment
        id: baseline
        run: |
          echo "🔍 Running baseline quality assessment..."
          SCORE=$(pnpm run quality:assess --json | jq -r '.overallScore')
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "📊 Baseline Quality Score: $SCORE/10"

      - name: ⚠️ Risk Level Assessment
        id: risk
        run: |
          echo "⚠️ Assessing healthcare risk level..."
          RISK=$(pnpm run healthcare:risk-assessment --json | jq -r '.riskLevel')
          echo "level=$RISK" >> $GITHUB_OUTPUT
          echo "🚨 Risk Level: $RISK"

      - name: 🤖 Constitutional AI Governance Check
        id: ai-governance
        run: |
          echo "🤖 Validating Constitutional AI governance..."
          STATUS=$(pnpm run ai:governance-check --json | jq -r '.status')
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "✅ AI Governance Status: $STATUS"  # Phase 2: Advanced Security & Compliance Validation
  advanced-security-compliance:
    name: 🛡️ Advanced Security & Compliance
    runs-on: ubuntu-latest
    needs: pre-flight-assessment
    if: needs.pre-flight-assessment.outputs.risk-level != 'CRITICAL'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Advanced Security Scanning
        run: |
          echo "🔒 Running advanced security scans..."
          pnpm run security:advanced-scan
          pnpm run security:dependency-check
          pnpm run security:secrets-scan

      - name: 🏥 Healthcare Compliance Validation
        run: |
          echo "🏥 Validating healthcare compliance..."
          pnpm run compliance:lgpd-validation
          pnpm run compliance:anvisa-check
          pnpm run compliance:cfm-validation
          pnpm run compliance:iso27001-audit

      - name: 🔐 Encryption & Data Protection Audit
        run: |
          echo "🔐 Auditing encryption and data protection..."
          pnpm run security:encryption-audit
          pnpm run security:data-protection-check  # Phase 3: Performance & Load Testing
  performance-validation:
    name: ⚡ Performance & Load Validation
    runs-on: ubuntu-latest
    needs: [pre-flight-assessment, advanced-security-compliance]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Application
        run: pnpm build

      - name: ⚡ Core Web Vitals Testing
        run: |
          echo "⚡ Testing Core Web Vitals..."
          pnpm run performance:web-vitals
          echo "📊 Lighthouse CI Analysis..."
          pnpm exec lighthouse-ci autorun

      - name: 📈 Load Testing
        run: |
          echo "📈 Running load tests..."
          pnpm run test:load
          pnpm run test:stress
          pnpm run test:spike

      - name: 🎯 API Performance Testing
        run: |
          echo "🎯 Testing API performance..."
          pnpm run test:api-performance
          pnpm run test:database-performance

      - name: 📊 Performance Report Generation
        run: |
          echo "📊 Generating performance reports..."
          pnpm run performance:report  # Phase 4: Comprehensive Testing & Coverage
  comprehensive-testing:
    name: 🧪 Comprehensive Testing & Coverage
    runs-on: ubuntu-latest
    needs: [performance-validation]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Unit Testing with Coverage
        run: |
          echo "🧪 Running unit tests..."
          pnpm run test:unit:coverage
          echo "📊 Coverage Threshold: ≥95%"

      - name: 🏥 Healthcare-Specific Testing
        run: |
          echo "🏥 Running healthcare compliance tests..."
          pnpm run test:healthcare
          pnpm run test:lgpd
          pnpm run test:anvisa
          pnpm run test:patient-privacy

      - name: 🎭 E2E Testing
        run: |
          echo "🎭 Running E2E tests..."
          pnpm run test:e2e
          pnpm run test:accessibility

      - name: 🔒 Security Testing
        run: |
          echo "🔒 Running security tests..."
          pnpm run test:security
          pnpm run test:penetration

      - name: 📊 Generate Coverage Reports
        run: |
          echo "📊 Generating coverage reports..."
          pnpm run test:coverage-report  # Phase 5: Final Quality Certification & Healthcare Override
  final-quality-certification:
    name: 🏆 Final Quality Certification (≥9.9/10)
    runs-on: ubuntu-latest
    needs: [comprehensive-testing]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎯 Final Quality Assessment
        id: quality-assessment
        run: |
          echo "🎯 Running final quality assessment..."
          QUALITY_SCORE=$(pnpm run quality:final-assessment --json | jq -r '.score')
          echo "📊 Final Quality Score: $QUALITY_SCORE/10"
          echo "quality_score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
          
          if [ $(echo "$QUALITY_SCORE >= 9.9" | bc) -eq 1 ]; then
            echo "✅ Healthcare Quality Standard Met: $QUALITY_SCORE/10"
            echo "healthcare_standard=PASSED" >> $GITHUB_OUTPUT
          else
            echo "❌ Healthcare Quality Standard Not Met: $QUALITY_SCORE/10 (Required: ≥9.9/10)"
            echo "healthcare_standard=FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 🏥 Healthcare Compliance Certification
        run: |
          echo "🏥 Generating healthcare compliance certification..."
          pnpm run compliance:generate-certificate
          echo "📋 LGPD Compliance: $(pnpm run compliance:lgpd-status)"
          echo "🏛️ ANVISA Compliance: $(pnpm run compliance:anvisa-status)"
          echo "🤖 Constitutional AI: $(pnpm run ai:governance-status)"

      - name: 🚀 Production Readiness Validation
        run: |
          echo "🚀 Validating production readiness..."
          pnpm run deployment:readiness-check
          echo "✅ All systems ready for deployment"

      - name: 📊 Generate Quality Report
        run: |
          echo "📊 Generating comprehensive quality report..."
          pnpm run quality:generate-report
          echo "📋 Report available in: reports/quality-assessment-$(date +%Y%m%d).html"

      - name: 🏆 Success Notification
        if: steps.quality-assessment.outputs.healthcare_standard == 'PASSED'
        run: |
          echo "🏆 SUCCESS: NEONPRO Healthcare DevOps Quality Gates PASSED"
          echo "✅ Quality Score: ${{ steps.quality-assessment.outputs.quality_score }}/10"
          echo "✅ Healthcare Standard: ≥9.9/10 ACHIEVED"
          echo "✅ Production Ready: YES"