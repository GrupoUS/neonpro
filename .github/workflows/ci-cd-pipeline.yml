name: NeonPro Healthcare CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM for security scans

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Security and Compliance Scanning
  security-scan:
    name: Security & HIPAA Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Security Audit
        run: |
          pnpm audit --prod --audit-level moderate
          pnpm dlx audit-ci --moderate

      - name: HIPAA Compliance Check
        run: |
          echo "üè• Running HIPAA compliance validation..."
          pnpm lint:security
          pnpm check:hipaa-compliance

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build and Type Checking
  build-and-validate:
    name: Build & Type Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: security-scan
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript Validation
        run: |
          echo "üîç Running TypeScript validation across all packages..."
          pnpm type-check

      - name: Build All Packages
        run: |
          echo "üèóÔ∏è Building NeonPro Healthcare Platform..."
          pnpm build

      - name: Generate Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist/
            apps/*/.next/
            packages/*/dist/
          retention-days: 7

  # Unit and Integration Testing
  test-suite:
    name: Test Suite Execution
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-validate
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup Test Database
        run: |
          echo "üóÑÔ∏è Setting up test database..."
          docker run -d --name postgres-test \
            -e POSTGRES_PASSWORD=testpass \
            -e POSTGRES_DB=neonpro_test \
            -p 5432:5432 postgres:15-alpine

      - name: Run Unit Tests (Sharded)
        run: |
          echo "üß™ Running unit tests shard ${{ matrix.shard }}/4..."
          pnpm test:unit --shard=${{ matrix.shard }}/4

      - name: Run Integration Tests
        run: |
          echo "üîó Running integration tests..."
          pnpm test:integration

      - name: Healthcare Compliance Tests
        run: |
          echo "üè• Running healthcare compliance validation..."
          pnpm test:compliance

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.shard }}
          path: |
            test-results/
            coverage/
          retention-days: 7

  # E2E Testing with Playwright
  e2e-testing:
    name: E2E Healthcare Workflow Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: test-suite
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: |
          cd apps/web
          pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup Healthcare Test Environment
        run: |
          echo "üè• Setting up healthcare test environment..."
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run Playwright E2E Tests
        run: |
          cd apps/web
          echo "üé≠ Running E2E tests on ${{ matrix.browser }}..."
          pnpm exec playwright test --project=${{ matrix.browser }}

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            apps/web/test-results/
            apps/web/playwright-report/
          retention-days: 7

  # Performance and Accessibility Testing
  performance-audit:
    name: Performance & Accessibility Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-and-validate
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run Lighthouse CI
        run: |
          echo "üö® Running Lighthouse performance audit..."
          pnpm dlx @lhci/cli@latest autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Healthcare Accessibility Compliance
        run: |
          echo "‚ôø Running WCAG 2.1 AA+ accessibility audit..."
          cd apps/web
          pnpm exec playwright test tests/e2e/accessibility-compliance.spec.ts

      - name: Bundle Size Analysis
        run: |
          echo "üì¶ Analyzing bundle sizes..."
          pnpm analyze:bundle

  # Deployment to Staging/Production
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [e2e-testing, performance-audit]
    if: github.ref == 'refs/heads/main'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}

      - name: Healthcare Compliance Post-Deploy Check
        run: |
          echo "üè• Running post-deployment healthcare compliance validation..."
          curl -f "${{ steps.deploy.outputs.url }}/api/health/hipaa-compliance"
          curl -f "${{ steps.deploy.outputs.url }}/api/health/lgpd-compliance"

  # Notification and Reporting
  notify-results:
    name: Notify Results & Generate Reports
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Generate Healthcare Compliance Report
        run: |
          echo "üìä Generating comprehensive healthcare compliance report..."
          echo "Pipeline Status: ${{ needs.deploy.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "E2E Tests: ${{ needs.e2e-testing.result }}"
          echo "Performance Audit: ${{ needs.performance-audit.result }}"

      - name: Notify Healthcare Team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#healthcare-alerts'
          text: |
            üö® NeonPro Healthcare CI/CD Pipeline Failed!
            
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            
            Critical healthcare systems may be affected.
            Immediate attention required for HIPAA compliance.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Success Notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#healthcare-deployments'
          text: |
            ‚úÖ NeonPro Healthcare Platform Successfully Deployed!
            
            üè• All healthcare compliance checks passed
            ‚ôø WCAG 2.1 AA+ accessibility validated
            üîí Security audit completed
            üé≠ Cross-browser E2E tests passed
            üìä Performance benchmarks met
            
            Deployment URL: ${{ needs.deploy.outputs.url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}