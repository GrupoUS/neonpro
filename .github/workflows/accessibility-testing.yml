name: Healthcare Accessibility Testing

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run accessibility audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - critical_only
        - telemedicine_only
        - patient_portal_only

env:
  NODE_VERSION: '20'
  HEALTHCARE_MODE: 'true'
  ACCESSIBILITY_LEVEL: 'WCAG2AA'
  AXECORE_TIMEOUT: '10000'
  CI: true

permissions:
  contents: read
  pull-requests: write
  actions: read
  checks: write

concurrency:
  group: accessibility-${{ github.ref }}
  cancel-in-progress: true

jobs:
  accessibility-setup:
    name: Setup Accessibility Testing Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      test-scope: ${{ steps.scope.outputs.scope }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-accessibility-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-accessibility-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Determine test scope
        id: scope
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "scope=${{ github.event.inputs.test_scope }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "scope=full" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "scope=full" >> $GITHUB_OUTPUT
          else
            echo "scope=critical_only" >> $GITHUB_OUTPUT
          fi

  component-discovery:
    name: Discover Healthcare Components
    runs-on: ubuntu-latest
    needs: accessibility-setup
    timeout-minutes: 5
    outputs:
      component-count: ${{ steps.discovery.outputs.count }}
      critical-components: ${{ steps.discovery.outputs.critical }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-accessibility-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Discover components
        id: discovery
        run: |
          cd apps/web
          
          # Run component discovery
          pnpm exec vitest run tests/accessibility/automated-test-runner.ts --reporter=json > discovery-results.json || true
          
          # Extract component counts
          TOTAL_COMPONENTS=$(find src/components src/routes -name "*.tsx" -not -path "*/test*" -not -path "*/__tests__/*" | wc -l)
          CRITICAL_COMPONENTS=$(find src/components/telemedicine src/components/patients src/components/accessibility -name "*.tsx" -not -path "*/test*" | wc -l)
          
          echo "count=$TOTAL_COMPONENTS" >> $GITHUB_OUTPUT
          echo "critical=$CRITICAL_COMPONENTS" >> $GITHUB_OUTPUT
          
          echo "📦 Discovered $TOTAL_COMPONENTS total components"
          echo "🚨 Found $CRITICAL_COMPONENTS critical healthcare components"

      - name: Upload discovery results
        uses: actions/upload-artifact@v4
        with:
          name: component-discovery
          path: apps/web/discovery-results.json
          if-no-files-found: warn

  accessibility-testing:
    name: Accessibility Testing (${{ matrix.category }})
    runs-on: ubuntu-latest
    needs: [accessibility-setup, component-discovery]
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        category: 
          - telemedicine
          - patient-portal
          - medical-professional
          - emergency-interfaces
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-accessibility-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install dependencies
        if: needs.accessibility-setup.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Setup virtual display for browser testing
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Run accessibility tests
        env:
          TEST_CATEGORY: ${{ matrix.category }}
          TEST_SCOPE: ${{ needs.accessibility-setup.outputs.test-scope }}
          DISPLAY: :99
        run: |
          cd apps/web
          
          echo "🧪 Testing $TEST_CATEGORY components with scope: $TEST_SCOPE"
          
          # Set category-specific test patterns
          case "$TEST_CATEGORY" in
            telemedicine)
              export TEST_PATTERN="**/telemedicine/**/*.test.ts"
              export AXECORE_RULES="healthcare,telemedicine"
              ;;
            patient-portal)
              export TEST_PATTERN="**/patients/**/*.test.ts"
              export AXECORE_RULES="healthcare,patient-data"
              ;;
            medical-professional)
              export TEST_PATTERN="**/admin/**/*.test.ts,**/professional/**/*.test.ts"
              export AXECORE_RULES="healthcare,professional"
              ;;
            emergency-interfaces)
              export TEST_PATTERN="**/emergency/**/*.test.ts"
              export AXECORE_RULES="healthcare,emergency"
              ;;
          esac
          
          # Run accessibility tests with timeout
          timeout 25m pnpm exec vitest run tests/accessibility/real-component-tests.ts \
            --reporter=json \
            --outputFile=accessibility-results-${{ matrix.category }}.json \
            --coverage.reporter=json \
            --coverage.reportsDirectory=coverage-${{ matrix.category }} || true

      - name: Parse test results
        id: results
        run: |
          cd apps/web
          
          if [[ -f "accessibility-results-${{ matrix.category }}.json" ]]; then
            VIOLATIONS=$(jq '.testResults[].assertionResults | map(select(.status == "failed")) | length' accessibility-results-${{ matrix.category }}.json 2>/dev/null || echo "0")
            PASSED=$(jq '.testResults[].assertionResults | map(select(.status == "passed")) | length' accessibility-results-${{ matrix.category }}.json 2>/dev/null || echo "0")
            
            echo "violations=$VIOLATIONS" >> $GITHUB_OUTPUT
            echo "passed=$PASSED" >> $GITHUB_OUTPUT
            
            if [[ "$VIOLATIONS" -gt "0" ]]; then
              echo "status=failed" >> $GITHUB_OUTPUT
            else
              echo "status=passed" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=error" >> $GITHUB_OUTPUT
            echo "violations=unknown" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
          fi

      - name: Generate accessibility report
        if: always()
        run: |
          cd apps/web
          
          # Generate category-specific report
          cat > accessibility-report-${{ matrix.category }}.md << EOF
          # 🏥 ${{ matrix.category }} Accessibility Report
          
          **Category:** ${{ matrix.category }}
          **Scope:** ${{ needs.accessibility-setup.outputs.test-scope }}
          **Status:** ${{ steps.results.outputs.status }}
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Results Summary
          
          - **✅ Tests Passed:** ${{ steps.results.outputs.passed }}
          - **❌ Violations Found:** ${{ steps.results.outputs.violations }}
          - **🎯 Compliance Status:** $(if [[ "${{ steps.results.outputs.status }}" == "passed" ]]; then echo "✅ WCAG 2.1 AA Compliant"; else echo "❌ Non-compliant"; fi)
          
          ## Healthcare Standards
          
          - **WCAG 2.1 AA:** $(if [[ "${{ steps.results.outputs.status }}" == "passed" ]]; then echo "✅"; else echo "❌"; fi)
          - **ANVISA Guidelines:** $(if [[ "${{ steps.results.outputs.status }}" == "passed" ]]; then echo "✅"; else echo "❌"; fi)
          - **CFM Standards:** $(if [[ "${{ steps.results.outputs.status }}" == "passed" ]]; then echo "✅"; else echo "❌"; fi)
          - **LGPD Compliance:** $(if [[ "${{ steps.results.outputs.status }}" == "passed" ]]; then echo "✅"; else echo "❌"; fi)
          
          EOF

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results-${{ matrix.category }}
          path: |
            apps/web/accessibility-results-${{ matrix.category }}.json
            apps/web/accessibility-report-${{ matrix.category }}.md
            apps/web/coverage-${{ matrix.category }}/
          if-no-files-found: warn

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const category = '${{ matrix.category }}';
            const status = '${{ steps.results.outputs.status }}';
            const violations = '${{ steps.results.outputs.violations }}';
            const passed = '${{ steps.results.outputs.passed }}';
            
            const emoji = status === 'passed' ? '✅' : '❌';
            const statusText = status === 'passed' ? 'COMPLIANT' : 'NON-COMPLIANT';
            
            const body = `
            ## ${emoji} Accessibility Test Results: ${category}
            
            **Status:** ${statusText}
            **Tests Passed:** ${passed}
            **Violations:** ${violations}
            
            ${status === 'passed' ? 
              '🎉 All accessibility tests passed for this category!' :
              '⚠️ Accessibility violations detected. Please review and fix before merging.'
            }
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  accessibility-report:
    name: Generate Comprehensive Accessibility Report
    runs-on: ubuntu-latest
    needs: [accessibility-setup, component-discovery, accessibility-testing]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate comprehensive report
        run: |
          mkdir -p reports
          
          # Collect all results
          TOTAL_VIOLATIONS=0
          TOTAL_PASSED=0
          CATEGORIES=("telemedicine" "patient-portal" "medical-professional" "emergency-interfaces")
          
          for category in "${CATEGORIES[@]}"; do
            if [[ -f "test-results/accessibility-results-$category/accessibility-results-$category.json" ]]; then
              VIOLATIONS=$(jq '.testResults[].assertionResults | map(select(.status == "failed")) | length' "test-results/accessibility-results-$category/accessibility-results-$category.json" 2>/dev/null || echo "0")
              PASSED=$(jq '.testResults[].assertionResults | map(select(.status == "passed")) | length' "test-results/accessibility-results-$category/accessibility-results-$category.json" 2>/dev/null || echo "0")
              
              TOTAL_VIOLATIONS=$((TOTAL_VIOLATIONS + VIOLATIONS))
              TOTAL_PASSED=$((TOTAL_PASSED + PASSED))
            fi
          done
          
          # Calculate compliance rate
          TOTAL_TESTS=$((TOTAL_VIOLATIONS + TOTAL_PASSED))
          if [[ $TOTAL_TESTS -gt 0 ]]; then
            COMPLIANCE_RATE=$(echo "scale=2; $TOTAL_PASSED * 100 / $TOTAL_TESTS" | bc -l)
          else
            COMPLIANCE_RATE="0"
          fi
          
          # Generate comprehensive report
          cat > reports/healthcare-accessibility-report.md << EOF
          # 🏥 NeonPro Healthcare Platform - Accessibility Compliance Report
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Scope:** ${{ needs.accessibility-setup.outputs.test-scope }}
          **Components Discovered:** ${{ needs.component-discovery.outputs.component-count }}
          **Critical Components:** ${{ needs.component-discovery.outputs.critical-components }}
          
          ## 📊 Overall Results
          
          - **Total Tests:** $TOTAL_TESTS
          - **✅ Tests Passed:** $TOTAL_PASSED
          - **❌ Violations Found:** $TOTAL_VIOLATIONS
          - **🎯 Compliance Rate:** ${COMPLIANCE_RATE}%
          
          ## 🏥 Healthcare Standards Compliance
          
          | Standard | Status |
          |----------|--------|
          | WCAG 2.1 AA | $(if [[ $TOTAL_VIOLATIONS -eq 0 ]]; then echo "✅ Compliant"; else echo "❌ Non-compliant"; fi) |
          | ANVISA RDC 657/2022 | $(if [[ $TOTAL_VIOLATIONS -eq 0 ]]; then echo "✅ Compliant"; else echo "❌ Non-compliant"; fi) |
          | CFM Resolution 2,314/2022 | $(if [[ $TOTAL_VIOLATIONS -eq 0 ]]; then echo "✅ Compliant"; else echo "❌ Non-compliant"; fi) |
          | LGPD Accessibility | $(if [[ $TOTAL_VIOLATIONS -eq 0 ]]; then echo "✅ Compliant"; else echo "❌ Non-compliant"; fi) |
          
          ## 📈 Category Breakdown
          
          EOF
          
          # Add category results
          for category in "${CATEGORIES[@]}"; do
            if [[ -f "test-results/accessibility-results-$category/accessibility-report-$category.md" ]]; then
              echo "### $category" >> reports/healthcare-accessibility-report.md
              echo "" >> reports/healthcare-accessibility-report.md
              cat "test-results/accessibility-results-$category/accessibility-report-$category.md" | tail -n +7 >> reports/healthcare-accessibility-report.md
              echo "" >> reports/healthcare-accessibility-report.md
            fi
          done
          
          # Add footer
          cat >> reports/healthcare-accessibility-report.md << EOF
          
          ---
          
          ## 🔧 Remediation Guidelines
          
          $(if [[ $TOTAL_VIOLATIONS -gt 0 ]]; then
            echo "⚠️ **Action Required:** This platform has accessibility violations that must be addressed before production deployment."
            echo ""
            echo "### Next Steps:"
            echo "1. Review detailed violation reports in individual category artifacts"
            echo "2. Prioritize critical and serious violations first"
            echo "3. Apply fixes according to WCAG 2.1 AA guidelines"
            echo "4. Re-run accessibility tests to verify compliance"
            echo "5. Ensure all healthcare-specific requirements are met"
          else
            echo "🎉 **Excellent!** Your healthcare platform meets all accessibility requirements."
            echo ""
            echo "### Maintenance:"
            echo "1. Continue running accessibility tests on each deployment"
            echo "2. Monitor for regressions in future changes"
            echo "3. Keep healthcare compliance standards up to date"
            echo "4. Regular accessibility audits recommended"
          fi)
          
          ## 📚 Resources
          
          - [WCAG 2.1 Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)
          - [ANVISA Telemedicine Guidelines](https://www.gov.br/anvisa/pt-br)
          - [CFM Digital Health Standards](https://portal.cfm.org.br/)
          - [Brazilian Digital Inclusion Law](http://www.planalto.gov.br/ccivil_03/_ato2015-2018/2015/lei/l13146.htm)
          
          *Report generated by NeonPro Automated Accessibility Testing System*
          EOF

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: healthcare-accessibility-report
          path: reports/
          if-no-files-found: warn

      - name: Set job summary
        run: |
          cat reports/healthcare-accessibility-report.md >> $GITHUB_STEP_SUMMARY

      - name: Check compliance status
        run: |
          if [[ $TOTAL_VIOLATIONS -gt 0 ]]; then
            echo "❌ Accessibility violations detected. Healthcare platform is not WCAG 2.1 AA compliant."
            exit 1
          else
            echo "✅ Healthcare platform is fully accessible and WCAG 2.1 AA compliant!"
          fi