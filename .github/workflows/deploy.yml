name: Unified Deployment Pipeline

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - preview
      target:
        description: 'Deployment target'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - packages
        - vercel
      packages:
        description: 'Specific packages to deploy (comma-separated, for packages target)'
        required: false
        default: 'types,shared,config,utils,validators,domain,ai-providers,monitoring,governance,cli-helpers'

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.22'
  NODE_OPTIONS: "--max-old-space-size=4096"
  CI: true

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  # Validate Deployment
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      packages-matrix: ${{ steps.packages.outputs.matrix }}
      should-deploy-packages: ${{ steps.deployment-check.outputs.deploy-packages }}
      should-deploy-vercel: ${{ steps.deployment-check.outputs.deploy-vercel }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Get packages matrix
      id: packages
      run: |
        CORE_PACKAGES="types,shared,config,utils,validators,domain,ai-providers,monitoring,governance,cli-helpers"
        if [ "${{ github.event.inputs.packages }}" != "" ]; then
          CORE_PACKAGES="${{ github.event.inputs.packages }}"
        fi
        echo "matrix=$CORE_PACKAGES" >> $GITHUB_OUTPUT
        
    - name: Determine deployment targets
      id: deployment-check
      run: |
        TARGET="${{ github.event.inputs.target || 'all' }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        
        DEPLOY_PACKAGES="false"
        DEPLOY_VERCEL="false"
        
        if [ "$TARGET" == "all" ] || [ "$TARGET" == "packages" ]; then
          DEPLOY_PACKAGES="true"
        fi
        
        if [ "$TARGET" == "all" ] || [ "$TARGET" == "vercel" ]; then
          DEPLOY_VERCEL="true"
        fi
        
        echo "deploy-packages=$DEPLOY_PACKAGES" >> $GITHUB_OUTPUT
        echo "deploy-vercel=$DEPLOY_VERCEL" >> $GITHUB_OUTPUT
        
    - name: Validate package structure
      if: steps.deployment-check.outputs.deploy-packages == 'true'
      run: |
        for pkg in ${{ steps.packages.outputs.matrix }}; do
          echo "Validating $pkg..."
          if [ ! -d "packages/$pkg" ]; then
            echo "‚ùå Package directory not found: packages/$pkg"
            exit 1
          fi
          if [ ! -f "packages/$pkg/package.json" ]; then
            echo "‚ùå Package.json not found: packages/$pkg/package.json"
            exit 1
          fi
        done
        echo "‚úÖ All package directories validated"

  # Build Packages
  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJson(needs.validate.outputs.packages-matrix) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build ${{ matrix.package }}
      run: |
        cd packages/${{ matrix.package }}
        bun run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.package }}-dist
        path: packages/${{ matrix.package }}/dist/
        retention-days: 30

  # Build Vercel
  build-vercel:
    name: Build Vercel Application
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy-vercel == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Build project
      run: bun run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vercel-build
        path: |
          dist/
          apps/*/dist/
        retention-days: 30

  # Test Integration
  test-integration:
    name: Test Integration
    runs-on: ubuntu-latest
    needs: [build-packages, build-vercel, validate]
    if: needs.validate.outputs.should-deploy-packages == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      
    - name: Test package resolution
      run: |
        echo "Testing package resolution..."
        cd apps/api
        node -e "
          const pkgPaths = ['../../packages/types', '../../packages/shared', '../../packages/config'];
          pkgPaths.forEach(p => {
            try {
              require.resolve(p);
              console.log('‚úì', p.split('/').pop());
            } catch(e) {
              console.log('‚úó', p.split('/').pop(), ':', e.message);
              process.exit(1);
            }
          });
          console.log('üéâ All packages resolve correctly!');
        "

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy-packages == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run security audit
      run: |
        echo "üîí Running security audit..."
        
        # Run audit on each core package
        for pkg in ${{ needs.validate.outputs.packages-matrix }}; do
          echo "Auditing $pkg..."
          cd packages/$pkg
          
          # Skip if no package.json (shouldn't happen after validation)
          if [ ! -f package.json ]; then
            echo "‚ö†Ô∏è No package.json found for $pkg"
            cd ../..
            continue
          fi
          
          # Run npm audit
          if npm audit --audit-level moderate --json > audit-result.json 2>&1; then
            echo "‚úÖ $pkg: No vulnerabilities found"
          else
            echo "‚ö†Ô∏è $pkg: Security issues found"
            cat audit-result.json | jq -r '.advisories[].severity' | sort | uniq -c || true
          fi
          
          cd ../..
        done
        
        echo "‚úÖ Security audit completed"

  # Deploy Packages Staging
  deploy-packages-staging:
    name: Deploy Packages to Staging
    runs-on: ubuntu-latest
    needs: [build-packages, test-integration, security-audit]
    if: |
      needs.validate.outputs.should-deploy-packages == 'true' && 
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      
    - name: Configure npm
      run: |
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ~/.npmrc
        echo "registry=https://registry.npmjs.org" >> ~/.npmrc
        
    - name: Deploy to staging
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        echo "üöÄ Deploying packages to staging..."
        
        # Deploy each package
        for pkg in ${{ needs.validate.outputs.packages-matrix }}; do
          echo "Deploying $pkg..."
          cd packages/$pkg
          
          if [ -f "dist/package.json" ]; then
            cd dist
            npm publish --tag staging
            cd ../..
          else
            echo "‚ö†Ô∏è No build found for $pkg"
            cd ../..
          fi
        done
        
        echo "‚úÖ Staging deployment completed"

  # Deploy Vercel Staging
  deploy-vercel-staging:
    name: Deploy Vercel to Staging
    runs-on: ubuntu-latest
    needs: build-vercel
    if: |
      needs.validate.outputs.should-deploy-vercel == 'true' && 
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: vercel-build
        
    - name: Deploy to Vercel Staging
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: .
        alias: staging

  # Deploy Packages Production
  deploy-packages-production:
    name: Deploy Packages to Production
    runs-on: ubuntu-latest
    needs: [build-packages, test-integration, security-audit]
    if: |
      needs.validate.outputs.should-deploy-packages == 'true' && 
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      
    - name: Configure npm
      run: |
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ~/.npmrc
        echo "registry=https://registry.npmjs.org" >> ~/.npmrc
        
    - name: Deploy to production
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        echo "üöÄ Deploying packages to production..."
        
        # Deploy each package
        for pkg in ${{ needs.validate.outputs.packages-matrix }}; do
          echo "Deploying $pkg..."
          cd packages/$pkg
          
          if [ -f "dist/package.json" ]; then
            cd dist
            npm publish
            cd ../..
          else
            echo "‚ö†Ô∏è No build found for $pkg"
            cd ../..
          fi
        done
        
        echo "‚úÖ Production deployment completed"

  # Deploy Vercel Production
  deploy-vercel-production:
    name: Deploy Vercel to Production
    runs-on: ubuntu-latest
    needs: build-vercel
    if: |
      needs.validate.outputs.should-deploy-vercel == 'true' && 
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: vercel-build
        
    - name: Deploy to Vercel Production
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: .

  # Notify Results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-packages-staging, deploy-vercel-staging, deploy-packages-production, deploy-vercel-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "üì¢ Deployment Status Notification"
        echo "================================"
        echo "Environment: ${{ github.event.inputs.environment || 'auto' }}"
        echo "Target: ${{ github.event.inputs.target || 'all' }}"
        echo "Packages Staging: ${{ needs.deploy-packages-staging.result }}"
        echo "Vercel Staging: ${{ needs.deploy-vercel-staging.result }}"
        echo "Packages Production: ${{ needs.deploy-packages-production.result }}"
        echo "Vercel Production: ${{ needs.deploy-vercel-production.result }}"
        echo "================================"
        echo "View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    - name: Send Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#neonpro-deploys'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}