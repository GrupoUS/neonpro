name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Security and Quality Checks
        run: pnpm quality
        
      - name: Critical Compliance Validation
        run: pnpm test:all-compliance
        
      - name: Generate Deployment Compliance Report
        run: |
          echo "=== DEPLOYMENT COMPLIANCE CHECK ===" > compliance-report.txt
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}" >> compliance-report.txt
          echo "Branch: ${{ github.ref }}" >> compliance-report.txt
          echo "Commit: ${{ github.sha }}" >> compliance-report.txt
          echo "Timestamp: $(date)" >> compliance-report.txt
          echo "=================================" >> compliance-report.txt
          
      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-compliance-report
          path: compliance-report.txt
          retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ github.event.inputs.environment == 'staging' && 'https://staging.neonpro.healthcare' || 'https://neonpro.healthcare' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build with compliance validation
        run: pnpm build
        
      - name: Deploy to Vercel
        id: vercel_deploy
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: .
          alias: ${{ github.event.inputs.environment == 'staging' && 'staging' || '' }}
          vercel-args: ${{ github.event.inputs.environment == 'production' && '--prod' || '' }}
          
      - name: Post-deployment compliance health check
        run: |
          echo "Performing compliance health check..."
          sleep 15 # Allow time for deployment to be ready
          
          # Basic health check
          curl -f "${{ steps.vercel_deploy.outputs.url }}/health" || exit 1
          
          # Compliance endpoints check
          curl -f "${{ steps.vercel_deploy.outputs.url }}/api/compliance/health" || echo "Compliance endpoint not available (non-critical)"
          
          # Security headers check
          curl -I "${{ steps.vercel_deploy.outputs.url }}" | grep -E "X-Content-Type-Options|X-Frame-Options|X-XSS-Protection" || echo "Security headers warning"
          
      - name: Generate deployment certificate
        run: |
          echo "=== DEPLOYMENT CERTIFICATE ===" > deployment-certificate.txt
          echo "Deployment ID: ${{ github.run_number }}-${{ github.run_attempt }}" >> deployment-certificate.txt
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}" >> deployment-certificate.txt
          echo "URL: ${{ steps.vercel_deploy.outputs.url }}" >> deployment-certificate.txt
          echo "Deployed by: ${{ github.actor }}" >> deployment-certificate.txt
          echo "Compliance Status: PASSED" >> deployment-certificate.txt
          echo "Timestamp: $(date)" >> deployment-certificate.txt
          echo "=============================" >> deployment-certificate.txt
          
      - name: Upload deployment certificate
        uses: actions/upload-artifact@v4
        with:
          name: deployment-certificate
          path: deployment-certificate.txt
          retention-days: 365

      - name: Notify on Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#neonpro-deploys'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}