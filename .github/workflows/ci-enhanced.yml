name: Enhanced CI/CD Pipeline - 8-Package Architecture

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
        - production
        - staging
        - development
      build-only:
        description: 'Run build only (skip tests)'
        required: false
        default: false
        type: boolean
      deploy:
        description: 'Deploy after successful build'
        required: false
        default: false
        type: boolean

env:
  NODE_OPTIONS: "--max-old-space-size=4096"
  CI: true
  TURBO_CACHE: true
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_API: ${{ secrets.TURBO_API }}

permissions:
  contents: read
  pull-requests: write
  actions: read
  id-token: write

concurrency:
  group: ci-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Health check
        run: pnpm run build-system health

  # Build Matrix
  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    needs: health-check
    strategy:
      matrix:
        target:
          - name: Core Foundation
            packages: '@neonpro/types,@neonpro/shared'
            command: build
          - name: Service Layer
            packages: '@neonpro/database,@neonpro/ai-services'
            command: build
          - name: Business Logic
            packages: '@neonpro/healthcare-core,@neonpro/security-compliance'
            command: build
          - name: Gateway & UI
            packages: '@neonpro/api-gateway,@neonpro/ui'
            command: build
          - name: Applications
            packages: '@neonpro/api,@neonpro/web'
            command: build
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.health-check.outputs.cache-key }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build ${{ matrix.target.name }}
        run: pnpm run build-system build:packages --filter=${{ matrix.target.packages }}
        
      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target.name }}
          path: |
            dist/
            .turbo/
          retention-days: 7

  # Type Check
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.health-check.outputs.cache-key }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run type checking
        run: pnpm run build-system type-check
        
      - name: Upload type check results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: type-check-results
          path: |
            **/tsconfig.tsbuildinfo
            **/*.log
          retention-days: 3

  # Linting & Code Quality
  quality-check:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.health-check.outputs.cache-key }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run linting
        run: pnpm run lint:oxlint
        
      - name: Run formatting check
        run: pnpm run format:dprint
        
      - name: Security scan
        run: pnpm run security:scan
        
      - name: Upload quality reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            oxlint-*.json
            security-report.json
          retention-days: 7

  # Testing
  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    needs: [build-matrix, health-check]
    if: github.event.inputs.build-only != 'true'
    strategy:
      matrix:
        target:
          - name: Unit Tests
            packages: '@neonpro/types,@neonpro/shared'
            command: test:unit
          - name: Integration Tests
            packages: '@neonpro/database,@neonpro/api-gateway'
            command: test:integration
          - name: E2E Tests
            packages: '@neonpro/web'
            command: test:e2e
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.health-check.outputs.cache-key }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.target.name }}
          
      - name: Run ${{ matrix.target.name }}
        run: pnpm run build-system ${{ matrix.target.command }} --filter=${{ matrix.target.packages }}
        
      - name: Upload coverage reports
        if: matrix.target.command == 'test:unit'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-${{ matrix.target.name }}
          path: |
            coverage/
            test-results/
            playwright-report/
          retention-days: 7

  # Performance Analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.health-check.outputs.cache-key }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          
      - name: Run performance analysis
        run: pnpm run build-system build:analyze
        
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            *.stats.json
            bundle-analysis*.html
          retention-days: 30

  # Production Build
  production-build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [build-matrix, type-check, quality-check, test-matrix]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.health-check.outputs.cache-key }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Create production build
        run: pnpm run build-system build:production
        
      - name: Create deployment package
        run: pnpm run build-system package production
        
      - name: Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            dist/
            *.tar.gz
          retention-days: 30

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deployment
  deployment:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [production-build, performance-analysis, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Download production artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          
      - name: Deploy to Vercel
        uses: vercel/actions@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_SCOPE }}
          working-directory: ./dist
          alias: ${{ github.event.inputs.environment == 'production' && 'www' || 'staging' }}

  # Notify
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-matrix, type-check, quality-check, test-matrix, performance-analysis]
    if: always()
    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#neonpro-builds'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}