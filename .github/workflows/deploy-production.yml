name: Deploy Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  deploy-database:
    name: Deploy Database
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Setup Supabase CLI
      run: |
        curl -fsSL https://packages.supabase.com/api/installer.sh | bash
        
    - name: Deploy database changes
      run: |
        supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
        supabase db push
        bun run db:types
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        
    - name: Commit generated types
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add packages/database/src/types/supabase-generated.ts
        if ! git diff --staged --quiet; then
          git commit -m "chore: update database types [skip ci]"
          git push
        fi

  build-and-deploy:
    name: Build and Deploy Applications
    runs-on: ubuntu-latest
    needs: deploy-database
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run compliance tests
      run: bun run test:compliance
      env:
        LGPD_COMPLIANCE: true
        DATA_RESIDENCY: brazil
        
    - name: Run security tests
      run: bun run test:security
      
    - name: Build applications
      run: bun run build:vercel
      env:
        VERCEL_ENV: production
        TURBO_REMOTE_CACHE_SIGNATURE: ${{ secrets.TURBO_REMOTE_CACHE_SIGNATURE }}
        
    - name: Deploy to Vercel
      run: bunx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ENV: production
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        
    - name: Run post-deployment tests
      run: bun run test:health
      env:
        VERCEL_ENV: production
        LGPD_COMPLIANCE: true
        DATA_RESIDENCY: brazil

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-database, build-and-deploy]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-database.result == 'success' && needs.build-and-deploy.result == 'success'
      run: |
        echo "‚úÖ Production deployment completed successfully!"
        echo "üöÄ Database: Deployed"
        echo "üöÄ Applications: Deployed to Vercel"
        echo "üîó https://neonpro.vercel.app"
        
    - name: Notify failure
      if: needs.deploy-database.result == 'failure' || needs.build-and-deploy.result == 'failure'
      run: |
        echo "‚ùå Production deployment failed!"
        echo "üîç Database: ${{ needs.deploy-database.result }}"
        echo "üîç Applications: ${{ needs.build-and-deploy.result }}"
        echo "üö® Check the logs above for details"