name: Deploy Core Packages

on:
  push:
    branches: [main, chore/oxlint-fixes-apps-tdd]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      packages:
        description: 'Packages to deploy (comma-separated)'
        required: false
        default: 'types,shared,config,utils,validators,domain,ai-providers,monitoring,governance,cli-helpers'

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.22'

jobs:
  validate:
    name: Validate Packages
    runs-on: ubuntu-latest
    outputs:
      packages-matrix: ${{ steps.packages.outputs.matrix }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Get packages matrix
      id: packages
      run: |
        CORE_PACKAGES="types,shared,config,utils,validators,domain,ai-providers,monitoring,governance,cli-helpers"
        echo "matrix=$CORE_PACKAGES" >> $GITHUB_OUTPUT
        
    - name: Validate package structure
      run: |
        for pkg in ${{ steps.packages.outputs.matrix }}; do
          echo "Validating $pkg..."
          if [ ! -d "packages/$pkg" ]; then
            echo "❌ Package directory not found: packages/$pkg"
            exit 1
          fi
          if [ ! -f "packages/$pkg/package.json" ]; then
            echo "❌ Package.json not found: packages/$pkg/package.json"
            exit 1
          fi
        done
        echo "✅ All package directories validated"

  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        package: ${{ fromJson(needs.validate.outputs.packages-matrix) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build ${{ matrix.package }}
      run: |
        cd packages/${{ matrix.package }}
        bun run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.package }}-dist
        path: packages/${{ matrix.package }}/dist/
        retention-days: 30

  test:
    name: Test Integration
    runs-on: ubuntu-latest
    needs: [validate, build]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      
    - name: Test package resolution
      run: |
        echo "Testing package resolution..."
        cd apps/api
        node -e "
          const pkgPaths = ['../../packages/types', '../../packages/shared', '../../packages/config'];
          pkgPaths.forEach(p => {
            try {
              require.resolve(p);
              console.log('✓', p.split('/').pop());
            } catch(e) {
              console.log('✗', p.split('/').pop(), ':', e.message);
              process.exit(1);
            }
          });
          console.log('🎉 All packages resolve correctly!');
        "

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        
        # Run audit on each core package
        for pkg in types shared config utils validators domain ai-providers monitoring governance cli-helpers; do
          echo "Auditing $pkg..."
          cd packages/$pkg
          
          # Skip if no package.json (shouldn't happen after validation)
          if [ ! -f package.json ]; then
            echo "⚠️ No package.json found for $pkg"
            cd ../..
            continue
          fi
          
          # Run npm audit
          if npm audit --audit-level moderate --json > audit-result.json 2>&1; then
            echo "✅ $pkg: No vulnerabilities found"
          else
            echo "⚠️ $pkg: Security issues found"
            cat audit-result.json | jq -r '.advisories[].severity' | sort | uniq -c || true
          fi
          
          cd ../..
        done
        
        echo "✅ Security audit completed"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test, security-audit]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      
    - name: Configure npm
      run: |
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ~/.npmrc
        echo "registry=https://registry.npmjs.org" >> ~/.npmrc
        
    - name: Deploy to staging
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        echo "🚀 Deploying to staging..."
        
        # Make deployment script executable
        chmod +x scripts/deploy-core-packages.sh
        
        # Run deployment
        ./scripts/deploy-core-packages.sh deploy staging
        
        echo "✅ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, security-audit]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      
    - name: Configure npm
      run: |
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ~/.npmrc
        echo "registry=https://registry.npmjs.org" >> ~/.npmrc
        
    - name: Deploy to production
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        echo "🚀 Deploying to production..."
        
        # Make deployment script executable
        chmod +x scripts/deploy-core-packages.sh
        
        # Run deployment
        ./scripts/deploy-core-packages.sh deploy production
        
        echo "✅ Production deployment completed"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "📢 Deployment Status Notification"
        echo "================================"
        echo "Staging: ${{ needs.deploy-staging.result }}"
        echo "Production: ${{ needs.deploy-production.result }}"
        echo "================================"
        echo "View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"