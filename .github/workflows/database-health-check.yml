name: Database Health Check

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
  
jobs:
  health-check:
    name: Database Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'bun'
        
    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run database health check
      run: bunx tsx -e "
      import { createClient } from '@supabase/supabase-js';
      
      const supabase = createClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL,
        process.env.SUPABASE_SERVICE_KEY
      );
      
      async function healthCheck() {
        try {
          // Test basic connectivity
          const { data, error } = await supabase
            .from('clinics')
            .select('count', { count: 'exact', head: true })
            .limit(1);
            
          if (error) {
            console.error('❌ Database health check failed:', error.message);
            process.exit(1);
          }
          
          // Test auth service
          const { data: authData, error: authError } = await supabase.auth.getUser();
          
          // Test specific tables
          const tables = ['users', 'appointments', 'profiles', 'service_types'];
          for (const table of tables) {
            const { error: tableError } = await supabase
              .from(table)
              .select('count', { count: 'exact', head: true })
              .limit(1);
              
            if (tableError) {
              console.error(\`❌ Table \${table} check failed:\`, tableError.message);
              process.exit(1);
            }
          }
          
          console.log('✅ Database health check passed');
          console.log(\`📊 Connected to: \${process.env.NEXT_PUBLIC_SUPABASE_URL}\`);
          console.log(\`🏥 Clinics count: \${data.count}\`);
          
        } catch (error) {
          console.error('❌ Health check error:', error.message);
          process.exit(1);
        }
      }
      
      healthCheck();
      "
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        
    - name: Check for slow queries
      run: |
        bunx tsx -e "
        import { createClient } from '@supabase/supabase-js';
        
        const supabase = createClient(
          process.env.NEXT_PUBLIC_SUPABASE_URL,
          process.env.SUPABASE_SERVICE_KEY
        );
        
        // This would typically query pg_stat_activity
        // For now, we'll do a basic performance test
        const start = Date.now();
        const { data, error } = await supabase
          .from('appointments')
          .select('id')
          .limit(100);
          
        const duration = Date.now() - start;
        
        if (duration > 5000) {
          console.error(\`⚠️ Slow query detected: \${duration}ms\`);
          process.exit(1);
        }
        
        console.log(\`⚡ Query performance: \${duration}ms\");
        "
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        
    - name: Check database size
      run: |
        bunx tsx -e "
        import { createClient } from '@supabase/supabase-js';
        
        const supabase = createClient(
          process.env.NEXT_PUBLIC_SUPABASE_URL,
          process.env.SUPABASE_SERVICE_KEY
        );
        
        const { data, error } = await supabase.rpc('get_database_size');
        
        if (error) {
          console.log('📊 Database size check not available (function not implemented)');
        } else {
          console.log(\`📊 Database size: \${data} MB\`);
        }
        "
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        
    - name: Generate health report
      run: |
        echo "# Database Health Report" > health-report.md
        echo "Generated: $(date)" >> health-report.md
        echo "" >> health-report.md
        echo "## Status" >> health-report.md
        echo "✅ All health checks passed" >> health-report.md
        echo "" >> health-report.md
        echo "## Metrics" >> health-report.md
        echo "- Connectivity: OK" >> health-report.md
        echo "- Auth Service: OK" >> health-report.md
        echo "- Core Tables: OK" >> health-report.md
        echo "- Query Performance: OK" >> health-report.md
        echo "" >> health-report.md
        echo "## Environment" >> health-report.md
        echo "- Database: Production" >> health-report.md
        echo "- URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> health-report.md
        echo "" >> health-report.md
        echo "*Report generated automatically*" >> health-report.md
        
    - name: Upload health report
      uses: actions/upload-artifact@v3
      with:
        name: health-report
        path: health-report.md
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Database health check failed!"
        echo "🚨 Immediate attention required"