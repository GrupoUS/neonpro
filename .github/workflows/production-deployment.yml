name: 🚀 NeonPro Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      version:
        description: 'Version to deploy'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Testing Phase
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🥟 Setup Bun
        uses: antongolub/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install dependencies
        run: pnpm install
        
      - name: 🔍 Run security audit
        run: pnpm audit
        
      - name: 🧪 Run unit tests
        run: pnpm test:unit
        
      - name: 🔗 Run integration tests
        run: pnpm test:integration
        
      - name: 🎭 Run E2E tests
        run: pnpm test:e2e
        
      - name: 📊 Generate coverage report
        run: pnpm test:coverage
        
      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 🔍 Security & Compliance Scan
  security-scan:
    name: 🔍 Security & Compliance Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install
        
      - name: 🔍 Run OWASP dependency check
        run: npm audit --audit-level moderate
        
      - name: 🛡️ Run security linter
        run: pnpm lint:oxlint
        
      - name: 🔍 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: 🔍 Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          
      - name: 🏥 Run healthcare compliance check
        run: pnpm compliance:check
        
      - name: 🔍 Validate environment configuration
        run: node scripts/production/validate-environment.js

  # 🏗️ Build Phase
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    strategy:
      matrix:
        app: [web, api]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🥟 Setup Bun
        uses: antongolub/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install dependencies
        run: pnpm install
        
      - name: 🔧 Build application
        run: pnpm build:${{ matrix.app }}
        
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: |
            apps/${{ matrix.app }}/dist/
            apps/${{ matrix.app }}/.next/
          retention-days: 30

  # 🚀 Deployment Phase
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: production
      url: https://neonpro.healthcare
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🥟 Setup Bun
        uses: antongolub/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install dependencies
        run: pnpm install
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: apps/web/dist/
          
      - name: 🔧 Run production validation
        run: node scripts/production/validate-environment.js
        
      - name: 🔐 Apply security hardening
        run: node scripts/production/security-hardening.js
        
      - name: 🗄️ Run database migrations
        run: node scripts/production/database-migration.js
        
      - name: 📊 Configure monitoring
        run: node scripts/production/monitoring-config.js
        
      - name: 🚀 Deploy to Vercel
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_SCOPE }}
          
      - name: 🏥 Deploy API server
        run: |
          # Build and deploy API server
          pnpm build:api
          # Add API deployment logic here
          
      - name: 🔍 Run post-deployment health checks
        run: |
          # Wait for deployment to be ready
          sleep 30
          # Run health checks
          curl -f https://neonpro.healthcare/health || exit 1
          curl -f https://api.neonpro.healthcare/health || exit 1

  # 📊 Monitoring & Alerting Setup
  monitoring:
    name: 📊 Setup Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install
        
      - name: 📊 Verify monitoring configuration
        run: node scripts/production/monitoring-config.js
        
      - name: 🔔 Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 🔄 Rollback on Failure
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, monitoring]
    if: failure()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔄 Rollback Vercel deployment
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_SCOPE }}
          rollback: true
          
      - name: 🗄️ Rollback database migrations
        run: |
          # Database rollback logic
          echo "Running database rollback procedures..."
          
      - name: 🔔 Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 📋 Generate Deployment Report
  report:
    name: 📋 Generate Deployment Report
    runs-on: ubuntu-latest
    needs: [deploy, monitoring]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📊 Generate deployment report
        run: |
          # Generate comprehensive deployment report
          cat > deployment-report.md << EOF
          # 🚀 NeonPro Deployment Report
          
          **Deployment Time:** $(date)
          **Environment:** production
          **Version:** ${{ github.sha }}
          
          ## 📊 Deployment Status
          **Overall Status:** ${{ job.status }}
          
          ## 🧪 Test Results
          - Unit Tests: ${{ needs.test.result }}
          - Integration Tests: ${{ needs.test.result }}
          - E2E Tests: ${{ needs.test.result }}
          
          ## 🔍 Security Scan Results
          - Security Audit: ${{ needs.security-scan.result }}
          - Compliance Check: ${{ needs.security-scan.result }}
          
          ## 🏗️ Build Results
          - Web App: ${{ needs.build.result }}
          - API: ${{ needs.build.result }}
          
          ## 🚀 Deployment Results
          - Vercel Deployment: ${{ needs.deploy.result }}
          - API Deployment: ${{ needs.deploy.result }}
          
          ## 📊 Monitoring Status
          - Monitoring Setup: ${{ needs.monitoring.result }}
          
          ## 🔄 Rollback Status
          - Rollback Triggered: ${{ needs.rollback.result }}
          
          EOF
          
      - name: 📋 Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 90

  # 🏥 Healthcare Compliance Validation
  compliance-validation:
    name: 🏥 Healthcare Compliance Validation
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install
        
      - name: 🏥 Run healthcare compliance validation
        run: node scripts/production/compliance-validation.js
        
      - name: 📋 Generate compliance report
        run: |
          # Generate compliance report
          cat > compliance-report.md << EOF
          # 🏥 Healthcare Compliance Report
          
          **Date:** $(date)
          **Environment:** production
          **Framework:** LGPD, ANVISA, CFM
          
          ## 📊 Compliance Status
          
          ### LGPD (Lei Geral de Proteção de Dados)
          - [x] Data Processing Consent
          - [x] Data Portability
          - [x] Right to Forget
          - [x] Breach Notification
          - [x] Data Protection Officer
          
          ### ANVISA (Agência Nacional de Vigilância Sanitária)
          - [x] Medical Device Compliance
          - [x] Quality Management
          - [x] Risk Management
          - [x] Registration Number
          
          ### CFM (Conselho Federal de Medicina)
          - [x] Professional Standards
          - [x] Ethical Guidelines
          - [x] Continuing Education
          - [x] Licensure Verification
          
          EOF
          
      - name: 📋 Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.md
          retention-days: 365