name: Aesthetic Clinic Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/neonpro_test'

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Run unit tests
      run: |
        bun test:unit
      working-directory: apps/api

    - name: Run client unit tests
      run: |
        bun test:unit
      working-directory: apps/web

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-unit
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Setup database
      run: |
        bun prisma migrate dev
        bun prisma db seed
      working-directory: packages/database
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run integration tests
      run: |
        bun test:integration
      working-directory: apps/api
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run client integration tests
      run: |
        bun test:integration
      working-directory: apps/web
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test-integration
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Setup database
      run: |
        bun prisma migrate dev
        bun prisma db seed
      working-directory: packages/database
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Build applications
      run: |
        bun build
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Start services
      run: |
        bun run dev &
        sleep 10
      working-directory: apps/api
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run E2E tests
      run: |
        bun test:e2e
      working-directory: apps/web
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-integration
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Setup database
      run: |
        bun prisma migrate dev
        bun prisma db seed
      working-directory: packages/database
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run performance tests
      run: |
        bun test:performance
      working-directory: apps/web
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Generate performance report
      run: |
        bun run perf:report
      working-directory: apps/web
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Upload performance artifacts
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: apps/web/performance-report/

  test-security:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: test-unit
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Run security tests
      run: |
        bun test:security
      working-directory: apps/api

    - name: Run security linting
      run: |
        bun run security:lint
      working-directory: apps/api

    - name: Run OWASP dependency check
      run: |
        bun audit
      working-directory: apps/api

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan
        path: security-scan-results/

  test-compliance:
    name: Compliance Tests
    runs-on: ubuntu-latest
    needs: test-integration
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Run LGPD compliance tests
      run: |
        bun test:compliance
      working-directory: apps/api

    - name: Run ANVISA compliance tests
      run: |
        bun test:anvisa
      working-directory: apps/api

    - name: Run CFM compliance tests
      run: |
        bun test:cfm
      working-directory: apps/api

    - name: Generate compliance report
      run: |
        bun run compliance:report
      working-directory: apps/api

    - name: Upload compliance artifacts
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report/

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: test-e2e
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Setup database
      run: |
        bun prisma migrate dev
        bun prisma db seed
      working-directory: packages/database
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Build and deploy test environment
      run: |
        bun build
        bun run deploy:test
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run load tests
      run: |
        bun test:load
      working-directory: apps/web
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        LOAD_TEST_URL: http://localhost:3000

    - name: Generate load test report
      run: |
        bun run load:report
      working-directory: apps/web

    - name: Upload load test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: load-test-report
        path: load-test-report/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-e2e, test-performance, test-security, test-compliance]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Build for production
      run: |
        bun build:production
      env:
        NODE_ENV: production

    - name: Deploy to staging
      run: |
        bun run deploy:staging
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-e2e, test-performance, test-security, test-compliance, load-testing]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'bun'

    - name: Install dependencies
      run: |
        bun install --frozen-lockfile

    - name: Build for production
      run: |
        bun build:production
      env:
        NODE_ENV: production

    - name: Deploy to production
      run: |
        bun run deploy:production
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: Run production smoke tests
      run: |
        bun test:smoke
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify test results
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#dev-notifications'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}