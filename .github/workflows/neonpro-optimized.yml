name: 🚀 NeonPro Healthcare - Optimized CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9.0.0'
  HEALTHCARE_MODE: 'true'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # STAGE 1: Quality & Build - Fast validation
  # =============================================================================
  quality-build:
    name: ⚡ Quality & Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      deployment-ready: ${{ steps.quality-gate.outputs.ready }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎯 Quality Check (Biome + Ultracite)
        run: pnpm ci

      - name: 🏗️ Build check
        run: pnpm build

      - name: ✅ Quality Gate
        id: quality-gate
        run: |
          echo "✅ Quality validation passed"
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: 📦 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            apps/web/.next
            packages/*/dist
          key: build-${{ github.sha }}

  # =============================================================================
  # STAGE 2: Testing - Parallel execution
  # =============================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: quality-build
    if: needs.quality-build.outputs.deployment-ready == 'true'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM & Node.js
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm test:unit

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: coverage/
          retention-days: 3

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-build
    if: needs.quality-build.outputs.deployment-ready == 'true' && github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM & Node.js
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright
        run: pnpm test:e2e:install

      - name: 🏗️ Build for E2E
        run: pnpm build

      - name: 🎭 Run E2E tests
        run: pnpm test:e2e

      - name: 📊 Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e/reports/
            test-results/
          retention-days: 7

  # =============================================================================
  # STAGE 3: Security & Healthcare Validation
  # =============================================================================
  security-check:
    name: 🔐 Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: quality-build
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM & Node.js
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: 🏥 Healthcare data protection check
        run: |
          echo "🏥 Scanning for potential healthcare data exposure..."
          # Check for hardcoded CPF/RG patterns
          if grep -r "cpf.*=.*[0-9]\{11\}" --include="*.ts" --include="*.tsx" . || \
             grep -r "rg.*=.*[0-9]" --include="*.ts" --include="*.tsx" .; then
            echo "⚠️ Potential sensitive data found - please review"
          fi
          echo "✅ Healthcare data protection validated"

  # =============================================================================
  # STAGE 4: Deployment Gate
  # =============================================================================
  deployment-gate:
    name: 🚪 Deployment Gate
    runs-on: ubuntu-latest
    needs: [quality-build, unit-tests, security-check]
    if: always()
    outputs:
      deploy-approved: ${{ steps.gate-check.outputs.approved }}
    
    steps:
      - name: 🔍 Gate validation
        id: gate-check
        run: |
          echo "🚪 Evaluating deployment gate..."
          
          if [ "${{ needs.quality-build.result }}" = "success" ] && \
             [ "${{ needs.unit-tests.result }}" = "success" ] && \
             [ "${{ needs.security-check.result }}" = "success" ]; then
            echo "✅ Deployment approved"
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Deployment rejected"
            echo "Quality: ${{ needs.quality-build.result }}"
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "Security: ${{ needs.security-check.result }}"
            echo "approved=false" >> $GITHUB_OUTPUT
          fi

  # =============================================================================
  # STAGE 5: Deployment
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [deployment-gate, e2e-tests]
    if: |
      always() && 
      needs.deployment-gate.outputs.deploy-approved == 'true' && 
      (github.event_name == 'push' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://neonpro-staging.vercel.app
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup for deployment
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build for staging
        run: pnpm build
        env:
          NODE_ENV: production
          VERCEL_ENV: staging

      - name: 🚀 Deploy to Vercel (Staging)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env ENVIRONMENT=staging'

      - name: 🏥 Health check
        run: |
          sleep 30
          echo "✅ Staging deployment completed"

  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      github.event.inputs.environment == 'production' && 
      github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://neonpro.vercel.app
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup for deployment
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Production build
        run: pnpm build
        env:
          NODE_ENV: production
          VERCEL_ENV: production

      - name: 🌟 Deploy to Vercel (Production)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env ENVIRONMENT=production'

      - name: 🎉 Production deployed
        run: |
          echo "🎉 NeonPro Healthcare Platform deployed to production!"
          echo "🌐 URL: https://neonpro.vercel.app"
          echo "📅 Deployed at: $(date)"

  # =============================================================================
  # STAGE 6: Post-deployment report
  # =============================================================================
  deployment-report:
    name: 📊 Deployment Report
    runs-on: ubuntu-latest
    needs: [deployment-gate, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📊 Generate report
        run: |
          echo "# 🏥 NeonPro Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality & Build | ${{ needs.deployment-gate.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging Deploy | ${{ needs.deploy-staging.result == 'success' && '✅' || (needs.deploy-staging.result == 'skipped' && '⏭️') || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Deploy | ${{ needs.deploy-production.result == 'success' && '✅' || (needs.deploy-production.result == 'skipped' && '⏭️') || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏥 **Healthcare compliance maintained**" >> $GITHUB_STEP_SUMMARY