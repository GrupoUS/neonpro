name: 🔍 PR Validation - Code Quality & Fast Testing

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

# Prevent multiple concurrent runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  # ==================================================================
  # PR METADATA & SAFETY CHECK
  # ==================================================================
  pr-safety-check:
    name: 🛡️ PR Safety Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      safe-to-test: ${{ steps.safety.outputs.safe }}
      changed-files: ${{ steps.changes.outputs.files }}
    
    steps:
      - name: 📥 Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 🔍 Safety Validation
        id: safety
        run: |
          echo "🛡️ Validating PR safety..."
          
          # Check for package.json changes that could be malicious
          if git diff --name-only origin/main..HEAD | grep -E "(package\.json|pnpm-lock\.yaml)"; then
            echo "⚠️ Package files modified - manual review required"
            echo "🔍 Dependency changes detected"
          fi
          
          # Check for workflow changes
          if git diff --name-only origin/main..HEAD | grep -E "\.github/workflows/"; then
            echo "⚠️ Workflow files modified - manual review required"
          fi
          
          echo "safe=true" >> $GITHUB_OUTPUT
          echo "✅ PR safety check passed"

      - name: 📋 Detect Changed Files
        id: changes
        run: |
          echo "📋 Detecting changed files..."
          CHANGED_FILES=$(git diff --name-only origin/main..HEAD | tr '\n' ' ')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "Changed files: $CHANGED_FILES"

  # ==================================================================
  # FAST QUALITY VALIDATION
  # ==================================================================
  fast-quality-check:
    name: ⚡ Fast Quality Check
    runs-on: ubuntu-latest
    needs: pr-safety-check
    if: needs.pr-safety-check.outputs.safe-to-test == 'true'
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎯 Format Check (Biome + Ultracite)
        run: |
          echo "🎯 Running Format Check with Biome + Ultracite..."
          pnpm exec biome format --check .
          echo "✅ Format check completed"

      - name: 🔍 Lint Check (Biome + Ultracite)
        run: |
          echo "🔍 Running Lint Check with Biome + Ultracite..."
          pnpm exec biome lint .
          echo "✅ Lint check completed"

      - name: 🔧 TypeScript Check
        run: |
          echo "🔧 Running TypeScript validation..."
          pnpm type-check
          echo "✅ TypeScript check completed"

      - name: 📊 Quality Summary
        run: |
          echo "## ⚡ Fast Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Format**: Biome + Ultracite validation passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Lint**: No linting errors found" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **TypeScript**: Type validation successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **PR ready for further validation!**" >> $GITHUB_STEP_SUMMARY

  # ==================================================================
  # FOCUSED TESTING (Related to Changes)
  # ==================================================================
  focused-testing:
    name: 🎯 Focused Testing
    runs-on: ubuntu-latest
    needs: [pr-safety-check, fast-quality-check]
    if: needs.fast-quality-check.result == 'success'
    
    strategy:
      matrix:
        test-suite: [unit-related, build-test]
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Related Unit Tests (Vitest)
        if: matrix.test-suite == 'unit-related'
        run: |
          echo "🧪 Running tests related to PR changes..."
          echo "Changed files: ${{ needs.pr-safety-check.outputs.changed-files }}"
          
          # Run tests with coverage for changed files
          if echo "${{ needs.pr-safety-check.outputs.changed-files }}" | grep -E "\.(ts|tsx|js|jsx)$"; then
            echo "🎯 Running focused unit tests..."
            pnpm test:unit --reporter=verbose
          else
            echo "ℹ️ No test-relevant files changed"
          fi
          echo "✅ Unit tests completed"

      - name: 🏗️ Build Validation
        if: matrix.test-suite == 'build-test'
        run: |
          echo "🏗️ Validating build with PR changes..."
          pnpm build
          echo "✅ Build validation completed"

      - name: 📊 Upload Test Results
        if: matrix.test-suite == 'unit-related'
        uses: actions/upload-artifact@v4
        with:
          name: pr-test-results
          path: |
            tools/testing/coverage/
            test-results/
          retention-days: 7

  # ==================================================================
  # PR SIZE & COMPLEXITY ANALYSIS
  # ==================================================================
  pr-analysis:
    name: 📊 PR Analysis
    runs-on: ubuntu-latest
    needs: pr-safety-check
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 📊 PR Size Analysis
        run: |
          echo "📊 Analyzing PR size and complexity..."
          
          # Count changed lines
          ADDED_LINES=$(git diff --numstat origin/main..HEAD | awk '{sum += $1} END {print sum}')
          DELETED_LINES=$(git diff --numstat origin/main..HEAD | awk '{sum += $2} END {print sum}')
          CHANGED_FILES=$(git diff --name-only origin/main..HEAD | wc -l)
          
          echo "📈 Added lines: $ADDED_LINES"
          echo "📉 Deleted lines: $DELETED_LINES"
          echo "📁 Changed files: $CHANGED_FILES"
          
          # Determine PR size
          TOTAL_CHANGES=$((ADDED_LINES + DELETED_LINES))
          if [ $TOTAL_CHANGES -lt 100 ]; then
            SIZE="🟢 Small"
            COMPLEXITY="Low"
          elif [ $TOTAL_CHANGES -lt 500 ]; then
            SIZE="🟡 Medium"
            COMPLEXITY="Moderate"
          elif [ $TOTAL_CHANGES -lt 1000 ]; then
            SIZE="🟠 Large"
            COMPLEXITY="High"
          else
            SIZE="🔴 Extra Large"
            COMPLEXITY="Very High"
          fi
          
          echo "size=$SIZE" >> $GITHUB_ENV
          echo "complexity=$COMPLEXITY" >> $GITHUB_ENV

      - name: 🔍 Healthcare Compliance Check
        run: |
          echo "🏥 Checking healthcare compliance for PR changes..."
          
          # Check for potential LGPD/healthcare data handling
          if git diff origin/main..HEAD | grep -i "cpf\|rg\|patient\|medical"; then
            echo "🏥 Healthcare data handling detected - ensure compliance"
            echo "healthcare_data=true" >> $GITHUB_ENV
          else
            echo "healthcare_data=false" >> $GITHUB_ENV
          fi

      - name: 📋 PR Summary Report
        run: |
          echo "# 📊 PR Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📏 PR Size & Complexity" >> $GITHUB_STEP_SUMMARY
          echo "- **Size**: ${{ env.size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Complexity**: ${{ env.complexity }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Changed**: $(git diff --name-only origin/main..HEAD | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏥 Compliance Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.healthcare_data }}" = "true" ]; then
            echo "- ⚠️ **Healthcare Data**: Changes detected - manual compliance review required" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **Healthcare Data**: No sensitive data changes detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Changed Areas" >> $GITHUB_STEP_SUMMARY
          git diff --name-only origin/main..HEAD | head -10 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY

  # ==================================================================
  # PR VALIDATION GATE
  # ==================================================================
  pr-validation-gate:
    name: 🚪 PR Validation Gate
    runs-on: ubuntu-latest
    needs: [pr-safety-check, fast-quality-check, focused-testing, pr-analysis]
    if: always()
    
    steps:
      - name: 🔍 Evaluate PR Gate
        run: |
          echo "🚪 Evaluating PR Validation Gate..."
          
          # Check all required validations
          if [ "${{ needs.pr-safety-check.result }}" = "success" ] && \
             [ "${{ needs.fast-quality-check.result }}" = "success" ] && \
             [ "${{ needs.focused-testing.result }}" = "success" ]; then
            echo "✅ PR Validation Gate: APPROVED"
            echo "🎯 All quality checks passed"
            echo "🚀 PR ready for review and merge"
          else
            echo "❌ PR Validation Gate: FAILED"
            echo "Safety Check: ${{ needs.pr-safety-check.result }}"
            echo "Quality Check: ${{ needs.fast-quality-check.result }}"
            echo "Testing: ${{ needs.focused-testing.result }}"
            exit 1
          fi

      - name: 🎯 Final PR Status
        run: |
          echo "# 🎯 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ **Safety Check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Quality Check**: ✅ Biome + Ultracite validation successful" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 **Testing**: ✅ Focused tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Analysis**: ✅ PR analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **This PR is ready for review!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Validated with NeonPro Healthcare Platform standards_" >> $GITHUB_STEP_SUMMARY

  # ==================================================================
  # AUTO-MERGE FOR DEPENDENCY UPDATES (Optional)
  # ==================================================================
  auto-merge-dependencies:
    name: 🤖 Auto-merge Dependencies
    runs-on: ubuntu-latest
    needs: pr-validation-gate
    if: >
      github.actor == 'dependabot[bot]' &&
      needs.pr-validation-gate.result == 'success' &&
      contains(github.event.pull_request.title, 'chore(deps)')
    
    steps:
      - name: 🤖 Enable auto-merge for Dependabot
        run: |
          echo "🤖 Auto-merge approved for dependency update"
          echo "✅ All validations passed"
          echo "🔒 Safe to auto-merge"
          
          # Note: Actual auto-merge would require additional setup
          # This is just a placeholder for the logic