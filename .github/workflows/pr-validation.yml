name: üîç PR Validation Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]
  pull_request_review:
    types: [submitted]

# Explicit permission scoping for security
permissions:
  contents: read          # Read repository contents
  actions: read          # Read workflow status
  checks: write          # Write check results
  pull-requests: write   # Comment on PRs and write reviews
  issues: write          # Create/update issues
  security-events: write # Write security scan results

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  # Healthcare compliance settings
  HEALTHCARE_COMPLIANCE_MODE: 'strict'
  LGPD_AUDIT_ENABLED: 'true'
  ANVISA_VALIDATION: 'true'
  CFM_COMPLIANCE: 'true'

# Limit concurrent workflow runs per PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # üõ°Ô∏è PR SAFETY & SECURITY CHECKS
  # ============================================================================
  pr-safety-check:
    name: üõ°Ô∏è PR Safety Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.pull_request.draft == false
    outputs:
      is-safe: ${{ steps.safety.outputs.is-safe }}
      risk-level: ${{ steps.safety.outputs.risk-level }}
      changed-files-count: ${{ steps.analysis.outputs.changed-files-count }}
      lines-changed: ${{ steps.analysis.outputs.lines-changed }}
      security-risk: ${{ steps.security.outputs.risk-level }}
    
    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          persist-credentials: false
      
      - name: üîç Analyze PR Changes
        id: analysis
        run: |
          # Get PR base and head refs
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Count changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | wc -l)
          echo "changed-files-count=$CHANGED_FILES" >> $GITHUB_OUTPUT
          
          # Count lines changed
          LINES_ADDED=$(git diff --shortstat $BASE_SHA...$HEAD_SHA | grep -oE '[0-9]+ insertions?' | grep -oE '[0-9]+' || echo "0")
          LINES_DELETED=$(git diff --shortstat $BASE_SHA...$HEAD_SHA | grep -oE '[0-9]+ deletions?' | grep -oE '[0-9]+' || echo "0")
          TOTAL_LINES=$((LINES_ADDED + LINES_DELETED))
          echo "lines-changed=$TOTAL_LINES" >> $GITHUB_OUTPUT
          
          echo "üìä PR Analysis Results:"
          echo "  - Files changed: $CHANGED_FILES"
          echo "  - Lines changed: $TOTAL_LINES"
          echo "  - Lines added: $LINES_ADDED"
          echo "  - Lines deleted: $LINES_DELETED"
      
      - name: üîí Security Risk Assessment
        id: security
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Check for sensitive file changes
          SENSITIVE_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E '\.(env|key|pem|p12|pfx|crt|cert)$|package\.json$|\.github/workflows/' || true)
          SECURITY_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E 'auth|security|crypto|password|secret|token' || true)
          
          RISK_LEVEL="low"
          
          if [ -n "$SENSITIVE_FILES" ]; then
            echo "‚ö†Ô∏è Sensitive files detected:"
            echo "$SENSITIVE_FILES"
            RISK_LEVEL="medium"
          fi
          
          if [ -n "$SECURITY_FILES" ]; then
            echo "üîí Security-related files detected:"
            echo "$SECURITY_FILES"
            RISK_LEVEL="high"
          fi
          
          # Check for potential secrets in diff
          if git diff $BASE_SHA...$HEAD_SHA | grep -iE '(api_key|password|secret|token|auth).*=.*["\'][^"\']{8,}'; then
            echo "üö® Potential secrets detected in diff!"
            RISK_LEVEL="critical"
          fi
          
          echo "risk-level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          echo "üîí Security risk level: $RISK_LEVEL"
      
      - name: ‚úÖ Safety Determination
        id: safety
        run: |
          CHANGED_FILES="${{ steps.analysis.outputs.changed-files-count }}"
          LINES_CHANGED="${{ steps.analysis.outputs.lines-changed }}"
          SECURITY_RISK="${{ steps.security.outputs.risk-level }}"
          
          IS_SAFE="true"
          RISK_LEVEL="low"
          
          # Determine overall risk based on size and security
          if [ "$SECURITY_RISK" = "critical" ]; then
            IS_SAFE="false"
            RISK_LEVEL="critical"
          elif [ "$SECURITY_RISK" = "high" ]; then
            RISK_LEVEL="high"
          elif [ "$CHANGED_FILES" -gt 50 ] || [ "$LINES_CHANGED" -gt 1000 ]; then
            RISK_LEVEL="medium"
          fi
          
          echo "is-safe=$IS_SAFE" >> $GITHUB_OUTPUT
          echo "risk-level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          
          echo "üõ°Ô∏è PR Safety Assessment:"
          echo "  - Safe to proceed: $IS_SAFE"
          echo "  - Overall risk level: $RISK_LEVEL"

  # ============================================================================
  # ‚ö° FAST QUALITY CHECKS
  # ============================================================================
  fast-quality-check:
    name: ‚ö° Fast Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [pr-safety-check]
    if: always() && needs.pr-safety-check.outputs.is-safe == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        check: [lint-staged, format-check, type-check-incremental]
    
    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          persist-credentials: false
      
      - name: üì¶ Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: |
            pnpm-lock.yaml
            apps/*/package.json
            packages/*/package.json
      
      - name: üì• Install Dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline
      
      - name: üîç Run Staged Linting
        if: matrix.check == 'lint-staged'
        run: |
          # Get changed files for targeted linting
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          CHANGED_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E '\.(ts|tsx|js|jsx)$' || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "Running lint on changed files:"
            echo "$CHANGED_FILES"
            echo "$CHANGED_FILES" | xargs pnpm exec biome lint --apply=off
          else
            echo "No lintable files changed"
          fi
      
      - name: üé® Check Formatting (Changed Files)
        if: matrix.check == 'format-check'
        run: |
          # Get changed files for targeted format checking
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          CHANGED_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E '\.(ts|tsx|js|jsx|json|md)$' || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "Checking format on changed files:"
            echo "$CHANGED_FILES"
            echo "$CHANGED_FILES" | xargs pnpm exec biome format --write=false
          else
            echo "No formattable files changed"
          fi
      
      - name: üî§ Incremental Type Check
        if: matrix.check == 'type-check-incremental'
        run: |
          # Run incremental type checking for faster feedback
          pnpm run type-check --incremental
        env:
          NODE_ENV: development

  # ============================================================================
  # üß™ FOCUSED TESTING STRATEGY
  # ============================================================================
  focused-tests:
    name: üß™ Focused Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [pr-safety-check, fast-quality-check]
    if: always() && needs.fast-quality-check.result == 'success'
    
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit-focused, integration-focused]
    
    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          persist-credentials: false
      
      - name: üì¶ Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: |
            pnpm-lock.yaml
            apps/*/package.json
            packages/*/package.json
      
      - name: üì• Install Dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline
      
      - name: üß™ Run Focused Unit Tests
        if: matrix.test-type == 'unit-focused'
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Find changed source files
          CHANGED_SOURCE_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E '\.(ts|tsx|js|jsx)$' | grep -v '\.test\.' | grep -v '\.spec\.' || true)
          
          if [ -n "$CHANGED_SOURCE_FILES" ]; then
            echo "Running tests for changed source files:"
            echo "$CHANGED_SOURCE_FILES"
            
            # Find related test files and run them
            for file in $CHANGED_SOURCE_FILES; do
              # Convert source file to potential test file patterns
              test_file1="${file//.ts/.test.ts}"
              test_file2="${file//.tsx/.test.tsx}"
              test_file3="${file//.js/.test.js}"
              test_file4="${file//.jsx/.test.jsx}"
              test_file5="${file/src//__tests__/}"
              
              for test_file in "$test_file1" "$test_file2" "$test_file3" "$test_file4" "$test_file5"; do
                if [ -f "$test_file" ]; then
                  echo "Found test file: $test_file"
                  pnpm exec vitest run "$test_file" --reporter=verbose
                fi
              done
            done
          else
            echo "No source files changed, running smoke tests"
            pnpm run test:unit --run --coverage=false --testTimeout=10000
          fi
        env:
          NODE_ENV: test
          CI: true
      
      - name: üîó Run Focused Integration Tests
        if: matrix.test-type == 'integration-focused'
        run: |
          # Run integration tests for changed API routes or components
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          CHANGED_API_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E 'api/|route\.' || true)
          
          if [ -n "$CHANGED_API_FILES" ]; then
            echo "API changes detected, running integration tests"
            pnpm run test:integration --run --testTimeout=20000
          else
            echo "No API changes, skipping integration tests"
          fi
        env:
          NODE_ENV: test
          CI: true

  # ============================================================================
  # üèóÔ∏è BUILD VALIDATION
  # ============================================================================
  build-validation:
    name: üèóÔ∏è Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [pr-safety-check, fast-quality-check]
    if: always() && needs.fast-quality-check.result == 'success'
    
    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      
      - name: üì¶ Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: |
            pnpm-lock.yaml
            apps/*/package.json
            packages/*/package.json
      
      - name: üì• Install Dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline
      
      - name: üèóÔ∏è Validate Build
        run: |
          echo "üèóÔ∏è Validating build process..."
          
          # Try building all packages first (fastest)
          pnpm run build:packages
          
          # Then build apps
          pnpm run build:web
          pnpm run build:api
          
          echo "‚úÖ Build validation successful"
      
      - name: üìä Bundle Analysis
        run: |
          echo "üìä Analyzing bundle size..."
          
          # Generate bundle analysis (if available)
          if [ -f "bundle-analyzer.js" ]; then
            node bundle-analyzer.js
          fi
          
          # Check for large bundle increases
          if [ -d ".next" ]; then
            find .next -name "*.js" -size +1M -exec ls -lh {} \; | head -10 || true
          fi

  # ============================================================================
  # üìã PR COMPLEXITY & RISK ANALYSIS
  # ============================================================================
  pr-analysis:
    name: üìã PR Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [pr-safety-check, fast-quality-check, focused-tests, build-validation]
    if: always()
    
    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          persist-credentials: false
      
      - name: üìä Generate PR Metrics
        id: metrics
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Calculate complexity metrics
          COMPLEXITY_SCORE=0
          
          # File count factor (0-25 points)
          FILES_CHANGED="${{ needs.pr-safety-check.outputs.changed-files-count }}"
          if [ "$FILES_CHANGED" -gt 20 ]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 25))
          elif [ "$FILES_CHANGED" -gt 10 ]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 15))
          elif [ "$FILES_CHANGED" -gt 5 ]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 10))
          fi
          
          # Lines changed factor (0-25 points)
          LINES_CHANGED="${{ needs.pr-safety-check.outputs.lines-changed }}"
          if [ "$LINES_CHANGED" -gt 500 ]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 25))
          elif [ "$LINES_CHANGED" -gt 200 ]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 15))
          elif [ "$LINES_CHANGED" -gt 100 ]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 10))
          fi
          
          # Security risk factor (0-25 points)
          SECURITY_RISK="${{ needs.pr-safety-check.outputs.security-risk }}"
          case "$SECURITY_RISK" in
            "critical") COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 25)) ;;
            "high") COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 20)) ;;
            "medium") COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 10)) ;;
            "low") COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 5)) ;;
          esac
          
          # Test coverage factor (0-25 points)
          TEST_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E '\.test\.|\.spec\.|__tests__/' | wc -l)
          SOURCE_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E '\.(ts|tsx|js|jsx)$' | grep -v -E '\.test\.|\.spec\.|__tests__/' | wc -l)
          
          if [ "$SOURCE_FILES" -gt 0 ]; then
            TEST_RATIO=$((TEST_FILES * 100 / SOURCE_FILES))
            if [ "$TEST_RATIO" -lt 50 ]; then
              COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 20))
            elif [ "$TEST_RATIO" -lt 80 ]; then
              COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 10))
            fi
          fi
          
          echo "complexity-score=$COMPLEXITY_SCORE" >> $GITHUB_OUTPUT
          echo "test-files=$TEST_FILES" >> $GITHUB_OUTPUT
          echo "source-files=$SOURCE_FILES" >> $GITHUB_OUTPUT
      
      - name: üè• Healthcare Compliance Check
        run: |
          echo "üè• Running Healthcare Compliance Analysis..."
          
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # LGPD (Data Protection) Analysis
          if git diff $BASE_SHA...$HEAD_SHA | grep -iE 'personal.*data|dados.*pessoais|pii|gdpr'; then
            echo "‚ö†Ô∏è LGPD: Personal data references detected - requires privacy review"
          fi
          
          # ANVISA (Medical Device) Analysis
          if git diff $BASE_SHA...$HEAD_SHA | grep -iE 'medical.*device|dispositivo.*medico|anvisa|regulatory'; then
            echo "üè• ANVISA: Medical device changes detected - requires regulatory review"
          fi
          
          # CFM (Medical Practice) Analysis
          if git diff $BASE_SHA...$HEAD_SHA | grep -iE 'prescription|receita|medical.*record|prontuario|cfm'; then
            echo "üë®‚Äç‚öïÔ∏è CFM: Medical practice changes detected - requires CFM compliance review"
          fi
          
          echo "‚úÖ Healthcare compliance analysis completed"
      
      - name: üí¨ Comment PR Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const metrics = {
              filesChanged: ${{ needs.pr-safety-check.outputs.changed-files-count }},
              linesChanged: ${{ needs.pr-safety-check.outputs.lines-changed }},
              complexityScore: ${{ steps.metrics.outputs.complexity-score }},
              securityRisk: '${{ needs.pr-safety-check.outputs.security-risk }}',
              testFiles: ${{ steps.metrics.outputs.test-files }},
              sourceFiles: ${{ steps.metrics.outputs.source-files }}
            };
            
            const riskLevel = metrics.complexityScore > 70 ? 'üî¥ HIGH' : 
                             metrics.complexityScore > 40 ? 'üü° MEDIUM' : 'üü¢ LOW';
            
            const testCoverage = metrics.sourceFiles > 0 ? 
              Math.round((metrics.testFiles / metrics.sourceFiles) * 100) : 0;
            
            const comment = `## üìã PR Analysis Report
            
            | Metric | Value |
            |--------|-------|
            | üìÅ Files Changed | ${metrics.filesChanged} |
            | üìù Lines Changed | ${metrics.linesChanged} |
            | üîí Security Risk | ${metrics.securityRisk.toUpperCase()} |
            | üß™ Test Coverage | ${testCoverage}% (${metrics.testFiles}/${metrics.sourceFiles}) |
            | ‚ö° Complexity Score | ${metrics.complexityScore}/100 |
            | üéØ Risk Level | ${riskLevel} |
            
            ### üìä Review Recommendations
            ${metrics.complexityScore > 70 ? '- ‚ö†Ô∏è High complexity - consider breaking into smaller PRs' : ''}
            ${metrics.securityRisk === 'high' || metrics.securityRisk === 'critical' ? '- üîí Security review required' : ''}
            ${testCoverage < 80 ? '- üß™ Consider adding more tests' : ''}
            ${metrics.filesChanged > 20 ? '- üìÅ Large changeset - extra review time needed' : ''}
            
            *Analysis generated by NeonPro PR Validation Pipeline*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ============================================================================
  # ‚úÖ VALIDATION GATE
  # ============================================================================
  validation-gate:
    name: ‚úÖ Validation Gate
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [pr-safety-check, fast-quality-check, focused-tests, build-validation, pr-analysis]
    if: always()
    
    steps:
      - name: üîç Evaluate Results
        id: evaluate
        run: |
          echo "üîç Evaluating PR validation results..."
          
          # Check all required jobs
          SAFETY_CHECK="${{ needs.pr-safety-check.result }}"
          QUALITY_CHECK="${{ needs.fast-quality-check.result }}"
          TESTS="${{ needs.focused-tests.result }}"
          BUILD="${{ needs.build-validation.result }}"
          
          echo "Results summary:"
          echo "  - Safety Check: $SAFETY_CHECK"
          echo "  - Quality Check: $QUALITY_CHECK"
          echo "  - Focused Tests: $TESTS"
          echo "  - Build Validation: $BUILD"
          
          # Determine overall status
          if [[ "$SAFETY_CHECK" == "success" && 
                "$QUALITY_CHECK" == "success" && 
                "$TESTS" == "success" && 
                "$BUILD" == "success" ]]; then
            echo "‚úÖ All validations passed - PR ready for review"
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some validations failed - PR needs attention"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: üéØ Set Status Check
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const status = '${{ steps.evaluate.outputs.status }}' || 'failed';
            const state = status === 'passed' ? 'success' : 'failure';
            const description = status === 'passed' ? 
              'All PR validations passed' : 
              'Some PR validations failed';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.pull_request.head.sha }}',
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'PR Validation Pipeline'
            });

  # ============================================================================
  # üîÑ AUTO-MERGE FOR DEPENDENCY UPDATES (Optional)
  # ============================================================================
  auto-merge-deps:
    name: üîÑ Auto-merge Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validation-gate]
    if: |
      always() && 
      needs.validation-gate.result == 'success' &&
      github.actor == 'dependabot[bot]' &&
      github.event.pull_request.user.type == 'Bot'
    
    steps:
      - name: üîç Analyze Dependency Changes
        id: deps
        run: |
          echo "üîç Analyzing dependency changes for auto-merge eligibility..."
          
          # Check if it's a minor/patch update
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          if echo "$PR_TITLE" | grep -qE 'bump.*from.*to.*[0-9]+\.[0-9]+\.[0-9]+'; then
            # Extract version info
            OLD_VERSION=$(echo "$PR_TITLE" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            NEW_VERSION=$(echo "$PR_TITLE" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | tail -1)
            
            OLD_MAJOR=$(echo "$OLD_VERSION" | cut -d. -f1)
            NEW_MAJOR=$(echo "$NEW_VERSION" | cut -d. -f1)
            
            if [ "$OLD_MAJOR" = "$NEW_MAJOR" ]; then
              echo "‚úÖ Safe dependency update detected (non-breaking)"
              echo "auto-merge=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Major version change detected - manual review required"
              echo "auto-merge=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è Cannot parse version info - manual review required"
            echo "auto-merge=false" >> $GITHUB_OUTPUT
          fi
      
      - name: üîÑ Enable Auto-merge
        if: steps.deps.outputs.auto-merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: '‚úÖ Automated approval for safe dependency update',
              event: 'APPROVE'
            });
            
            // Enable auto-merge
            github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_title: 'Auto-merge: ${{ github.event.pull_request.title }}',
              merge_method: 'squash'
            });

  # ============================================================================
  # üìã PR VALIDATION SUMMARY
  # ============================================================================
  validation-summary:
    name: üìã Validation Summary
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [pr-safety-check, fast-quality-check, focused-tests, build-validation, pr-analysis, validation-gate]
    if: always()
    
    steps:
      - name: üìã Generate Summary
        run: |
          echo "# üîç PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è Safety Check | ${{ needs.pr-safety-check.result }} | Risk: ${{ needs.pr-safety-check.outputs.risk-level }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Quality Check | ${{ needs.fast-quality-check.result }} | Fast validation |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Focused Tests | ${{ needs.focused-tests.result }} | Targeted testing |" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Build Validation | ${{ needs.build-validation.result }} | Build integrity |" >> $GITHUB_STEP_SUMMARY
          echo "| üìã PR Analysis | ${{ needs.pr-analysis.result }} | Complexity analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ Validation Gate | ${{ needs.validation-gate.result }} | Overall status |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.validation-gate.result }}" = "success" ]; then
            echo "## ‚úÖ PR Status: APPROVED FOR REVIEW" >> $GITHUB_STEP_SUMMARY
            echo "This PR has passed all validation checks and is ready for code review." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå PR Status: REQUIRES ATTENTION" >> $GITHUB_STEP_SUMMARY
            echo "This PR has failed one or more validation checks and needs to be fixed." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä PR Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Changed**: ${{ needs.pr-safety-check.outputs.changed-files-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Lines Changed**: ${{ needs.pr-safety-check.outputs.lines-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Risk**: ${{ needs.pr-safety-check.outputs.security-risk }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by NeonPro PR Validation Pipeline*" >> $GITHUB_STEP_SUMMARY