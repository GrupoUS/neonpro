# 🔍 NeonPro AI Healthcare Platform - PR Validation
# Fast, focused validation for pull requests with auto-merge capability
# Optimized for speed while maintaining healthcare compliance

name: 🔍 PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: ['main', 'develop']
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: ['main', 'develop']

# Optimized concurrency for PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

# Global environment variables (speed-optimized)
env:
  NODE_VERSION: 20
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  TURBO_TELEMETRY_DISABLED: 1

# Minimal permissions for security
permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read
  security-events: write

jobs:
  # =============================================================================
  # PHASE 1: SAFETY CHECK & CHANGE DETECTION
  # =============================================================================
  
  safety-check:
    name: 🛡️ Safety Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      safe-to-test: ${{ steps.safety.outputs.safe }}
      has-changes: ${{ steps.changes.outputs.src }}
      has-deps-changes: ${{ steps.changes.outputs.deps }}
      is-dependabot: ${{ steps.safety.outputs.is-dependabot }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 🛡️ Security check
        id: safety
        run: |
          # Check if PR is from a trusted source
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            echo "is-dependabot=true" >> $GITHUB_OUTPUT
            echo "safe=true" >> $GITHUB_OUTPUT
            echo "🤖 Dependabot PR detected - auto-approved for testing"
          elif [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            echo "is-dependabot=false" >> $GITHUB_OUTPUT  
            echo "safe=true" >> $GITHUB_OUTPUT
            echo "✅ Same repository PR - safe to test"
          else
            echo "is-dependabot=false" >> $GITHUB_OUTPUT
            echo "safe=false" >> $GITHUB_OUTPUT
            echo "⚠️ Fork PR detected - manual approval required"
          fi

      - name: 🔍 Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - 'apps/**'
              - 'packages/**'
              - 'turbo.json'
              - 'package.json'
              - 'pnpm-lock.yaml'
            deps:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'apps/**/package.json'
              - 'packages/**/package.json'

      - name: 📊 Safety summary
        run: |
          echo "### 🛡️ Safety Check Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Safe to test**: ${{ steps.safety.outputs.safe }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source changes**: ${{ steps.changes.outputs.src }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency changes**: ${{ steps.changes.outputs.deps }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependabot PR**: ${{ steps.safety.outputs.is-dependabot }}" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # PHASE 2: QUALITY CHECK (FAST)
  # =============================================================================

  quality-check:
    name: ⚡ Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: safety-check
    if: needs.safety-check.outputs.safe-to-test == 'true' && needs.safety-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎨 Format check
        run: pnpm turbo run format:check --force

      - name: 🔍 Lint check
        run: pnpm turbo run lint --force

      - name: 📝 Type check
        run: pnpm turbo run type-check --force

      - name: 🏥 Quick compliance check
        run: |
          echo "🔍 Running quick healthcare compliance checks..."
          # Check for LGPD compliance patterns
          if grep -r "patient.*data\|cpf\|personal.*info" apps/ packages/ --include="*.ts" --include="*.tsx"; then
            echo "⚠️ Found potential PII usage - LGPD review required"
            pnpm turbo run compliance:quick --force
          else
            echo "✅ No obvious PII patterns detected"
          fi

  # =============================================================================
  # PHASE 3: FOCUSED TESTING
  # =============================================================================

  focused-test:
    name: 🎯 Focused Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [safety-check, quality-check]
    if: needs.safety-check.outputs.safe-to-test == 'true' && needs.safety-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build affected packages
        run: pnpm turbo run build --force
        env:
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}
          TURBO_TEAM: ${{ env.TURBO_TEAM }}

      - name: 🧪 Run focused tests
        run: |
          # Run tests only for changed packages
          echo "🎯 Running focused tests for changed code..."
          pnpm turbo run test --force --filter=...[HEAD~1]
        env:
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}
          TURBO_TEAM: ${{ env.TURBO_TEAM }}

      - name: 🧪 Run smoke tests
        run: |
          echo "💨 Running smoke tests..."
          pnpm turbo run test:smoke --force

  # =============================================================================
  # PHASE 4: BUILD VALIDATION
  # =============================================================================

  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [safety-check, focused-test]
    if: needs.safety-check.outputs.safe-to-test == 'true' && needs.safety-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build all packages
        run: pnpm turbo run build --force
        env:
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}
          TURBO_TEAM: ${{ env.TURBO_TEAM }}

      - name: 📦 Validate build outputs
        run: |
          echo "🔍 Validating build outputs..."
          
          # Check that all expected build outputs exist
          for app in apps/*/; do
            if [ -f "${app}package.json" ]; then
              app_name=$(basename "$app")
              echo "Checking build output for app: $app_name"
              
              # Check Next.js builds
              if [ -f "${app}next.config.mjs" ] && [ ! -d "${app}.next" ]; then
                echo "❌ Missing .next build output for $app_name"
                exit 1
              fi
              
              # Check other build outputs
              if [ ! -d "${app}dist" ] && [ ! -d "${app}.next" ]; then
                echo "⚠️ No dist or .next directory found for $app_name"
              fi
            fi
          done
          
          echo "✅ All build outputs validated"

      - name: 📤 Upload preview artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pr-preview-${{ github.event.pull_request.number }}
          path: |
            apps/*/dist
            apps/*/.next
            !**/node_modules
          retention-days: 3

  # =============================================================================
  # PHASE 5: SECURITY SCAN (FOCUSED)
  # =============================================================================

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [safety-check, build-validation]
    if: needs.safety-check.outputs.safe-to-test == 'true' && needs.safety-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Quick dependency audit
        run: |
          echo "🔍 Running dependency audit..."
          pnpm audit --audit-level moderate || true

      - name: 🔒 Focused Semgrep scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: 📤 Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # =============================================================================
  # PHASE 6: PR ANALYSIS & PREVIEW
  # =============================================================================

  pr-analysis:
    name: 📊 PR Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [safety-check, build-validation, security-scan]
    if: always() && needs.safety-check.outputs.safe-to-test == 'true' && needs.safety-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 📊 Analyze PR size
        id: pr-size
        run: |
          files_changed=$(git diff --name-only HEAD~1 | wc -l)
          lines_added=$(git diff --stat HEAD~1 | tail -1 | grep -o '[0-9]\+ insertions' | grep -o '[0-9]\+' || echo "0")
          lines_deleted=$(git diff --stat HEAD~1 | tail -1 | grep -o '[0-9]\+ deletions' | grep -o '[0-9]\+' || echo "0")
          
          echo "files-changed=$files_changed" >> $GITHUB_OUTPUT
          echo "lines-added=$lines_added" >> $GITHUB_OUTPUT
          echo "lines-deleted=$lines_deleted" >> $GITHUB_OUTPUT
          
          # Determine PR size category
          total_changes=$((lines_added + lines_deleted))
          if [ $total_changes -lt 50 ]; then
            echo "size=XS" >> $GITHUB_OUTPUT
          elif [ $total_changes -lt 200 ]; then
            echo "size=S" >> $GITHUB_OUTPUT
          elif [ $total_changes -lt 500 ]; then
            echo "size=M" >> $GITHUB_OUTPUT
          elif [ $total_changes -lt 1000 ]; then
            echo "size=L" >> $GITHUB_OUTPUT
          else
            echo "size=XL" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Generate PR comment
        id: pr-comment
        run: |
          cat > pr-comment.md << 'EOF'
          ## 🔍 PR Validation Results
          
          ### 📊 Analysis Summary
          - **Files changed**: ${{ steps.pr-size.outputs.files-changed }}
          - **Lines added**: +${{ steps.pr-size.outputs.lines-added }}
          - **Lines deleted**: -${{ steps.pr-size.outputs.lines-deleted }}
          - **Size**: ${{ steps.pr-size.outputs.size }}
          
          ### ✅ Validation Status
          - **Quality Check**: ${{ needs.quality-check.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Focused Tests**: ${{ needs.focused-test.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Build Validation**: ${{ needs.build-validation.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Security Scan**: ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### 🏥 Healthcare Compliance
          - **LGPD Patterns**: Checked for PII usage
          - **Quick Validation**: ${{ needs.quality-check.result == 'success' && '✅ Passed' || '⚠️ Review needed' }}
          
          ### 📦 Preview
          Build artifacts available for testing: [Download Preview](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          <sub>🤖 This comment is automatically updated on each commit</sub>
          EOF

      - name: 💬 Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('pr-comment.md', 'utf8');
            
            // Look for existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔍 PR Validation Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  # =============================================================================
  # PHASE 7: VALIDATION GATE
  # =============================================================================

  validation-gate:
    name: 🚪 Validation Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [safety-check, quality-check, focused-test, build-validation, security-scan]
    if: always() && needs.safety-check.outputs.safe-to-test == 'true'
    steps:
      - name: 🔍 Evaluate results
        id: evaluate
        run: |
          # Check if all required checks passed
          quality_status="${{ needs.quality-check.result }}"
          test_status="${{ needs.focused-test.result }}"
          build_status="${{ needs.build-validation.result }}"
          security_status="${{ needs.security-scan.result }}"
          
          echo "Quality: $quality_status"
          echo "Tests: $test_status"
          echo "Build: $build_status"
          echo "Security: $security_status"
          
          # Determine overall status
          if [[ "$quality_status" == "success" && 
                "$test_status" == "success" && 
                "$build_status" == "success" && 
                ("$security_status" == "success" || "$security_status" == "skipped") ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ All validation checks passed"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "❌ Some validation checks failed"
            exit 1
          fi

      - name: 📊 Validation summary
        run: |
          echo "### 🚪 Validation Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ steps.evaluate.outputs.status == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Individual Results**:" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Check: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Focused Tests: ${{ needs.focused-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Validation: ${{ needs.build-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # PHASE 8: AUTO-MERGE (CONDITIONAL)
  # =============================================================================

  auto-merge:
    name: 🤖 Auto-merge
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [safety-check, validation-gate]
    if: |
      always() && 
      needs.validation-gate.result == 'success' && 
      (
        needs.safety-check.outputs.is-dependabot == 'true' ||
        github.actor == 'github-actions[bot]' ||
        contains(github.event.pull_request.labels.*.name, 'auto-merge')
      )
    steps:
      - name: 🔍 Pre-merge validation
        run: |
          echo "🔍 Validating auto-merge conditions..."
          echo "- PR validation: ✅ Passed"
          echo "- Actor: ${{ github.actor }}"
          echo "- Is Dependabot: ${{ needs.safety-check.outputs.is-dependabot }}"
          echo "- Has auto-merge label: ${{ contains(github.event.pull_request.labels.*.name, 'auto-merge') }}"

      - name: ✅ Enable auto-merge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '🤖 Auto-approved: All validation checks passed'
            });
            
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_title: '${{ github.event.pull_request.title }}',
              commit_message: 'Auto-merged by validation pipeline',
              merge_method: 'squash'
            });

      - name: 🎉 Auto-merge success
        run: |
          echo "🎉 PR successfully auto-merged!"
          echo "### 🤖 Auto-merge Completed" >> $GITHUB_STEP_SUMMARY
          echo "This PR was automatically merged after passing all validation checks." >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # PHASE 9: SUMMARY
  # =============================================================================

  summary:
    name: 📋 Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [safety-check, validation-gate, auto-merge]
    if: always()
    steps:
      - name: 📊 Generate final summary
        run: |
          echo "## 🔍 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR**: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Validation Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Safety Check**: ${{ needs.safety-check.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation Gate**: ${{ needs.validation-gate.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-merge**: ${{ needs.auto-merge.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.validation-gate.result }}" == "success" ]]; then
            echo "### ✅ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "This PR is ready for review and merge." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "This PR requires attention before it can be merged." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📱 Slack notification (on failure)
        if: failure() && needs.validation-gate.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#pr-validation'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            PR validation failed for #${{ github.event.pull_request.number }}
            Author: @${{ github.event.pull_request.user.login }}
            Title: ${{ github.event.pull_request.title }}