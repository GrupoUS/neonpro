name: 🚀 Performance Tests

on:
  # Executar em PRs para branches principais
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'tools/e2e/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  
  # Executar em push para main (para criar baselines)
  push:
    branches: [main]
  
  # Permitir execução manual
  workflow_dispatch:
    inputs:
      suite:
        description: 'Test suite to run'
        required: true
        default: 'quick'
        type: choice
        options:
          - quick
          - full
          - regression
          - comparison
      
      create_baseline:
        description: 'Create performance baseline'
        required: false
        default: false
        type: boolean
      
      compare_baseline:
        description: 'Compare with baseline'
        required: false
        default: true
        type: boolean
      
      threshold:
        description: 'Performance degradation threshold (%)'
        required: false
        default: '10'
        type: string

  # Executar testes de performance semanalmente
  schedule:
    - cron: '0 2 * * 1' # Segunda-feira às 2h UTC

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

jobs:
  # Job para detectar mudanças
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      performance-tests: ${{ steps.changes.outputs.performance-tests }}
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            performance-tests:
              - 'tools/e2e/**'
              - '.github/workflows/performance-tests.yml'
            frontend:
              - 'apps/web/**'
              - 'packages/brazilian-healthcare-ui/**'
              - 'packages/shared/**'
            backend:
              - 'apps/api/**'
              - 'packages/auth/**'
              - 'packages/compliance/**'

  # Job principal de testes de performance
  performance-tests:
    name: 🎭 Performance Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      github.event_name == 'push' ||
      needs.detect-changes.outputs.performance-tests == 'true' ||
      needs.detect-changes.outputs.frontend == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
        suite: 
          - ${{ github.event.inputs.suite || 'quick' }}
    
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🎭 Install Playwright browsers
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}
      
      - name: 🏗️ Build application
        run: |
          pnpm build:web
          pnpm build:api
        env:
          NODE_ENV: production
      
      - name: 🚀 Start application
        run: |
          # Iniciar API em background
          pnpm start:api &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          
          # Iniciar Web em background
          pnpm start:web &
          WEB_PID=$!
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV
          
          # Aguardar serviços ficarem prontos
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      
      - name: 📊 Run performance tests
        run: |
          # Configurar variáveis de ambiente
          export PLAYWRIGHT_BASE_URL=http://localhost:3000
          export TEST_ENVIRONMENT=ci
          export PERFORMANCE_TESTING=true
          export PLAYWRIGHT_BROWSER=${{ matrix.browser }}
          export BENCHMARK_SUITE=${{ matrix.suite }}
          
          # Executar testes usando o script PowerShell (adaptado para Linux)
          pnpm exec playwright test tools/e2e/tests/performance \
            --config=tools/e2e/playwright.config.ts \
            --project=${{ matrix.browser }} \
            --workers=1 \
            --reporter=html,json,junit \
            --output-dir=test-results/performance-${{ matrix.browser }}
        env:
          CI: true
      
      - name: 📊 Generate performance report
        if: always()
        run: |
          # Criar script Node.js para processar resultados
          cat > process-results.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          function findPerformanceResults() {
            const resultsDir = 'test-results';
            const results = [];
            
            function scanDir(dir) {
              if (!fs.existsSync(dir)) return;
              
              const items = fs.readdirSync(dir);
              for (const item of items) {
                const fullPath = path.join(dir, item);
                const stat = fs.statSync(fullPath);
                
                if (stat.isDirectory()) {
                  scanDir(fullPath);
                } else if (item.includes('performance') && item.endsWith('.json')) {
                  try {
                    const content = JSON.parse(fs.readFileSync(fullPath, 'utf8'));
                    if (Array.isArray(content)) {
                      results.push(...content);
                    } else if (content.suites) {
                      // Formato do Playwright
                      content.suites.forEach(suite => {
                        suite.specs.forEach(spec => {
                          spec.tests.forEach(test => {
                            results.push({
                              title: test.title,
                              status: test.results[0]?.status || 'unknown',
                              duration: test.results[0]?.duration || 0,
                              browser: '${{ matrix.browser }}',
                              suite: '${{ matrix.suite }}'
                            });
                          });
                        });
                      });
                    }
                  } catch (e) {
                    console.warn(`Erro ao processar ${fullPath}:`, e.message);
                  }
                }
              }
            }
            
            scanDir(resultsDir);
            return results;
          }
          
          const results = findPerformanceResults();
          const summary = {
            browser: '${{ matrix.browser }}',
            suite: '${{ matrix.suite }}',
            timestamp: new Date().toISOString(),
            totalTests: results.length,
            passedTests: results.filter(r => r.status === 'passed').length,
            failedTests: results.filter(r => r.status === 'failed').length,
            results: results
          };
          
          // Salvar resumo
          fs.writeFileSync(
            'performance-summary-${{ matrix.browser }}.json',
            JSON.stringify(summary, null, 2)
          );
          
          console.log(`Performance Summary - ${{ matrix.browser }}:`);
          console.log(`Total Tests: ${summary.totalTests}`);
          console.log(`Passed: ${summary.passedTests}`);
          console.log(`Failed: ${summary.failedTests}`);
          console.log(`Success Rate: ${((summary.passedTests / summary.totalTests) * 100).toFixed(1)}%`);
          EOF
          
          node process-results.js
      
      - name: 📤 Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ matrix.browser }}-${{ matrix.suite }}
          path: |
            test-results/
            performance-summary-*.json
            playwright-report/
          retention-days: 30
      
      - name: 🛑 Stop application
        if: always()
        run: |
          # Parar serviços
          if [ ! -z "$API_PID" ]; then kill $API_PID || true; fi
          if [ ! -z "$WEB_PID" ]; then kill $WEB_PID || true; fi

  # Job para comparar performance com baseline
  performance-comparison:
    name: 📊 Performance Comparison
    runs-on: ubuntu-latest
    needs: performance-tests
    if: |
      always() &&
      (github.event.inputs.compare_baseline == 'true' || github.event_name != 'workflow_dispatch')
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📥 Download performance results
        uses: actions/download-artifact@v4
        with:
          pattern: performance-results-*
          merge-multiple: true
          path: ./performance-results
      
      - name: 📊 Compare with baseline
        run: |
          # Criar script de comparação
          cat > compare-performance.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          function loadResults() {
            const results = [];
            const files = fs.readdirSync('./performance-results');
            
            for (const file of files) {
              if (file.startsWith('performance-summary-') && file.endsWith('.json')) {
                try {
                  const content = JSON.parse(fs.readFileSync(path.join('./performance-results', file), 'utf8'));
                  results.push(content);
                } catch (e) {
                  console.warn(`Erro ao ler ${file}:`, e.message);
                }
              }
            }
            
            return results;
          }
          
          const results = loadResults();
          const threshold = parseInt('${{ github.event.inputs.threshold || "10" }}');
          
          console.log('\n📊 RELATÓRIO DE PERFORMANCE');
          console.log('================================');
          
          let hasFailures = false;
          
          results.forEach(result => {
            console.log(`\n🌐 Browser: ${result.browser}`);
            console.log(`📋 Suite: ${result.suite}`);
            console.log(`✅ Testes Passaram: ${result.passedTests}/${result.totalTests}`);
            console.log(`❌ Testes Falharam: ${result.failedTests}`);
            
            const successRate = (result.passedTests / result.totalTests) * 100;
            console.log(`📈 Taxa de Sucesso: ${successRate.toFixed(1)}%`);
            
            if (successRate < (100 - threshold)) {
              console.log(`⚠️ Taxa de sucesso abaixo do threshold (${100 - threshold}%)`);
              hasFailures = true;
            }
          });
          
          // Criar badge de status
          const overallSuccess = results.every(r => (r.passedTests / r.totalTests) >= ((100 - threshold) / 100));
          const badgeColor = overallSuccess ? 'brightgreen' : 'red';
          const badgeText = overallSuccess ? 'passing' : 'failing';
          
          console.log(`\n🏷️ Badge Status: ${badgeText}`);
          
          // Salvar resultado para próximos jobs
          fs.writeFileSync('performance-status.json', JSON.stringify({
            success: overallSuccess,
            results: results,
            threshold: threshold
          }));
          
          if (hasFailures) {
            console.log('\n❌ Performance tests failed!');
            process.exit(1);
          } else {
            console.log('\n✅ Performance tests passed!');
          }
          EOF
          
          node compare-performance.js
      
      - name: 📤 Upload comparison results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-comparison
          path: performance-status.json
          retention-days: 30

  # Job para comentar no PR com resultados
  performance-comment:
    name: 💬 Performance Comment
    runs-on: ubuntu-latest
    needs: [performance-tests, performance-comparison]
    if: |
      always() &&
      github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Download comparison results
        uses: actions/download-artifact@v4
        with:
          name: performance-comparison
          path: ./
      
      - name: 💬 Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let status = { success: false, results: [] };
            try {
              status = JSON.parse(fs.readFileSync('performance-status.json', 'utf8'));
            } catch (e) {
              console.log('Não foi possível ler o status de performance');
            }
            
            const emoji = status.success ? '✅' : '❌';
            const statusText = status.success ? 'PASSOU' : 'FALHOU';
            
            let comment = `## ${emoji} Testes de Performance - ${statusText}\n\n`;
            
            if (status.results && status.results.length > 0) {
              comment += '### 📊 Resultados por Browser\n\n';
              comment += '| Browser | Suite | Testes | Passou | Falhou | Taxa de Sucesso |\n';
              comment += '|---------|-------|--------|--------|--------|-----------------|\n';
              
              status.results.forEach(result => {
                const successRate = ((result.passedTests / result.totalTests) * 100).toFixed(1);
                comment += `| ${result.browser} | ${result.suite} | ${result.totalTests} | ${result.passedTests} | ${result.failedTests} | ${successRate}% |\n`;
              });
              
              comment += `\n**Threshold de Performance:** ${status.threshold}%\n`;
            }
            
            comment += '\n### 📁 Artefatos\n';
            comment += '- 📊 Relatórios HTML disponíveis nos artefatos do workflow\n';
            comment += '- 📄 Dados JSON de performance para análise detalhada\n';
            
            if (!status.success) {
              comment += '\n### ⚠️ Ação Necessária\n';
              comment += 'Os testes de performance falharam. Verifique os relatórios detalhados nos artefatos.';
            }
            
            // Encontrar comentário existente
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Testes de Performance')
            );
            
            if (existingComment) {
              // Atualizar comentário existente
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Criar novo comentário
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  # Job para criar baseline (apenas em push para main)
  create-baseline:
    name: 📊 Create Performance Baseline
    runs-on: ubuntu-latest
    needs: performance-tests
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' ||
      github.event.inputs.create_baseline == 'true'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📥 Download performance results
        uses: actions/download-artifact@v4
        with:
          pattern: performance-results-*
          merge-multiple: true
          path: ./performance-results
      
      - name: 📊 Create baseline
        run: |
          # Criar diretório de baselines
          mkdir -p benchmarks/baselines
          
          # Processar resultados e criar baseline
          cat > create-baseline.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          function loadResults() {
            const results = [];
            const files = fs.readdirSync('./performance-results');
            
            for (const file of files) {
              if (file.startsWith('performance-summary-') && file.endsWith('.json')) {
                try {
                  const content = JSON.parse(fs.readFileSync(path.join('./performance-results', file), 'utf8'));
                  results.push(content);
                } catch (e) {
                  console.warn(`Erro ao ler ${file}:`, e.message);
                }
              }
            }
            
            return results;
          }
          
          const results = loadResults();
          const timestamp = new Date().toISOString();
          
          const baseline = {
            timestamp: timestamp,
            commit: process.env.GITHUB_SHA,
            ref: process.env.GITHUB_REF,
            workflow: process.env.GITHUB_WORKFLOW,
            results: results,
            environment: {
              runner: 'github-actions',
              node_version: process.env.NODE_VERSION
            }
          };
          
          // Salvar baseline
          const baselineFile = `benchmarks/baselines/baseline-${timestamp.split('T')[0]}.json`;
          fs.writeFileSync(baselineFile, JSON.stringify(baseline, null, 2));
          
          console.log(`✅ Baseline criado: ${baselineFile}`);
          console.log(`📊 Commit: ${baseline.commit}`);
          console.log(`📅 Timestamp: ${baseline.timestamp}`);
          EOF
          
          node create-baseline.js
      
      - name: 📤 Commit baseline
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add benchmarks/baselines/
          
          if git diff --staged --quiet; then
            echo "Nenhuma mudança no baseline"
          else
            git commit -m "📊 Add performance baseline for $(date -I)"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}