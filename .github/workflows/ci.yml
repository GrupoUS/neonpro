name: CI (Unified)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  actions: read

env:
  NODE_OPTIONS: "--max-old-space-size=4096"
  CI: true
  PNPM_CACHE_FOLDER: .pnpm-cache

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-and-install:
    name: Setup and Install
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            tools/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup-and-install
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            tools/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      - name: Run oxlint
        run: npx oxlint .
      - name: Check formatting
        run: npx dprint check
      - name: Upload lint logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: |
            .
          if-no-files-found: ignore

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: setup-and-install
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            tools/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      - name: TypeScript compile
        run: pnpm type-check

  test-and-coverage:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: setup-and-install
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            tools/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            **/node_modules/.vitest
            **/.vitest
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/package.json', 'pnpm-lock.yaml', 'turbo.json') }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - name: Run unit tests
        run: pnpm vitest run --project unit
      - name: Run coverage (affected packages only)
        run: pnpm turbo run coverage --filter=...[origin/main]
      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
      - name: Enforce test and test-pages placement policy
        shell: bash
        run: |
          set -e
          bash scripts/guard-test-placement.sh

        with:
          name: coverage
          path: |
            **/coverage/**
            **/junit.xml
          retention-days: 14

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint, type-check, test-and-coverage]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            tools/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      - name: Install bc for quality calculations
        run: sudo apt-get update && sudo apt-get install -y bc
      - name: Compute quality metrics
        id: qg
        shell: bash
        run: |
          set -e
          echo "Running quality gates..."

          TOTAL_SCORE=0

          echo "Checking TypeScript compilation..."
          if pnpm type-check > /dev/null 2>&1; then
            TSC_SCORE=25
          else
            TSC_SCORE=0
          fi
          TOTAL_SCORE=$((TOTAL_SCORE + TSC_SCORE))

          echo "Checking linting..."
          LINT_VIOLATIONS=$(npx oxlint . --quiet 2>/dev/null | wc -l || echo "0")
          if [ "$LINT_VIOLATIONS" -eq 0 ]; then
            LINT_SCORE=25
          elif [ "$LINT_VIOLATIONS" -le 1000 ]; then
            LINT_SCORE=20
          elif [ "$LINT_VIOLATIONS" -le 5000 ]; then
            LINT_SCORE=15
          elif [ "$LINT_VIOLATIONS" -le 10000 ]; then
            LINT_SCORE=10
          else
            LINT_SCORE=5
          fi
          TOTAL_SCORE=$((TOTAL_SCORE + LINT_SCORE))

          echo "Checking type safety (: any occurrences)..."
          ANY_FILES=$(find . -name "*.ts" -o -name "*.tsx" | grep -v node_modules | grep -v .next | grep -v dist | xargs grep -l ": any" 2>/dev/null | wc -l || echo "0")
          if [ "$ANY_FILES" -eq 0 ]; then
            TYPE_SCORE=25
          elif [ "$ANY_FILES" -le 10 ]; then
            TYPE_SCORE=20
          elif [ "$ANY_FILES" -le 30 ]; then
            TYPE_SCORE=15
          elif [ "$ANY_FILES" -le 60 ]; then
            TYPE_SCORE=10
          else
            TYPE_SCORE=5
          fi
          TOTAL_SCORE=$((TOTAL_SCORE + TYPE_SCORE))

          echo "Checking security patterns via oxlint..."
          SECURITY_ISSUES=$(npx oxlint . --quiet 2>/dev/null | grep -c "security\|dangerous" || echo "0")
          if [ "$SECURITY_ISSUES" -eq 0 ]; then
            SECURITY_SCORE=25
          elif [ "$SECURITY_ISSUES" -le 20 ]; then
            SECURITY_SCORE=20
          elif [ "$SECURITY_ISSUES" -le 50 ]; then
            SECURITY_SCORE=15
          elif [ "$SECURITY_ISSUES" -le 100 ]; then
            SECURITY_SCORE=10
          else
            SECURITY_SCORE=5
          fi
          TOTAL_SCORE=$((TOTAL_SCORE + SECURITY_SCORE))

          QUALITY_SCORE=$(echo "scale=1; $TOTAL_SCORE / 10" | bc)

          echo "quality_score=$QUALITY_SCORE" >> "$GITHUB_OUTPUT"
          echo "tsc_score=$TSC_SCORE" >> "$GITHUB_OUTPUT"
          echo "lint_score=$LINT_SCORE" >> "$GITHUB_OUTPUT"
          echo "type_score=$TYPE_SCORE" >> "$GITHUB_OUTPUT"
          echo "security_score=$SECURITY_SCORE" >> "$GITHUB_OUTPUT"
          echo "lint_violations=$LINT_VIOLATIONS" >> "$GITHUB_OUTPUT"
          echo "any_files=$ANY_FILES" >> "$GITHUB_OUTPUT"
          echo "security_issues=$SECURITY_ISSUES" >> "$GITHUB_OUTPUT"

          {
            echo "## Quality Gates Report";
            echo "";
            echo "Overall Quality Score: $QUALITY_SCORE/10.0";
            echo "";
            echo "| Category | Score | Max | Status |";
            echo "|----------|-------|-----|--------|";
            if [ "$TSC_SCORE" -eq 25 ]; then STATUS_TSC="✅"; else STATUS_TSC="❌"; fi
            if [ "$LINT_SCORE" -ge 20 ]; then STATUS_LINT="✅"; else STATUS_LINT="⚠️"; fi
            if [ "$TYPE_SCORE" -ge 20 ]; then STATUS_TYPE="✅"; else STATUS_TYPE="⚠️"; fi
            if [ "$SECURITY_SCORE" -eq 25 ]; then STATUS_SEC="✅"; else STATUS_SEC="❌"; fi
            echo "| TypeScript Compilation | $TSC_SCORE | 25 | $STATUS_TSC |";
            echo "| Linting Quality | $LINT_SCORE | 25 | $STATUS_LINT |";
            echo "| Type Safety | $TYPE_SCORE | 25 | $STATUS_TYPE |";
            echo "| Security & Best Practices | $SECURITY_SCORE | 25 | $STATUS_SEC |";
            echo "";
            if (( $(echo "$QUALITY_SCORE >= 8.5" | bc -l) )); then
              echo "Quality gates PASSED - Excellent code quality!";
            elif (( $(echo "$QUALITY_SCORE >= 7.0" | bc -l) )); then
              echo "Quality gates WARNING - Good quality with room for improvement";
            else
              echo "Quality gates FAILED - Quality improvements required";
            fi
          } > quality-gates-report.md

      - name: Enforce gates
        shell: bash
        run: |
          QUALITY_SCORE='${{ steps.qg.outputs.quality_score }}'
          TSC_SCORE='${{ steps.qg.outputs.tsc_score }}'
          SECURITY_SCORE='${{ steps.qg.outputs.security_score }}'

          echo "Quality Score: $QUALITY_SCORE"

          if [ "$TSC_SCORE" -ne 25 ]; then
            echo "TypeScript compilation must succeed"; exit 1; fi
          if [ "$SECURITY_SCORE" -lt 10 ]; then
            echo "Too many security issues"; exit 1; fi
          if (( $(echo "$QUALITY_SCORE < 7.0" | bc -l) )); then
            echo "Quality score must be ≥7.0/10"; exit 1; fi

      - name: Upload report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-gates-report
          path: quality-gates-report.md
          retention-days: 14

  performance-budgets:
    name: Performance Budgets & Monitoring
    runs-on: ubuntu-latest
    needs: [setup-and-install, quality-gates]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Restore node_modules cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            tools/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      - name: Install Lighthouse CI
        run: pnpm add -g @lhci/cli@latest
      - name: Build web app
        run: pnpm --filter @neonpro/web build
      - name: Run Lighthouse CI with Performance Budgets
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/
            *.html
          retention-days: 14
      - name: Performance Budget Validation
        shell: bash
        run: |
          echo "Performance budget validation completed"
          echo "Check Lighthouse CI output above for budget violations"
          if [ -f ".lighthouseci/manifest.json" ]; then
            echo "Lighthouse CI reports generated successfully"
          else
            echo "Warning: No Lighthouse CI reports found"
          fi

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      NODE_OPTIONS: "--max-old-space-size=4096"
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - run: pnpm add -g vercel@latest
      - name: Pull Vercel env
        run: vercel pull --yes --environment=production --token=${{ env.VERCEL_TOKEN }}
      - name: Build
        run: vercel build --prod --token=${{ env.VERCEL_TOKEN }}
      - name: Deploy
        run: vercel deploy --prebuilt --prod --token=${{ env.VERCEL_TOKEN }}

