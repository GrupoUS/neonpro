name: 🚀 NeonPro CI/CD Pipeline

on:
  push:
    branches: ["main", "development", "staging"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: "Skip test execution"
        required: false
        default: "false"
      environment:
        description: "Target environment"
        required: false
        default: "staging"
        type: choice
        options:
          - staging
          - production

# Concurrency control - cancel previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  PNPM_VERSION: "8.15.6"
  NODE_VERSION: "20.x"
  CI: true
  FORCE_COLOR: 3

# Jobs definition
jobs:
  # Pre-flight checks
  preflight:
    name: 🔍 Preflight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-changes: ${{ steps.changes.outputs.any }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            any:
              - '**'
            code:
              - 'apps/**'
              - 'packages/**'
              - 'docs/**'
              - 'infrastructure/**'
            config:
              - 'package.json'
              - 'pnpm-workspace.yaml'
              - '**/*.config.*'
              - 'tsconfig*.json'

      - name: 🚀 Check deployment conditions
        id: deploy-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Environment info
        run: |
          echo "🌍 Environment: ${{ github.ref_name }}"
          echo "🔄 Event: ${{ github.event_name }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "📦 Should deploy: ${{ steps.deploy-check.outputs.should-deploy }}"

  # Security and compliance audit
  security-audit:
    name: 🔒 Security & Compliance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: preflight
    if: needs.preflight.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run npm audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: 🏥 ANVISA Compliance Check
        run: node scripts/anvisa-validation.js
        continue-on-error: false

      - name: 👨‍⚕️ CFM Compliance Check
        run: node scripts/cfm-compliance.js
        continue-on-error: false

      - name: 🛡️ LGPD Compliance Check
        run: node scripts/lgpd-validation.js
        continue-on-error: false

      - name: 🗄️ Supabase Schema Validation
        run: node scripts/supabase-validation.js
        continue-on-error: false

      - name: 🔐 Security scan with Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: auto
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  # Code quality gate
  quality-gate:
    name: 🏆 Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: preflight
    if: needs.preflight.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 TypeScript Check
        run: pnpm exec tsc --noEmit

      - name: 🎨 Code formatting check
        run: pnpm exec ultracite lint

      - name: ⚡ Build diagnostics
        run: node scripts/build-diagnostics.js
        continue-on-error: true

  # Build stage
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [preflight, security-audit, quality-gate]
    if: needs.preflight.outputs.has-changes == 'true'
    strategy:
      matrix:
        app: [web, api, docs]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build ${{ matrix.app }}
        run: pnpm --filter ${{ matrix.app }} build
        env:
          NODE_ENV: production

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.app == 'web'
        with:
          name: build-artifacts-${{ matrix.app }}
          path: |
            apps/${{ matrix.app }}/.next/
            apps/${{ matrix.app }}/out/
          retention-days: 7

  # Test suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [preflight, build]
    if: needs.preflight.outputs.has-changes == 'true' && github.event.inputs.skip_tests != 'true'
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              pnpm exec vitest run --reporter=verbose
              ;;
            integration)
              pnpm exec vitest run --config vitest.config.integration.ts --reporter=verbose
              ;;
            e2e)
              pnpm exec playwright install chromium
              pnpm exec playwright test --reporter=html
              ;;
          esac

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            playwright-report/
            coverage/
          retention-days: 7

  # Deployment stage
  deploy:
    name: 🚀 Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [preflight, security-audit, quality-gate, build, test]
    if: >
      always() && 
      needs.preflight.outputs.should-deploy == 'true' &&
      (needs.security-audit.result == 'success' || needs.security-audit.result == 'skipped') &&
      (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'skipped') &&
      (needs.build.result == 'success' || needs.build.result == 'skipped') &&
      (needs.test.result == 'success' || needs.test.result == 'skipped' || github.event.inputs.skip_tests == 'true')
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref_name == 'main' && 'production' || 'staging') }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ⚙️ Configure deployment environment
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "DEPLOYMENT_ENV=production" >> $GITHUB_ENV
            echo "VERCEL_ENV=production" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_ENV=staging" >> $GITHUB_ENV
            echo "VERCEL_ENV=preview" >> $GITHUB_ENV
          fi

      - name: 🚀 Deploy to Vercel
        id: deploy
        run: |
          npx vercel --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --yes \
            --env NODE_ENV=${{ env.DEPLOYMENT_ENV }} \
            --build-env NODE_ENV=${{ env.DEPLOYMENT_ENV }} \
            ${{ env.VERCEL_ENV == 'production' && '--prod' || '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 📝 Set deployment URL
        run: |
          if [[ "${{ env.VERCEL_ENV }}" == "production" ]]; then
            echo "url=https://neonpro.com.br" >> $GITHUB_OUTPUT
          else
            echo "url=https://staging-neonpro.vercel.app" >> $GITHUB_OUTPUT
          fi

  # Health check and validation
  health-check:
    name: 🩺 Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy]
    if: needs.deploy.result == 'success'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🩺 Basic health check
        run: |
          DEPLOYMENT_URL="${{ needs.deploy.outputs.url }}"
          echo "🌐 Checking health of: $DEPLOYMENT_URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Check if site is responsive
          if curl -f -s --max-time 30 "$DEPLOYMENT_URL" > /dev/null; then
            echo "✅ Health check passed: Site is responsive"
          else
            echo "❌ Health check failed: Site is not responsive"
            exit 1
          fi

      - name: 🔍 Advanced health check
        run: |
          DEPLOYMENT_URL="${{ needs.deploy.outputs.url }}"
          
          # Check if API endpoints are working (if applicable)
          if curl -f -s --max-time 30 "$DEPLOYMENT_URL/api/health" > /dev/null; then
            echo "✅ API health check passed"
          else
            echo "⚠️ API health check skipped or failed (may be expected)"
          fi

      - name: 📊 Performance check
        run: |
          DEPLOYMENT_URL="${{ needs.deploy.outputs.url }}"
          
          # Basic performance check
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$DEPLOYMENT_URL")
          echo "⏱️ Response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME < 3.0" | bc -l) )); then
            echo "✅ Performance check passed"
          else
            echo "⚠️ Performance check warning: Slow response time"
          fi

  # Workflow summary
  workflow-summary:
    name: 📋 Workflow Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [preflight, security-audit, quality-gate, build, test, deploy, health-check]
    steps:
      - name: 📋 Generate summary
        run: |
          echo "## 🚀 NeonPro CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Preflight | ${{ needs.preflight.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | ${{ needs.quality-gate.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ${{ needs.health-check.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "### 🌐 Deployment Information" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: ${{ github.ref_name == 'main' && 'Production' || 'Staging' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: ${{ needs.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Compliance Validations" >> $GITHUB_STEP_SUMMARY
          echo "- ANVISA Healthcare Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- CFM Medical Professional Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- LGPD Data Protection Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- Supabase Database Schema Validation" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success notification
        if: >
          needs.preflight.result == 'success' &&
          (needs.security-audit.result == 'success' || needs.security-audit.result == 'skipped') &&
          (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'skipped') &&
          (needs.build.result == 'success' || needs.build.result == 'skipped') &&
          (needs.test.result == 'success' || needs.test.result == 'skipped') &&
          (needs.deploy.result == 'success' || needs.deploy.result == 'skipped') &&
          (needs.health-check.result == 'success' || needs.health-check.result == 'skipped')
        run: |
          echo "🎉 Pipeline completed successfully!"
          echo "✅ All compliance checks passed"
          echo "✅ Quality gates satisfied" 
          echo "✅ Deployment healthy"

      - name: 💥 Failure notification
        if: >
          needs.preflight.result == 'failure' ||
          needs.security-audit.result == 'failure' ||
          needs.quality-gate.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.deploy.result == 'failure' ||
          needs.health-check.result == 'failure'
        run: |
          echo "💥 Pipeline failed!"
          echo "❌ Check job results above for details"
          exit 1