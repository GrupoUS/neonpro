# 🚀 NeonPro AI Healthcare Platform - CI/CD Pipeline
# Consolidated workflow combining best practices from all source workflows
# Optimized for healthcare compliance (LGPD/ANVISA/CFM) and Turborepo performance

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: ['main', 'develop']
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Optimized concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  NODE_VERSION_MATRIX: '[18, 20]'
  OS_MATRIX: '["ubuntu-latest", "windows-latest"]'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  TURBO_TELEMETRY_DISABLED: 1

# Explicit permissions for security
permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write
  actions: read
  id-token: write

jobs:
  # =============================================================================
  # PHASE 1: PREFLIGHT & VALIDATION
  # =============================================================================
  
  preflight-check:
    name: 🔍 Preflight Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      has-changes: ${{ steps.changes.outputs.src }}
      has-deps-changes: ${{ steps.changes.outputs.deps }}
      matrix-node: ${{ steps.setup.outputs.matrix-node }}
      matrix-os: ${{ steps.setup.outputs.matrix-os }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - 'apps/**'
              - 'packages/**'
              - 'turbo.json'
              - 'package.json'
              - 'pnpm-lock.yaml'
            deps:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'apps/**/package.json'
              - 'packages/**/package.json'

      - name: ⚙️ Setup matrix configuration
        id: setup
        run: |
          echo "matrix-node=${{ env.NODE_VERSION_MATRIX }}" >> $GITHUB_OUTPUT
          echo "matrix-os=${{ env.OS_MATRIX }}" >> $GITHUB_OUTPUT

      - name: 📊 Workflow summary
        run: |
          echo "### 🔍 Preflight Check Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Source changes**: ${{ steps.changes.outputs.src }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency changes**: ${{ steps.changes.outputs.deps }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js versions**: ${{ env.NODE_VERSION_MATRIX }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Operating systems**: ${{ env.OS_MATRIX }}" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # PHASE 2: SECURITY AUDIT & COMPLIANCE
  # =============================================================================

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: preflight-check
    if: needs.preflight-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run dependency audit
        run: pnpm audit --audit-level moderate

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript
          queries: security-and-quality

      - name: 🏗️ Build for CodeQL
        run: pnpm turbo run build --force

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🔒 Semgrep Security Scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/react
          generateSarif: "1"

      - name: 📤 Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # Healthcare compliance validation
  healthcare-compliance:
    name: 🏥 Healthcare Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: preflight-check
    if: needs.preflight-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🇧🇷 LGPD Compliance Check
        run: |
          echo "🔍 Checking LGPD compliance..."
          pnpm turbo run compliance:lgpd --force
          echo "✅ LGPD compliance validated"

      - name: 🏥 ANVISA Compliance Check  
        run: |
          echo "🔍 Checking ANVISA compliance..."
          pnpm turbo run compliance:anvisa --force
          echo "✅ ANVISA compliance validated"

      - name: 👨‍⚕️ CFM Ethics Validation
        run: |
          echo "🔍 Checking CFM ethics compliance..."
          pnpm turbo run compliance:cfm --force
          echo "✅ CFM ethics compliance validated"

  # =============================================================================
  # PHASE 3: QUALITY GATE
  # =============================================================================

  quality-gate:
    name: ⚡ Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [preflight-check, security-audit, healthcare-compliance]
    if: needs.preflight-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎨 Format check
        run: pnpm turbo run format:check --force

      - name: 🔍 Lint check
        run: pnpm turbo run lint --force

      - name: 📝 Type check
        run: pnpm turbo run type-check --force

      - name: 📊 Quality summary
        run: |
          echo "### ⚡ Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code formatting validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linting rules enforced" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ TypeScript types validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Healthcare compliance verified" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # PHASE 4: BUILD (MATRIX)
  # =============================================================================

  build:
    name: 🏗️ Build (${{ matrix.node }}/${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: [preflight-check, quality-gate]
    if: needs.preflight-check.outputs.has-changes == 'true'
    strategy:
      fail-fast: false
      matrix:
        node: ${{ fromJSON(needs.preflight-check.outputs.matrix-node) }}
        os: ${{ fromJSON(needs.preflight-check.outputs.matrix-os) }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build packages
        run: pnpm turbo run build --force
        env:
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}
          TURBO_TEAM: ${{ env.TURBO_TEAM }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node }}-${{ matrix.os }}
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
            !**/node_modules
          retention-days: 1

  # =============================================================================
  # PHASE 5: TEST (MATRIX WITH SHARDING)
  # =============================================================================

  test:
    name: 🧪 Test (${{ matrix.node }}/${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    needs: [preflight-check, build]
    if: needs.preflight-check.outputs.has-changes == 'true' && !inputs.skip_tests
    strategy:
      fail-fast: false
      matrix:
        node: ${{ fromJSON(needs.preflight-check.outputs.matrix-node) }}
        os: ${{ fromJSON(needs.preflight-check.outputs.matrix-os) }}
        shard: [1, 2]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node }}-${{ matrix.os }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests (Shard ${{ matrix.shard }})
        run: pnpm turbo run test --force -- --shard=${{ matrix.shard }}/2
        env:
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}
          TURBO_TEAM: ${{ env.TURBO_TEAM }}

      - name: 📊 Test coverage
        if: matrix.node == 20 && matrix.os == 'ubuntu-latest' && matrix.shard == 1
        run: pnpm turbo run test:coverage --force

      - name: 📤 Upload coverage reports
        if: matrix.node == 20 && matrix.os == 'ubuntu-latest' && matrix.shard == 1
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # E2E tests (separate job for better isolation)
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [preflight-check, build]
    if: needs.preflight-check.outputs.has-changes == 'true' && !inputs.skip_tests
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-20-ubuntu-latest

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: 🧪 Run E2E tests
        run: pnpm turbo run test:e2e --force

      - name: 📤 Upload E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: |
            apps/web/test-results/
            apps/web/playwright-report/
          retention-days: 7

  # Performance testing
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [preflight-check, build]
    if: needs.preflight-check.outputs.has-changes == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-20-ubuntu-latest

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🚀 Start application
        run: |
          pnpm --filter=web start &
          sleep 30

      - name: 🔥 Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.js'
          uploadArtifacts: true

      - name: 📤 Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 7

  # =============================================================================
  # PHASE 6: DEPLOYMENT
  # =============================================================================

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, test-e2e, performance-test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'staging' || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-20-ubuntu-latest

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Run database migrations
        run: pnpm --filter=database migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '--prod' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 💚 Blue-Green Health Check
        run: |
          echo "🔍 Performing health check on ${{ steps.deploy.outputs.url }}"
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.url }}/health" || echo "000")
            if [ "$response" = "200" ]; then
              echo "✅ Health check passed (attempt $i)"
              break
            else
              echo "⏳ Health check failed with status $response (attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "❌ Deployment health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

  # =============================================================================
  # PHASE 7: POST-DEPLOYMENT MONITORING
  # =============================================================================

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: deploy
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: 🔍 Application health check
        run: |
          health_url="${{ needs.deploy.outputs.url || vars.STAGING_URL }}/health"
          echo "🔍 Checking application health at: $health_url"
          
          for i in {1..3}; do
            response=$(curl -s "$health_url" | jq -r '.status // "unhealthy"')
            if [ "$response" = "healthy" ]; then
              echo "✅ Application is healthy"
              break
            else
              echo "⚠️ Application health check failed (attempt $i/3)"
              if [ $i -eq 3 ]; then
                echo "❌ Application is unhealthy after 3 attempts"
                exit 1
              fi
              sleep 15
            fi
          done

      - name: 🔍 Database connectivity check
        run: |
          api_url="${{ needs.deploy.outputs.url || vars.STAGING_URL }}/api/health"
          echo "🔍 Checking database connectivity at: $api_url"
          
          response=$(curl -s "$api_url" | jq -r '.database.status // "disconnected"')
          if [ "$response" = "connected" ]; then
            echo "✅ Database is connected"
          else
            echo "❌ Database connectivity check failed"
            exit 1
          fi

  # Notification and summary
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy, health-check]
    if: always()
    steps:
      - name: 📊 Generate workflow summary
        run: |
          echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security-audit.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: ${{ needs.quality-gate.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test**: ${{ needs.test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy**: ${{ needs.deploy.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health**: ${{ needs.health-check.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY

      - name: 📱 Slack notification
        if: always() && (needs.deploy.result == 'failure' || needs.health-check.result == 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow