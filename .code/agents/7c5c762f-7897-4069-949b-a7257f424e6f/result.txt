I'll analyze the code-quality audit prompt and create a comprehensive plan for refining it. First, let's examine the current prompt file.

Now let's check the supporting documentation to understand the context better.

Let's first analyze the current code-quality audit prompt structure and content in detail.

Let me analyze the gaps in alignment with project development rules and tech stack:

Now let's create workstreams for prompt refinement focusing on clarity and alignment:

Let's identify integration points with other audit assets and documentation:

Now let's develop agent orchestration improvements for multi-agent workflows:

Let's define test coverage guidance updates:

Finally, let's plan coordination updates across supporting docs and tooling:

Based on my analysis of the code-quality audit prompt and supporting documentation, I'll now provide a comprehensive execution plan for refining the prompt to improve clarity, ensure alignment with project-wide development rules, and coordinate updates across supporting docs and tooling.

## Comprehensive Execution Plan for Refining the Code Quality Audit Prompt

### 1. Prompt Structure & Content Improvements

**Key Findings:**
- The current prompt is comprehensive but could benefit from better organization
- Some sections have overlapping content that could be consolidated
- The prompt could be more explicit about integration with the project's TDD methodology

**Action Items:**
- Restructure the document with clearer section hierarchy
- Consolidate overlapping content about agent orchestration
- Add a quick reference section at the beginning for common workflows
- Include visual diagrams to illustrate complex workflows (TDD cycles, agent coordination)

### 2. Alignment with Development Rules & Tech Stack

**Key Findings:**
- The prompt correctly references the project's tech stack (Hono, TanStack Router, Supabase, etc.)
- It appropriately emphasizes healthcare compliance (LGPD) as a priority
- The TDD integration is well-conceptualized but could be more prescriptive

**Action Items:**
- Add explicit references to the project's TypeScript strict mode requirements
- Include specific guidance on using Oxlint and dprint as mentioned in tech stack docs
- Enhance the TDD workflow descriptions with concrete examples from the codebase
- Add specific guidance on healthcare compliance validation that aligns with the tech stack

### 3. Integration with Audit Assets & Documentation

**Key Findings:**
- The prompt references several documentation files but could better integrate with them
- There's an opportunity to create stronger connections with the testing documentation
- The artifact generation section is comprehensive but could be better linked to reporting tools

**Action Items:**
- Create explicit cross-references to `docs/testing/` documentation
- Add integration points with the existing `quality-report.txt` and other artifacts
- Include guidance on how generated reports should be used in the development workflow
- Add references to the documentation orchestrator in `docs/AGENTS.md`

### 4. Agent Orchestration Improvements

**Key Findings:**
- The agent registry is well-defined with clear capabilities
- The orchestration workflows are comprehensive but could be more specific to NeonPro's actual implementation
- The trigger system is well-conceptualized but needs refinement for the specific codebase

**Action Items:**
- Refine agent activation triggers to be more specific to NeonPro's file structure
- Add concrete examples of how agents should coordinate for common NeonPro tasks
- Include error handling patterns for agent failures
- Add guidance on when to use sequential vs. parallel agent execution

### 5. Test Coverage Guidance Updates

**Key Findings:**
- The test coverage policies are well-defined but could be more specific to NeonPro's testing tools
- The TDD integration is good but could include more specific guidance on using Vitest and Playwright
- The quality gates for testing are appropriate but need clearer implementation guidance

**Action Items:**
- Add specific guidance on using Vitest for unit tests and Playwright for E2E tests
- Include examples of test patterns that align with NeonPro's tech stack
- Enhance the coverage policy with specific targets for different parts of the codebase
- Add guidance on mocking strategies using MSW as mentioned in the tech stack

### 6. Coordination Across Supporting Documentation

**Key Findings:**
- The prompt references several documentation files but doesn't fully integrate with them
- There's an opportunity to create consistency with the documentation patterns used elsewhere
- The prompt could better align with the architectural documentation in `source-tree.md`

**Action Items:**
- Update references to ensure consistency with `docs/architecture/source-tree.md`
- Align the agent coordination patterns with those described in `docs/AGENTS.md`
- Ensure terminology is consistent with `docs/architecture/tech-stack.md`
- Create a documentation update plan to keep all related docs in sync

### 7. Implementation Roadmap

1. **Phase 1: Structure & Clarity Improvements** (1-2 days)
   - Restructure the document for better readability
   - Add quick reference section
   - Improve visual elements

2. **Phase 2: Technical Alignment** (2-3 days)
   - Refine tech stack alignment
   - Enhance TDD workflow descriptions
   - Improve healthcare compliance guidance

3. **Phase 3: Integration & Orchestration** (3-4 days)
   - Improve agent coordination workflows
   - Enhance test coverage guidance
   - Strengthen documentation integration

4. **Phase 4: Review & Refinement** (1-2 days)
   - Review with team members
   - Make final adjustments
   - Update supporting documentation

This plan ensures the code quality audit prompt becomes a more effective tool for maintaining code quality while staying aligned with NeonPro's specific development practices and technical requirements.
