{
  "name": "Task Generation",
  "version": "1.0.0",
  "description": "Generate atomic, executable tasks from a completed PRD and Implementation Plan",
  "category": "development",
  "complexity": "medium",
  "mcp_tools": ["archon", "serena"],
  "input_resolution": {
    "priority": [
      "archon_prd_id",
      "archon_plan_id",
      "prd_content",
      "plan_content"
    ],
    "feature_dir_discovery": {
      "script": "scripts/check-task-prerequisites.sh --json",
      "outputs": ["FEATURE_DIR", "AVAILABLE_DOCS"]
    }
  },
  "plan_section_mapping": {
    "Summary": {
      "purpose": "Derive feature name + top-level objective",
      "failure_condition": "Empty → error"
    },
    "Technical Context": {
      "purpose": "Determine languages, deps, testing stack; identify remaining NEEDS CLARIFICATION",
      "failure_condition": "Any 'NEEDS CLARIFICATION' unresolved → abort"
    },
    "Constitution Check": {
      "purpose": "Enumerate architectural/testing/observability/versioning commitments → create explicit tasks",
      "failure_condition": "Missing PASS gates → abort"
    },
    "Project Structure / Structure Decision": {
      "purpose": "Select pathing strategy (single/web/mobile)",
      "failure_condition": "Unsupported structure token → abort"
    },
    "Phase 0 Research": {
      "purpose": "Provide evidence that unknowns resolved; map decisions to rationale",
      "failure_condition": "Missing decisions for prior unknowns → abort"
    },
    "Phase 1 Design": {
      "purpose": "Source for contract tests, model entities, integration scenarios",
      "failure_condition": "Absent required doc(s) → abort"
    },
    "Complexity Tracking": {
      "purpose": "If rows exist → emit mitigation tasks & tag complexity flag",
      "failure_condition": "Table present but no mitigation tasks produced"
    },
    "Progress Tracking": {
      "purpose": "Validate Phase 0 + 1 complete & both Constitution gates PASS before generating tasks",
      "failure_condition": "Any required phase unchecked → abort"
    }
  },
  "mandatory_pre_reads": [
    "templates/tasks-template.md",
    ".github/prompts/tasks.prompt.md",
    "docs/architecture/source-tree.md",
    "docs/architecture/tech-stack.md",
    "docs/AGENTS.md"
  ],
  "gates_and_constitutional_enforcement": {
    "validation_checks": [
      {
        "check": "Progress Tracking: Phase 0: Research complete",
        "required": "checked"
      },
      {
        "check": "Progress Tracking: Phase 1: Design complete",
        "required": "checked"
      },
      {
        "check": "Gate Status: Initial Constitution Check: PASS",
        "required": "PASS"
      },
      {
        "check": "Gate Status: Post-Design Constitution Check: PASS",
        "required": "PASS"
      },
      {
        "check": "No remaining tokens 'NEEDS CLARIFICATION' in Technical Context or Research",
        "required": true
      },
      {
        "check": "At least one contract spec present (contracts/*)",
        "required": true
      },
      {
        "check": "data-model.md exists",
        "required": true
      }
    ],
    "error_response": {
      "type": "structured_error",
      "format": {
        "error": {
          "code": "GATE_FAILURE",
          "details": {
            "missing": ["list of failed predicates"]
          }
        }
      }
    },
    "commitments_mapping": {
      "Testing commitments": "tasks for RED first: contract tests, integration tests, then implementation",
      "Observability commitments": "structured logging setup (API + Frontend) tasks",
      "Versioning commitments": "version bump + CHANGELOG/update tasks",
      "Architecture commitments": "tasks to enforce library boundaries / imports audit",
      "Simplicity commitments": "tasks to remove unnecessary abstractions if flagged"
    }
  },
  "task_generation_rules": {
    "tdd_enforcement": "All tests written first and MUST FAIL before implementation",
    "contract_coverage": "Every endpoint in contracts/ has a preceding contract test task",
    "model_coverage": "Every entity in data-model.md has a model creation task marked [P]",
    "scenario_coverage": "Every PRD user scenario → integration test task (RED first)",
    "endpoint_implementation": "Endpoint implementation tasks follow their tests (no [P] if same file touched)",
    "ordering_rules": [
      "Setup before everything",
      "Tests before implementation (TDD)",
      "Models before services",
      "Services before endpoints",
      "Core before integration",
      "Everything before polish"
    ],
    "parallelization": {
      "rule": "Different files only; same-file sequences are not [P]",
      "marker": "[P]",
      "guidance": "Group [P] tasks that can run together and show actual Task agent commands"
    },
    "pathing": {
      "requirement": "Include exact repo file paths per docs/architecture/source-tree.md",
      "acceptance_criteria": "Concrete, verifiable, tied to PRD FRs"
    }
  },
  "cross_references": {
    "requirement": "Every task should reference relevant PRD FR‑IDs and Plan sections",
    "compliance": "Include compliance checkpoints where healthcare data is involved (LGPD/ANVISA/CFM)"
  },
  "output_structure": {
    "file": "FEATURE_DIR/tasks.md",
    "template": "templates/tasks-template.md",
    "content": {
      "title": "# Tasks: <FEATURE NAME>",
      "prereqs": "Prereqs and execution flow (condensed)",
      "tasks": "Numbered tasks (T001, T002, ...)",
      "dependencies": "Dependency notes",
      "parallel_execution": "Parallel execution guidance"
    }
  },
  "validation_checklist": {
    "auto_review": true,
    "criteria": [
      {
        "id": 1,
        "name": "Contract Coverage",
        "requirement": "Every endpoint in contracts/ has a preceding contract test task",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 2,
        "name": "Model Coverage",
        "requirement": "Every entity in data-model.md has a model creation + validation test task",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 3,
        "name": "Scenario Coverage",
        "requirement": "Every PRD user scenario → integration test task (RED first)",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 4,
        "name": "TDD Order",
        "requirement": "No implementation task appears before all its prerequisite test tasks",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 5,
        "name": "Parallel Safety",
        "requirement": "All [P] tasks operate on disjoint file paths",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 6,
        "name": "Acceptance Criteria",
        "requirement": "Each task lists ≥1 explicit, testable criterion",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 7,
        "name": "Constitution Commitments",
        "requirement": "For each commitment category at least one task enforces it",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 8,
        "name": "Gates Passed",
        "requirement": "Both Constitution gates in plan.md are PASS",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 9,
        "name": "No Unknowns",
        "requirement": "Zero remaining 'NEEDS CLARIFICATION' tokens",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 10,
        "name": "Complexity Mitigation",
        "requirement": "For every row in Complexity Tracking table, a matching mitigation task exists",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 11,
        "name": "Structure Consistency",
        "requirement": "All task paths align with the resolved Structure Decision",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 12,
        "name": "Compliance",
        "requirement": "Any task touching PHI/PII includes LGPD/ANVISA acceptance criteria note",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 13,
        "name": "Versioning",
        "requirement": "If version bump required (commitment), a task updates version + changelog",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 14,
        "name": "Observability",
        "requirement": "Logging / tracing setup tasks exist for new code areas",
        "failure": "abort with VALIDATION_FAILED"
      },
      {
        "id": 15,
        "name": "JSON Summary Integrity",
        "requirement": "Summary arrays lengths match number of tasks & IDs sequential (T001..Tnn)",
        "failure": "abort with VALIDATION_FAILED"
      }
    ]
  },
  "structure_decision_logic": {
    "source": "Parse 'Structure Decision:' line from plan.md",
    "mapping": {
      "single": "Use package/service layering inside monorepo packages if applicable",
      "web": "Use apps/api/src & apps/web/src separation; tests mirrored per app",
      "mobile": "Ensure api + platform dir; abort if platform dirs missing"
    },
    "validation": {
      "structure_mismatch": {
        "condition": "Detected structure conflicts with actual repo layout (missing directories)",
        "response": "raise error STRUCTURE_MISMATCH"
      },
      "path_consistency": {
        "requirement": "All task paths must reflect chosen structure",
        "examples": {
          "single": "Model tasks in packages/core-services/src/services",
          "web": "Model tasks in apps/api/src/services"
        }
      }
    }
  },
  "parallelization_guidance": {
    "rule": "Group [P] tasks by different files and no dependency edges",
    "example": "Provide a short example group to help executors run them concurrently"
  },
  "extra_task_categories": {
    "observability": {
      "description": "Logging/tracing setup, log routing, error context enrichment"
    },
    "versioning": {
      "description": "Bump version + changelog + migration notes (if breaking)"
    },
    "complexity_mitigation": {
      "description": "One task per Complexity Tracking violation row"
    },
    "architecture_enforcement": {
      "description": "Import boundary audit, removal of unused abstractions"
    },
    "simplicity_cleanup": {
      "description": "Eliminate premature patterns flagged"
    }
  },
  "machine_readable_summary": {
    "format": "json",
    "structure": {
      "feature_dir": "specs/001-feature-name",
      "structure_decision": "web|single|mobile",
      "constitution_status": {
        "initial_gate": "PASS",
        "post_design_gate": "PASS"
      },
      "unresolved_clarifications": 0,
      "complexity_items": [
        {
          "violation": "4th project",
          "mitigation_task": "T012"
        }
      ],
      "tasks": [
        {
          "id": "T001",
          "title": "Setup project tooling [P]",
          "path": "apps/api/",
          "depends_on": [],
          "acceptance": ["lint, type-check scripts run successfully"],
          "artifacts": ["package.json scripts updated"],
          "refs": {
            "prd": ["FR-001"],
            "plan": ["Technical Context"],
            "complexity": [],
            "constitution": ["Testing"]
          }
        }
      ],
      "policy": {
        "tdd_order": true,
        "parallelization": true
      },
      "archon": {
        "project_id": null,
        "tasks_created": 0
      }
    }
  },
  "task_content_requirements": {
    "purpose": "Purpose and rationale (1–2 lines)",
    "inputs": "Contract/data-model/plan references",
    "paths": "Path(s) to modify/create (absolute or from repo root)",
    "acceptance_criteria": "Explicit, testable",
    "artifacts": "Files generated/updated"
  },
  "archon_integration": {
    "optional": true,
    "task_creation": {
      "conditions": "If an Archon project_id is available",
      "metadata": {
        "title": "task title",
        "description": "Include purpose, inputs, outputs, acceptance",
        "feature": "feature name",
        "sources": "Links to PRD/Plan Archon docs and repo paths"
      }
    }
  },
  "completion_criteria": {
    "tasks_md": "Created with ≥25 high-quality tasks (or appropriate to scope)",
    "tdd_ordering": "Verified; no implementation before tests",
    "dependencies": "Explicit and [P] markers correct",
    "paths": "Concrete and acceptance criteria present",
    "archon_tasks": "Tasks created in Archon with proper metadata and links (optional)"
  }
}
