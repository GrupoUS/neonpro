{
  "name": "Code Quality Audit",
  "version": "1.0.0",
  "description": "Comprehensive code quality and integration audit for NeonPro healthcare platform",
  "category": "development",
  "complexity": "high",
  "mcp_tools": ["sequential-thinking", "archon", "serena", "desktop-commander", "supabase"],
  "execution_phases": [
    {
      "phase": 1,
      "name": "Backend↔Database Integration",
      "description": "Validate Prisma schema, database structure, and API–DB contracts",
      "steps": [
        {
          "step": 1.1,
          "name": "Schema & Client Checks",
          "tool": "desktop-commander",
          "commands": [
            "pnpm --filter @neonpro/api prisma:generate",
            "pnpm --filter @neonpro/api build"
          ],
          "validation": "API builds successfully; Prisma client generates"
        },
        {
          "step": 1.2,
          "name": "Database Structure & RLS Signals",
          "tool": "supabase",
          "actions": [
            "List tables and policies",
            "Verify RLS enabled on sensitive tables",
            "Check FKs and enums consistency"
          ],
          "validation": "RLS policies active; snake_case DB vs camelCase mapping consistent"
        },
        {
          "step": 1.3,
          "name": "API–DB Contract",
          "tool": "serena",
          "actions": [
            "Scan Hono routes for field names in queries",
            "Ensure error handling covers DB errors and RLS denials",
            "Verify multi-tenant scoping in patient/clinic queries"
          ],
          "validation": "Tenant isolation enforced; error handling comprehensive"
        }
      ],
      "quality_gate": "Backend/DB integration blocking issues resolved",
      "exit_criteria": ["API builds green", "No schema/field errors", "RLS policies verified"]
    },
    {
      "phase": 2,
      "name": "LGPD & Healthcare Security",
      "description": "Validate healthcare compliance and security requirements",
      "steps": [
        {
          "step": 2.1,
          "name": "Consent Validation",
          "tool": "serena",
          "actions": [
            "Check consent validation on routes touching PHI/PII",
            "Verify audit trails for read/write operations",
            "Validate data retention and deletion logic"
          ],
          "validation": "Consent checks present on PHI routes; audit logs exist"
        },
        {
          "step": 2.2,
          "name": "RLS Integration",
          "tool": "supabase",
          "actions": [
            "Verify policies active for patient/clinic tables",
            "Ensure user context propagates to DB queries",
            "Test tenant isolation"
          ],
          "validation": "Queries enforce tenant + role context; no cross-tenant leakage"
        },
        {
          "step": 2.3,
          "name": "Security Checks",
          "tool": "serena",
          "actions": [
            "Verify no PHI in logs or test fixtures",
            "Check TLS in transit and encrypted storage",
            "Validate emergency access protocols"
          ],
          "validation": "PHI redacted; security protocols documented"
        }
      ],
      "quality_gate": "LGPD compliance blocking issues resolved",
      "exit_criteria": ["Consent checks present", "Audit logs pass review", "RLS verified"]
    },
    {
      "phase": 3,
      "name": "Code Quality & Build Checks",
      "description": "Execute code quality validation and build processes",
      "steps": [
        {
          "step": 3.1,
          "name": "TypeScript Type Check",
          "tool": "desktop-commander",
          "commands": [
            "pnpm --filter ./ type-check"
          ],
          "validation": "Strict TypeScript type checking passes"
        },
        {
          "step": 3.2,
          "name": "Linting",
          "tool": "desktop-commander",
          "commands": [
            "pnpm --filter @neonpro/api lint",
            "pnpm --filter @neonpro/web lint"
          ],
          "validation": "Oxlint: 0 errors (<100 warnings)"
        },
        {
          "step": 3.3,
          "name": "Formatting",
          "tool": "desktop-commander",
          "commands": [
            "pnpm --filter @neonpro/api format",
            "pnpm --filter @neonpro/web format"
          ],
          "validation": "Code properly formatted"
        },
        {
          "step": 3.4,
          "name": "Security Advisory Scan",
          "tool": "desktop-commander",
          "commands": [
            "pnpm audit --json > audit-report.json || true"
          ],
          "validation": "No critical security vulnerabilities"
        }
      ],
      "quality_gate": "Code quality standards met",
      "exit_criteria": ["Type check passes", "Lint errors: 0", "No critical security issues"]
    },
    {
      "phase": 4,
      "name": "Intelligent Test Orchestration",
      "description": "Auto-select and execute tests based on change surface",
      "steps": [
        {
          "step": 4.1,
          "name": "Change Surface Analysis",
          "tool": "serena",
          "actions": [
            "Analyze changed files from git diff",
            "Map changes to test strategies based on source-tree roles",
            "Identify integration issues"
          ],
          "validation": "Change surface mapped to test strategies"
        },
        {
          "step": 4.2,
          "name": "Test Execution",
          "tool": "desktop-commander",
          "commands": [
            "pnpm --filter @neonpro/api test",
            "pnpm --filter @neonpro/web test",
            "pnpm --filter @neonpro/web e2e"
          ],
          "validation": "Tests pass with required coverage (Critical ≥95%, Important ≥85%, Useful ≥75%)"
        }
      ],
      "quality_gate": "Test coverage and success criteria met",
      "exit_criteria": ["All tests pass", "Coverage requirements met", "Integration tests successful"]
    },
    {
      "phase": 5,
      "name": "Systematic Fixing",
      "description": "Address issues found in previous phases with priority",
      "steps": [
        {
          "step": 5.1,
          "name": "P0 - Integration Blockers",
          "priority": "critical",
          "actions": [
            "Fix DB mismatches (naming/relations)",
            "Resolve RLS bypass risks",
            "Fix API field errors and missing tenant/role scoping"
          ],
          "validation": "Integration blockers resolved"
        },
        {
          "step": 5.2,
          "name": "P1 - Security & Compliance",
          "priority": "high",
          "actions": [
            "Address no-eval, safe fetch options, URL safety",
            "Ensure PHI redaction and audit logs for sensitive ops"
          ],
          "validation": "Security and compliance issues resolved"
        },
        {
          "step": 5.3,
          "name": "P2 - Type Safety & Contracts",
          "priority": "medium",
          "actions": [
            "Replace 'any' with 'unknown'/specific types",
            "Align response types and zod schemas with routes"
          ],
          "validation": "Type safety improved; contracts aligned"
        },
        {
          "step": 5.4,
          "name": "P3 - Module & Hygiene",
          "priority": "low",
          "actions": [
            "Fix ES module imports",
            "Remove dead code",
            "Optimize queries and error handling"
          ],
          "validation": "Code hygiene improved"
        }
      ],
      "quality_gate": "All prioritized issues addressed",
      "exit_criteria": ["P0 issues resolved", "P1 issues resolved", "P2/P3 issues addressed as time permits"]
    },
    {
      "phase": 6,
      "name": "Quality Gates",
      "description": "Final validation gates before completion",
      "gates": [
        {
          "gate": "Gate 0 - Backend/DB",
          "status": "blocking",
          "criteria": [
            "API builds green",
            "Prisma client generates",
            "No schema/field errors",
            "RLS policies verified"
          ]
        },
        {
          "gate": "Gate 1 - LGPD",
          "status": "blocking",
          "criteria": [
            "Consent checks present on PHI routes",
            "Audit logs exist and pass review"
          ]
        },
        {
          "gate": "Gate 2 - RLS",
          "status": "blocking",
          "criteria": [
            "Queries enforce tenant + role context",
            "No cross-tenant leakage in tests"
          ]
        },
        {
          "gate": "Gate 3 - Lint/Types/Security",
          "status": "blocking",
          "criteria": [
            "Oxlint: 0 errors (<100 warnings)",
            "pnpm type-check passes",
            "pnpm audit has 0 criticals"
          ]
        }
      ],
      "exit_criteria": ["All blocking gates pass", "Quality reports generated", "Archon tasks updated"]
    }
  ],
  "artifacts": {
    "reports": [
      "quality-report.txt",
      "security-report.json",
      "audit-report.json"
    ],
    "logs": "cleanup-logs/",
    "archon_updates": true
  },
  "success_criteria": {
    "functionality": "All requirements met, existing functionality preserved",
    "security": "No vulnerabilities introduced, compliance maintained",
    "performance": "No degradation in critical paths",
    "maintainability": "Code is readable, well-structured, properly documented",
    "test_coverage": "Maintained or improved (≥90% for critical components)"
  },
  "vscode_tasks": [
    "🏛️ Constitutional Audit - Quick",
    "🏛️ Constitutional Audit - Full",
    "📈 Performance Benchmark",
    "🏥 Healthcare Compliance Check"
  ],
  "cli_fallbacks": [
    "pnpm quality:full",
    "pnpm workflow:ci",
    "pnpm constitutional:quick",
    "pnpm constitutional:full",
    "pnpm constitutional:benchmark"
  ]
}
