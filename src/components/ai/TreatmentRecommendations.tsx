"use client";

// NEONPRO AI Treatment Recommendations Component
// Phase 7 AI Integration - Streaming UI Component for Treatment Suggestions
// Generated by VIBECODE SYSTEM V4.0 - AI Integration

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import type { GenerateRecommendationInput } from "@/lib/actions/ai-treatments";
import {
  generateTreatmentRecommendation,
  updateRecommendationWithResult,
} from "@/lib/actions/ai-treatments";
import {
  AlertCircle,
  CheckCircle,
  Clock,
  Loader2,
  Sparkles,
} from "lucide-react";
import { useState } from "react";

interface TreatmentRecommendationsProps {
  patientId: string;
  clinicId: string;
  patientName?: string;
  onRecommendationGenerated?: (recommendation: any) => void;
}

interface StreamingState {
  isStreaming: boolean;
  content: string;
  isComplete: boolean;
  error?: string;
}

export default function TreatmentRecommendations({
  patientId,
  clinicId,
  patientName,
  onRecommendationGenerated,
}: TreatmentRecommendationsProps) {
  const [formData, setFormData] = useState<
    Partial<GenerateRecommendationInput>
  >({
    patient_id: patientId,
    clinic_id: clinicId,
    aesthetic_goals: "",
    current_concerns: "",
    budget_range: "",
    timeline_preference: "",
    previous_treatments: [],
    medical_conditions: "",
    allergies: "",
  });

  const [streamingState, setStreamingState] = useState<StreamingState>({
    isStreaming: false,
    content: "",
    isComplete: false,
  });

  const [currentRecommendationId, setCurrentRecommendationId] = useState<
    string | null
  >(null);

  const handleInputChange = (
    field: keyof GenerateRecommendationInput,
    value: any
  ) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleGenerateRecommendation = async () => {
    if (!formData.aesthetic_goals?.trim()) {
      alert("Please describe the aesthetic goals");
      return;
    }

    setStreamingState({
      isStreaming: true,
      content: "",
      isComplete: false,
    });

    try {
      const result = await generateTreatmentRecommendation(
        formData as GenerateRecommendationInput
      );

      if (!result.success) {
        throw new Error(result.error);
      }

      setCurrentRecommendationId(result.recommendation?.id || null);

      // Handle streaming response
      if (result.stream) {
        const reader = result.stream.getReader();
        let fullContent = "";

        try {
          while (true) {
            const { done, value } = await reader.read();

            if (done) {
              setStreamingState((prev) => ({
                ...prev,
                isStreaming: false,
                isComplete: true,
              }));

              // Update recommendation with full content
              if (result.recommendation?.id) {
                await updateRecommendationWithResult(
                  result.recommendation.id,
                  fullContent,
                  {
                    content: fullContent,
                    generated_at: new Date().toISOString(),
                  }
                );
              }

              if (onRecommendationGenerated) {
                onRecommendationGenerated(result.recommendation);
              }
              break;
            }

            const chunk = new TextDecoder().decode(value as Uint8Array);
            fullContent += chunk;

            setStreamingState((prev) => ({
              ...prev,
              content: fullContent,
            }));
          }
        } finally {
          reader.releaseLock();
        }
      }
    } catch (error) {
      console.error("Error generating recommendation:", error);
      setStreamingState({
        isStreaming: false,
        content: "",
        isComplete: false,
        error:
          error instanceof Error
            ? error.message
            : "Failed to generate recommendation",
      });
    }
  };

  const formatStreamingContent = (content: string) => {
    // Simple formatting for streaming content
    return content.split("\n").map((line, index) => {
      if (line.startsWith("##")) {
        return (
          <h3
            key={index}
            className="text-lg font-semibold mt-4 mb-2 text-blue-600"
          >
            {line.replace("##", "").trim()}
          </h3>
        );
      }
      if (line.startsWith("#")) {
        return (
          <h2 key={index} className="text-xl font-bold mt-6 mb-3 text-blue-700">
            {line.replace("#", "").trim()}
          </h2>
        );
      }
      if (line.startsWith("**") && line.endsWith("**")) {
        return (
          <p key={index} className="font-semibold mt-3 mb-1">
            {line.replace(/\*\*/g, "")}
          </p>
        );
      }
      if (line.startsWith("- ")) {
        return (
          <li key={index} className="ml-4 mb-1">
            {line.replace("- ", "")}
          </li>
        );
      }
      if (line.trim()) {
        return (
          <p key={index} className="mb-2 leading-relaxed">
            {line}
          </p>
        );
      }
      return <br key={index} />;
    });
  };

  return (
    <div className="space-y-6">
      {/* Input Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-blue-600" />
            AI Treatment Recommendations
          </CardTitle>
          <CardDescription>
            Generate personalized treatment recommendations for{" "}
            {patientName || "patient"} using AI analysis
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="aesthetic_goals">Aesthetic Goals *</Label>
              <Textarea
                id="aesthetic_goals"
                placeholder="Describe the patient's aesthetic goals and desired outcomes..."
                value={formData.aesthetic_goals || ""}
                onChange={(e) =>
                  handleInputChange("aesthetic_goals", e.target.value)
                }
                className="min-h-[100px]"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="current_concerns">Current Concerns</Label>
              <Textarea
                id="current_concerns"
                placeholder="Specific areas of concern or issues to address..."
                value={formData.current_concerns || ""}
                onChange={(e) =>
                  handleInputChange("current_concerns", e.target.value)
                }
                className="min-h-[100px]"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="budget_range">Budget Range</Label>
              <Select
                onValueChange={(value) =>
                  handleInputChange("budget_range", value)
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select budget range" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="under-1000">Under R$ 1,000</SelectItem>
                  <SelectItem value="1000-3000">R$ 1,000 - R$ 3,000</SelectItem>
                  <SelectItem value="3000-5000">R$ 3,000 - R$ 5,000</SelectItem>
                  <SelectItem value="5000-10000">
                    R$ 5,000 - R$ 10,000
                  </SelectItem>
                  <SelectItem value="over-10000">Over R$ 10,000</SelectItem>
                  <SelectItem value="flexible">Flexible</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="timeline_preference">Timeline Preference</Label>
              <Select
                onValueChange={(value) =>
                  handleInputChange("timeline_preference", value)
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select timeline" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="immediate">
                    Immediate (within 1 month)
                  </SelectItem>
                  <SelectItem value="short-term">
                    Short-term (1-3 months)
                  </SelectItem>
                  <SelectItem value="medium-term">
                    Medium-term (3-6 months)
                  </SelectItem>
                  <SelectItem value="long-term">
                    Long-term (6+ months)
                  </SelectItem>
                  <SelectItem value="flexible">Flexible</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="medical_conditions">
                Additional Medical Conditions
              </Label>
              <Input
                id="medical_conditions"
                placeholder="Any relevant medical conditions..."
                value={formData.medical_conditions || ""}
                onChange={(e) =>
                  handleInputChange("medical_conditions", e.target.value)
                }
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="allergies">Additional Allergies</Label>
              <Input
                id="allergies"
                placeholder="Any known allergies..."
                value={formData.allergies || ""}
                onChange={(e) => handleInputChange("allergies", e.target.value)}
              />
            </div>
          </div>

          <Button
            onClick={handleGenerateRecommendation}
            disabled={
              streamingState.isStreaming || !formData.aesthetic_goals?.trim()
            }
            className="w-full"
          >
            {streamingState.isStreaming ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating Recommendations...
              </>
            ) : (
              <>
                <Sparkles className="mr-2 h-4 w-4" />
                Generate AI Recommendations
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Streaming Results */}
      {(streamingState.content || streamingState.error) && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {streamingState.isComplete ? (
                <CheckCircle className="h-5 w-5 text-green-600" />
              ) : streamingState.error ? (
                <AlertCircle className="h-5 w-5 text-red-600" />
              ) : (
                <Clock className="h-5 w-5 text-blue-600 animate-pulse" />
              )}
              Treatment Recommendations
              {streamingState.isStreaming && (
                <Badge variant="secondary" className="ml-auto">
                  <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                  Generating...
                </Badge>
              )}
              {streamingState.isComplete && (
                <Badge variant="default" className="ml-auto bg-green-600">
                  Complete
                </Badge>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {streamingState.error ? (
              <div className="text-red-600 p-4 bg-red-50 rounded-lg">
                <p className="font-semibold">
                  Error generating recommendations:
                </p>
                <p>{streamingState.error}</p>
              </div>
            ) : (
              <div className="prose prose-sm max-w-none">
                {formatStreamingContent(streamingState.content)}
                {streamingState.isStreaming && (
                  <div className="inline-block w-2 h-4 bg-blue-600 animate-pulse ml-1"></div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
