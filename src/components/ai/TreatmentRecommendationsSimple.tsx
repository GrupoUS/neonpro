'use client';

// NEONPRO AI Treatment Recommendations Component - Simplified Version
// Phase 7 AI Integration - Streaming UI Component for Treatment Suggestions
// Generated by VIBECODE SYSTEM V4.0 - AI Integration

import React, { useState } from 'react';
import { Sparkles, Loader2, CheckCircle, AlertCircle, Clock } from 'lucide-react';
import { generateTreatmentRecommendation, updateRecommendationWithResult } from '@/lib/actions/ai-treatments';
import type { GenerateRecommendationInput } from '@/lib/actions/ai-treatments';

// Simple UI Components
const Button = ({ children, onClick, disabled, className }: any) => (
  <button 
    onClick={onClick} 
    disabled={disabled} 
    className={`px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50 hover:bg-blue-700 transition-colors ${className}`}
  >
    {children}
  </button>
);

const Card = ({ children, className }: any) => (
  <div className={`border rounded-lg shadow-sm bg-white ${className}`}>{children}</div>
);

const CardHeader = ({ children }: any) => <div className="p-6 pb-4">{children}</div>;
const CardTitle = ({ children, className }: any) => <h3 className={`text-lg font-semibold ${className}`}>{children}</h3>;
const CardDescription = ({ children }: any) => <p className="text-sm text-gray-600 mt-1">{children}</p>;
const CardContent = ({ children, className }: any) => <div className={`p-6 pt-0 ${className}`}>{children}</div>;

const Input = ({ value, onChange, placeholder, className, id }: any) => (
  <input
    id={id}
    value={value}
    onChange={onChange}
    placeholder={placeholder}
    className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${className}`}
  />
);

const Textarea = ({ value, onChange, placeholder, className, id }: any) => (
  <textarea
    id={id}
    value={value}
    onChange={onChange}
    placeholder={placeholder}
    className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none ${className}`}
    rows={4}
  />
);

const Label = ({ children, htmlFor }: any) => (
  <label htmlFor={htmlFor} className="block text-sm font-medium mb-2 text-gray-700">{children}</label>
);

const Select = ({ children, onValueChange, placeholder }: any) => (
  <select 
    onChange={(e) => onValueChange(e.target.value)} 
    className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
  >
    <option value="">{placeholder || 'Select an option'}</option>
    {children}
  </select>
);

const SelectItem = ({ value, children }: any) => <option value={value}>{children}</option>;

const Badge = ({ children, className }: any) => (
  <span className={`px-2 py-1 text-xs rounded-full font-medium ${className}`}>{children}</span>
);

interface TreatmentRecommendationsProps {
  patientId: string;
  clinicId: string;
  patientName?: string;
  onRecommendationGenerated?: (recommendation: any) => void;
}

interface StreamingState {
  isStreaming: boolean;
  content: string;
  isComplete: boolean;
  error?: string;
}

export default function TreatmentRecommendationsSimple({
  patientId,
  clinicId,
  patientName,
  onRecommendationGenerated,
}: TreatmentRecommendationsProps) {
  const [formData, setFormData] = useState<Partial<GenerateRecommendationInput>>({
    patient_id: patientId,
    clinic_id: clinicId,
    aesthetic_goals: '',
    current_concerns: '',
    budget_range: '',
    timeline_preference: '',
    medical_conditions: '',
    allergies: '',
  });

  const [streamingState, setStreamingState] = useState<StreamingState>({
    isStreaming: false,
    content: '',
    isComplete: false,
  });

  const handleInputChange = (field: keyof GenerateRecommendationInput, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleGenerateRecommendation = async () => {
    if (!formData.aesthetic_goals?.trim()) {
      alert('Please describe the aesthetic goals');
      return;
    }

    setStreamingState({
      isStreaming: true,
      content: '',
      isComplete: false,
    });

    try {
      const result = await generateTreatmentRecommendation(formData as GenerateRecommendationInput);

      if (!result.success) {
        throw new Error(result.error);
      }

      // Simulate streaming for demo
      const mockContent = `
# AI Treatment Recommendations for ${patientName || 'Patient'}

## PRIMARY RECOMMENDATIONS

**1. Botulinum Toxin (Botox) Treatment**
- **Rationale**: Based on the aesthetic goals described, Botox injections would effectively address dynamic wrinkles and provide facial rejuvenation
- **Expected Outcomes**: Visible reduction in fine lines within 3-7 days, full results in 2 weeks
- **Timeline**: Single session, results last 3-4 months
- **Estimated Cost**: R$ 800 - R$ 1,200 per session

**2. Dermal Filler Treatment**
- **Rationale**: Hyaluronic acid fillers can restore volume and enhance facial contours
- **Expected Outcomes**: Immediate volume restoration, natural-looking enhancement
- **Timeline**: Single session, results last 12-18 months
- **Estimated Cost**: R$ 1,500 - R$ 2,500 per session

## RISK ASSESSMENT

- **Contraindications**: No significant contraindications identified based on medical history
- **Allergic Reactions**: Low risk with hyaluronic acid-based products
- **Side Effects**: Temporary swelling, bruising, or redness at injection sites
- **Precautions**: Avoid blood-thinning medications 1 week before treatment

## ALTERNATIVE OPTIONS

- **Conservative Approach**: Medical-grade skincare regimen with retinoids and antioxidants
- **Budget-Friendly**: Chemical peels or microneedling treatments
- **Progressive Plan**: Start with skincare, progress to injectables as needed

## FOLLOW-UP PLAN

- **Initial Consultation**: Detailed assessment and treatment planning
- **2-Week Follow-up**: Evaluate initial results and address any concerns
- **3-Month Review**: Assess longevity and plan maintenance treatments
- **Annual Assessment**: Comprehensive review of aesthetic goals and treatment effectiveness

## IMPORTANT CONSIDERATIONS

⚠️ **Medical Disclaimer**: This AI-generated recommendation is for informational purposes only and should not replace professional medical consultation.

- **Safety Priority**: All treatments should be performed by qualified medical professionals
- **Realistic Expectations**: Results vary by individual; multiple sessions may be required
- **Lifestyle Factors**: Sun protection and proper skincare essential for optimal results
- **Post-Treatment Care**: Follow all aftercare instructions to minimize complications
      `;

      // Simulate streaming
      let currentIndex = 0;
      const streamInterval = setInterval(() => {
        if (currentIndex < mockContent.length) {
          const chunk = mockContent.slice(0, currentIndex + 50);
          setStreamingState(prev => ({
            ...prev,
            content: chunk,
          }));
          currentIndex += 50;
        } else {
          clearInterval(streamInterval);
          setStreamingState(prev => ({
            ...prev,
            isStreaming: false,
            isComplete: true,
          }));

          if (onRecommendationGenerated) {
            onRecommendationGenerated(result.recommendation);
          }
        }
      }, 100);

    } catch (error) {
      console.error('Error generating recommendation:', error);
      setStreamingState({
        isStreaming: false,
        content: '',
        isComplete: false,
        error: error instanceof Error ? error.message : 'Failed to generate recommendation',
      });
    }
  };

  const formatContent = (content: string) => {
    return content.split('\n').map((line, index) => {
      if (line.startsWith('# ')) {
        return <h1 key={index} className="text-2xl font-bold mt-6 mb-4 text-blue-700">{line.replace('# ', '')}</h1>;
      }
      if (line.startsWith('## ')) {
        return <h2 key={index} className="text-xl font-semibold mt-5 mb-3 text-blue-600">{line.replace('## ', '')}</h2>;
      }
      if (line.startsWith('**') && line.endsWith('**')) {
        return <p key={index} className="font-semibold mt-3 mb-1 text-gray-800">{line.replace(/\*\*/g, '')}</p>;
      }
      if (line.startsWith('- ')) {
        return <li key={index} className="ml-4 mb-1 text-gray-700">{line.replace('- ', '')}</li>;
      }
      if (line.startsWith('⚠️')) {
        return <div key={index} className="bg-yellow-50 border-l-4 border-yellow-400 p-3 my-3">
          <p className="text-yellow-800 font-medium">{line}</p>
        </div>;
      }
      if (line.trim()) {
        return <p key={index} className="mb-2 leading-relaxed text-gray-700">{line}</p>;
      }
      return <br key={index} />;
    });
  };

  return (
    <div className="space-y-6 max-w-4xl mx-auto">
      {/* Input Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-blue-600" />
            AI Treatment Recommendations
          </CardTitle>
          <CardDescription>
            Generate personalized treatment recommendations for {patientName || 'patient'} using AI analysis
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="aesthetic_goals">Aesthetic Goals *</Label>
              <Textarea
                id="aesthetic_goals"
                placeholder="Describe the patient's aesthetic goals and desired outcomes..."
                value={formData.aesthetic_goals || ''}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleInputChange('aesthetic_goals', e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="current_concerns">Current Concerns</Label>
              <Textarea
                id="current_concerns"
                placeholder="Specific areas of concern or issues to address..."
                value={formData.current_concerns || ''}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleInputChange('current_concerns', e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="budget_range">Budget Range</Label>
              <Select onValueChange={(value: string) => handleInputChange('budget_range', value)} placeholder="Select budget range">
                <SelectItem value="under-1000">Under R$ 1,000</SelectItem>
                <SelectItem value="1000-3000">R$ 1,000 - R$ 3,000</SelectItem>
                <SelectItem value="3000-5000">R$ 3,000 - R$ 5,000</SelectItem>
                <SelectItem value="5000-10000">R$ 5,000 - R$ 10,000</SelectItem>
                <SelectItem value="over-10000">Over R$ 10,000</SelectItem>
                <SelectItem value="flexible">Flexible</SelectItem>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="timeline_preference">Timeline Preference</Label>
              <Select onValueChange={(value: string) => handleInputChange('timeline_preference', value)} placeholder="Select timeline">
                <SelectItem value="immediate">Immediate (within 1 month)</SelectItem>
                <SelectItem value="short-term">Short-term (1-3 months)</SelectItem>
                <SelectItem value="medium-term">Medium-term (3-6 months)</SelectItem>
                <SelectItem value="long-term">Long-term (6+ months)</SelectItem>
                <SelectItem value="flexible">Flexible</SelectItem>
              </Select>
            </div>
          </div>

          <Button 
            onClick={handleGenerateRecommendation}
            disabled={streamingState.isStreaming || !formData.aesthetic_goals?.trim()}
            className="w-full"
          >
            {streamingState.isStreaming ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating Recommendations...
              </>
            ) : (
              <>
                <Sparkles className="mr-2 h-4 w-4" />
                Generate AI Recommendations
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Streaming Results */}
      {(streamingState.content || streamingState.error) && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {streamingState.isComplete ? (
                <CheckCircle className="h-5 w-5 text-green-600" />
              ) : streamingState.error ? (
                <AlertCircle className="h-5 w-5 text-red-600" />
              ) : (
                <Clock className="h-5 w-5 text-blue-600 animate-pulse" />
              )}
              Treatment Recommendations
              {streamingState.isStreaming && (
                <Badge className="ml-auto bg-blue-100 text-blue-800">
                  <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                  Generating...
                </Badge>
              )}
              {streamingState.isComplete && (
                <Badge className="ml-auto bg-green-100 text-green-800">
                  Complete
                </Badge>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {streamingState.error ? (
              <div className="text-red-600 p-4 bg-red-50 rounded-lg">
                <p className="font-semibold">Error generating recommendations:</p>
                <p>{streamingState.error}</p>
              </div>
            ) : (
              <div className="prose prose-sm max-w-none">
                {formatContent(streamingState.content)}
                {streamingState.isStreaming && (
                  <div className="inline-block w-2 h-4 bg-blue-600 animate-pulse ml-1"></div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
