// NEONPRO Database Schema
// Drizzle ORM Schema Definitions for Aesthetic Clinic SaaS
// Generated by VIBECODE SYSTEM V4.0 - Architectural Optimization

import { relations } from "drizzle-orm";
import {
  boolean,
  decimal,
  integer,
  jsonb,
  pgTable,
  text,
  timestamp,
  uuid,
} from "drizzle-orm/pg-core";

// ===== USERS & AUTHENTICATION =====

export const users = pgTable("users", {
  id: uuid("id").defaultRandom().primaryKey(),
  email: text("email").notNull().unique(),
  name: text("name").notNull(),
  avatar_url: text("avatar_url"),
  role: text("role").notNull().default("patient"), // patient, doctor, admin
  phone: text("phone"),
  created_at: timestamp("created_at").defaultNow().notNull(),
  updated_at: timestamp("updated_at").defaultNow().notNull(),
});

// ===== CLINICS =====

export const clinics = pgTable("clinics", {
  id: uuid("id").defaultRandom().primaryKey(),
  name: text("name").notNull(),
  description: text("description"),
  address: text("address"),
  phone: text("phone"),
  email: text("email"),
  website: text("website"),
  logo_url: text("logo_url"),
  settings: jsonb("settings").default({}),
  created_at: timestamp("created_at").defaultNow().notNull(),
  updated_at: timestamp("updated_at").defaultNow().notNull(),
});

// ===== PATIENTS =====

export const patients = pgTable("patients", {
  id: uuid("id").defaultRandom().primaryKey(),
  user_id: uuid("user_id").references(() => users.id, { onDelete: "cascade" }),
  clinic_id: uuid("clinic_id").references(() => clinics.id, {
    onDelete: "cascade",
  }),
  medical_history: jsonb("medical_history").default({}),
  allergies: text("allergies"),
  emergency_contact: jsonb("emergency_contact"),
  created_at: timestamp("created_at").defaultNow().notNull(),
  updated_at: timestamp("updated_at").defaultNow().notNull(),
});

// ===== TREATMENTS =====

export const treatments = pgTable("treatments", {
  id: uuid("id").defaultRandom().primaryKey(),
  clinic_id: uuid("clinic_id").references(() => clinics.id, {
    onDelete: "cascade",
  }),
  name: text("name").notNull(),
  description: text("description"),
  duration_minutes: integer("duration_minutes").notNull(),
  price: decimal("price", { precision: 10, scale: 2 }).notNull(),
  category: text("category").notNull(), // facial, body, laser, etc.
  is_active: boolean("is_active").default(true),
  created_at: timestamp("created_at").defaultNow().notNull(),
  updated_at: timestamp("updated_at").defaultNow().notNull(),
});

// ===== APPOINTMENTS =====

export const appointments = pgTable("appointments", {
  id: uuid("id").defaultRandom().primaryKey(),
  patient_id: uuid("patient_id").references(() => patients.id, {
    onDelete: "cascade",
  }),
  treatment_id: uuid("treatment_id").references(() => treatments.id, {
    onDelete: "cascade",
  }),
  clinic_id: uuid("clinic_id").references(() => clinics.id, {
    onDelete: "cascade",
  }),
  scheduled_at: timestamp("scheduled_at").notNull(),
  status: text("status").notNull().default("scheduled"), // scheduled, confirmed, completed, cancelled
  notes: text("notes"),
  price: decimal("price", { precision: 10, scale: 2 }),
  created_at: timestamp("created_at").defaultNow().notNull(),
  updated_at: timestamp("updated_at").defaultNow().notNull(),
});

// ===== AI TREATMENT RECOMMENDATIONS - PHASE 7 =====

export const ai_treatment_recommendations = pgTable(
  "ai_treatment_recommendations",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    patient_id: uuid("patient_id").references(() => patients.id, {
      onDelete: "cascade",
    }),
    clinic_id: uuid("clinic_id").references(() => clinics.id, {
      onDelete: "cascade",
    }),
    user_id: uuid("user_id").references(() => users.id, {
      onDelete: "cascade",
    }),

    // AI Analysis Input
    patient_data: jsonb("patient_data").notNull(), // Patient info, medical history, preferences
    aesthetic_goals: text("aesthetic_goals"), // Patient's aesthetic goals
    treatment_history: jsonb("treatment_history").default([]), // Previous treatments

    // AI Generated Recommendations
    recommendations: jsonb("recommendations").notNull(), // AI-generated treatment suggestions
    rationale: text("rationale"), // AI explanation for recommendations
    risk_assessment: jsonb("risk_assessment").default({}), // Risk factors and contraindications
    alternative_options: jsonb("alternative_options").default([]), // Alternative treatment options
    follow_up_plan: text("follow_up_plan"), // Recommended follow-up schedule

    // AI Model Information
    ai_model: text("ai_model").default("gpt-4o"), // AI model used
    ai_version: text("ai_version"), // Model version
    confidence_score: decimal("confidence_score", { precision: 3, scale: 2 }), // AI confidence (0-1)

    // Usage and Feedback
    status: text("status").notNull().default("generated"), // generated, reviewed, approved, implemented
    reviewed_by: uuid("reviewed_by").references(() => users.id), // Doctor who reviewed
    feedback: text("feedback"), // Doctor feedback on recommendations
    accuracy_rating: integer("accuracy_rating"), // 1-5 rating of recommendation accuracy

    // Metadata
    created_at: timestamp("created_at").defaultNow().notNull(),
    updated_at: timestamp("updated_at").defaultNow().notNull(),
  }
);

export const ai_recommendation_history = pgTable("ai_recommendation_history", {
  id: uuid("id").defaultRandom().primaryKey(),
  recommendation_id: uuid("recommendation_id").references(
    () => ai_treatment_recommendations.id,
    { onDelete: "cascade" }
  ),
  action: text("action").notNull(), // generated, reviewed, approved, rejected, implemented
  performed_by: uuid("performed_by").references(() => users.id),
  notes: text("notes"),
  metadata: jsonb("metadata").default({}),
  created_at: timestamp("created_at").defaultNow().notNull(),
});

// ===== RELATIONS =====

export const usersRelations = relations(users, ({ many }) => ({
  patients: many(patients),
  ai_recommendations_created: many(ai_treatment_recommendations, {
    relationName: "ai_recommendations_created",
  }),
  ai_recommendations_reviewed: many(ai_treatment_recommendations, {
    relationName: "ai_recommendations_reviewed",
  }),
  ai_recommendation_history: many(ai_recommendation_history),
}));

export const clinicsRelations = relations(clinics, ({ many }) => ({
  patients: many(patients),
  treatments: many(treatments),
  appointments: many(appointments),
  ai_treatment_recommendations: many(ai_treatment_recommendations),
}));

export const patientsRelations = relations(patients, ({ one, many }) => ({
  user: one(users, {
    fields: [patients.user_id],
    references: [users.id],
  }),
  clinic: one(clinics, {
    fields: [patients.clinic_id],
    references: [clinics.id],
  }),
  appointments: many(appointments),
  ai_treatment_recommendations: many(ai_treatment_recommendations),
}));

export const treatmentsRelations = relations(treatments, ({ one, many }) => ({
  clinic: one(clinics, {
    fields: [treatments.clinic_id],
    references: [clinics.id],
  }),
  appointments: many(appointments),
}));

export const appointmentsRelations = relations(appointments, ({ one }) => ({
  patient: one(patients, {
    fields: [appointments.patient_id],
    references: [patients.id],
  }),
  treatment: one(treatments, {
    fields: [appointments.treatment_id],
    references: [treatments.id],
  }),
  clinic: one(clinics, {
    fields: [appointments.clinic_id],
    references: [clinics.id],
  }),
}));

export const aiTreatmentRecommendationsRelations = relations(
  ai_treatment_recommendations,
  ({ one, many }) => ({
    patient: one(patients, {
      fields: [ai_treatment_recommendations.patient_id],
      references: [patients.id],
    }),
    clinic: one(clinics, {
      fields: [ai_treatment_recommendations.clinic_id],
      references: [clinics.id],
    }),
    created_by: one(users, {
      fields: [ai_treatment_recommendations.user_id],
      references: [users.id],
      relationName: "ai_recommendations_created",
    }),
    reviewed_by_user: one(users, {
      fields: [ai_treatment_recommendations.reviewed_by],
      references: [users.id],
      relationName: "ai_recommendations_reviewed",
    }),
    history: many(ai_recommendation_history),
  })
);

export const aiRecommendationHistoryRelations = relations(
  ai_recommendation_history,
  ({ one }) => ({
    recommendation: one(ai_treatment_recommendations, {
      fields: [ai_recommendation_history.recommendation_id],
      references: [ai_treatment_recommendations.id],
    }),
    performed_by_user: one(users, {
      fields: [ai_recommendation_history.performed_by],
      references: [users.id],
    }),
  })
);

// ===== TYPE EXPORTS =====

export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;

export type Clinic = typeof clinics.$inferSelect;
export type NewClinic = typeof clinics.$inferInsert;

export type Patient = typeof patients.$inferSelect;
export type NewPatient = typeof patients.$inferInsert;

export type Treatment = typeof treatments.$inferSelect;
export type NewTreatment = typeof treatments.$inferInsert;

export type Appointment = typeof appointments.$inferSelect;
export type NewAppointment = typeof appointments.$inferInsert;
