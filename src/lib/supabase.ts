// NEONPRO Supabase Configuration
// Authentication, Storage, and Realtime Integration
// Generated by VIBECODE SYSTEM V4.0 - Architectural Optimization

import { createServerClient } from "@supabase/ssr";
import { createClient } from "@supabase/supabase-js";
import { cookies } from "next/headers";

// Environment variables validation
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error("Missing Supabase environment variables");
}

// Client-side Supabase client
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  },
});

// Server-side Supabase client for Server Components and Server Actions
export async function createServerSupabaseClient() {
  const cookieStore = await cookies();

  return createServerClient(supabaseUrl, supabaseAnonKey, {
    cookies: {
      get(name: string) {
        return cookieStore.get(name)?.value;
      },
      set(name: string, value: string, options: any) {
        try {
          cookieStore.set({ name, value, ...options });
        } catch (error) {
          // Handle cookie setting errors in Server Components
        }
      },
      remove(name: string, options: any) {
        try {
          cookieStore.set({ name, value: "", ...options });
        } catch (error) {
          // Handle cookie removal errors in Server Components
        }
      },
    },
  });
}

// Middleware Supabase client
export function createMiddlewareSupabaseClient(request: Request) {
  let response = new Response();

  const supabase = createServerClient(supabaseUrl, supabaseAnonKey, {
    cookies: {
      get(name: string) {
        return request.headers
          .get("cookie")
          ?.split(";")
          .find((c) => c.trim().startsWith(`${name}=`))
          ?.split("=")[1];
      },
      set(name: string, value: string, options: any) {
        response.headers.append(
          "Set-Cookie",
          `${name}=${value}; ${Object.entries(options)
            .map(([k, v]) => `${k}=${v}`)
            .join("; ")}`
        );
      },
      remove(name: string, options: any) {
        response.headers.append(
          "Set-Cookie",
          `${name}=; ${Object.entries(options)
            .map(([k, v]) => `${k}=${v}`)
            .join("; ")}`
        );
      },
    },
  });

  return { supabase, response };
}

// Type definitions for Supabase
export type SupabaseClient = typeof supabase;
