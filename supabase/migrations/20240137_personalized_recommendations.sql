-- Story 9.2: Personalized Treatment Recommendations
-- Migration for AI-powered personalized treatment recommendations system

-- Personalization profiles for patients
CREATE TABLE recommendation_profiles (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    patient_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    profile_data JSONB NOT NULL DEFAULT '{}',
    preference_weights JSONB NOT NULL DEFAULT '{}',
    lifestyle_factors JSONB NOT NULL DEFAULT '{}',
    medical_preferences JSONB NOT NULL DEFAULT '{}',
    communication_preferences JSONB NOT NULL DEFAULT '{}',
    last_updated TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Treatment recommendations generated by AI
CREATE TABLE treatment_recommendations (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    patient_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    provider_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    recommendation_type VARCHAR(50) NOT NULL,
    treatment_options JSONB NOT NULL DEFAULT '[]',
    ranking_scores JSONB NOT NULL DEFAULT '{}',
    rationale TEXT,
    success_probabilities JSONB NOT NULL DEFAULT '{}',
    risk_assessments JSONB NOT NULL DEFAULT '{}',
    contraindications JSONB NOT NULL DEFAULT '[]',
    alternatives JSONB NOT NULL DEFAULT '[]',
    status VARCHAR(20) DEFAULT 'pending',
    approved_by UUID REFERENCES auth.users(id),
    approved_at TIMESTAMPTZ,
    expires_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Feedback from medical professionals on recommendations
CREATE TABLE recommendation_feedback (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    recommendation_id UUID NOT NULL REFERENCES treatment_recommendations(id) ON DELETE CASCADE,
    provider_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    feedback_type VARCHAR(30) NOT NULL,
    adoption_status VARCHAR(20) NOT NULL,
    quality_rating INTEGER CHECK (quality_rating BETWEEN 1 AND 5),
    usefulness_rating INTEGER CHECK (usefulness_rating BETWEEN 1 AND 5),
    accuracy_rating INTEGER CHECK (accuracy_rating BETWEEN 1 AND 5),
    comments TEXT,
    improvement_suggestions TEXT,
    would_recommend BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Individual personalization factors for recommendations
CREATE TABLE personalization_factors (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    patient_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    factor_type VARCHAR(50) NOT NULL,
    factor_category VARCHAR(30) NOT NULL,
    factor_value JSONB NOT NULL,
    weight DECIMAL(3,2) DEFAULT 1.0,
    source VARCHAR(30) NOT NULL,
    confidence_score DECIMAL(3,2) DEFAULT 0.5,
    last_verified TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Safety profiles and contraindications
CREATE TABLE safety_profiles (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    patient_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    allergies JSONB NOT NULL DEFAULT '[]',
    contraindications JSONB NOT NULL DEFAULT '[]',
    drug_interactions JSONB NOT NULL DEFAULT '[]',
    medical_conditions JSONB NOT NULL DEFAULT '[]',
    risk_factors JSONB NOT NULL DEFAULT '[]',
    safety_alerts JSONB NOT NULL DEFAULT '[]',
    last_reviewed TIMESTAMPTZ DEFAULT NOW(),
    reviewed_by UUID REFERENCES auth.users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Treatment protocol customizations
CREATE TABLE protocol_customizations (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    patient_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    protocol_id VARCHAR(100) NOT NULL,
    customizations JSONB NOT NULL DEFAULT '{}',
    personalization_rules JSONB NOT NULL DEFAULT '{}',
    modifications JSONB NOT NULL DEFAULT '[]',
    approval_status VARCHAR(20) DEFAULT 'pending',
    customized_by UUID NOT NULL REFERENCES auth.users(id),
    approved_by UUID REFERENCES auth.users(id),
    effective_date TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Recommendation performance tracking
CREATE TABLE recommendation_performance (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    recommendation_id UUID NOT NULL REFERENCES treatment_recommendations(id) ON DELETE CASCADE,
    patient_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    adoption_rate DECIMAL(5,2),
    effectiveness_score DECIMAL(3,2),
    patient_satisfaction INTEGER CHECK (patient_satisfaction BETWEEN 1 AND 5),
    provider_satisfaction INTEGER CHECK (provider_satisfaction BETWEEN 1 AND 5),
    outcome_quality INTEGER CHECK (outcome_quality BETWEEN 1 AND 5),
    time_to_adoption INTERVAL,
    success_indicators JSONB NOT NULL DEFAULT '{}',
    measured_at TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_recommendation_profiles_patient ON recommendation_profiles(patient_id);
CREATE INDEX idx_recommendation_profiles_updated ON recommendation_profiles(updated_at);

CREATE INDEX idx_treatment_recommendations_patient ON treatment_recommendations(patient_id);
CREATE INDEX idx_treatment_recommendations_provider ON treatment_recommendations(provider_id);
CREATE INDEX idx_treatment_recommendations_status ON treatment_recommendations(status);
CREATE INDEX idx_treatment_recommendations_created ON treatment_recommendations(created_at);

CREATE INDEX idx_recommendation_feedback_recommendation ON recommendation_feedback(recommendation_id);
CREATE INDEX idx_recommendation_feedback_provider ON recommendation_feedback(provider_id);
CREATE INDEX idx_recommendation_feedback_adoption ON recommendation_feedback(adoption_status);

CREATE INDEX idx_personalization_factors_patient ON personalization_factors(patient_id);
CREATE INDEX idx_personalization_factors_type ON personalization_factors(factor_type);
CREATE INDEX idx_personalization_factors_category ON personalization_factors(factor_category);

CREATE INDEX idx_safety_profiles_patient ON safety_profiles(patient_id);
CREATE INDEX idx_safety_profiles_reviewed ON safety_profiles(last_reviewed);

CREATE INDEX idx_protocol_customizations_patient ON protocol_customizations(patient_id);
CREATE INDEX idx_protocol_customizations_protocol ON protocol_customizations(protocol_id);
CREATE INDEX idx_protocol_customizations_status ON protocol_customizations(approval_status);

CREATE INDEX idx_recommendation_performance_recommendation ON recommendation_performance(recommendation_id);
CREATE INDEX idx_recommendation_performance_patient ON recommendation_performance(patient_id);

-- RLS Policies
ALTER TABLE recommendation_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE treatment_recommendations ENABLE ROW LEVEL SECURITY;
ALTER TABLE recommendation_feedback ENABLE ROW LEVEL SECURITY;
ALTER TABLE personalization_factors ENABLE ROW LEVEL SECURITY;
ALTER TABLE safety_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE protocol_customizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE recommendation_performance ENABLE ROW LEVEL SECURITY;

-- Policies for recommendation_profiles
CREATE POLICY "Users can view own recommendation profiles" ON recommendation_profiles
    FOR SELECT USING (patient_id = auth.uid());

CREATE POLICY "Medical professionals can view all recommendation profiles" ON recommendation_profiles
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can insert recommendation profiles" ON recommendation_profiles
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can update recommendation profiles" ON recommendation_profiles
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

-- Policies for treatment_recommendations
CREATE POLICY "Patients can view own treatment recommendations" ON treatment_recommendations
    FOR SELECT USING (patient_id = auth.uid());

CREATE POLICY "Medical professionals can view all treatment recommendations" ON treatment_recommendations
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can insert treatment recommendations" ON treatment_recommendations
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can update treatment recommendations" ON treatment_recommendations
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

-- Policies for recommendation_feedback
CREATE POLICY "Medical professionals can view all recommendation feedback" ON recommendation_feedback
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can insert recommendation feedback" ON recommendation_feedback
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

-- Policies for personalization_factors
CREATE POLICY "Patients can view own personalization factors" ON personalization_factors
    FOR SELECT USING (patient_id = auth.uid());

CREATE POLICY "Medical professionals can view all personalization factors" ON personalization_factors
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can manage personalization factors" ON personalization_factors
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

-- Policies for safety_profiles
CREATE POLICY "Patients can view own safety profiles" ON safety_profiles
    FOR SELECT USING (patient_id = auth.uid());

CREATE POLICY "Medical professionals can view all safety profiles" ON safety_profiles
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can manage safety profiles" ON safety_profiles
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

-- Policies for protocol_customizations
CREATE POLICY "Medical professionals can view all protocol customizations" ON protocol_customizations
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can manage protocol customizations" ON protocol_customizations
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

-- Policies for recommendation_performance
CREATE POLICY "Medical professionals can view all recommendation performance" ON recommendation_performance
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

CREATE POLICY "Medical professionals can insert recommendation performance" ON recommendation_performance
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' IN ('admin', 'doctor', 'nurse')
        )
    );

-- Functions for automatic timestamps
CREATE OR REPLACE FUNCTION update_recommendation_profiles_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_treatment_recommendations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_personalization_factors_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_safety_profiles_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_protocol_customizations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers for automatic timestamps
CREATE TRIGGER trigger_update_recommendation_profiles_updated_at
    BEFORE UPDATE ON recommendation_profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_recommendation_profiles_updated_at();

CREATE TRIGGER trigger_update_treatment_recommendations_updated_at
    BEFORE UPDATE ON treatment_recommendations
    FOR EACH ROW
    EXECUTE FUNCTION update_treatment_recommendations_updated_at();

CREATE TRIGGER trigger_update_personalization_factors_updated_at
    BEFORE UPDATE ON personalization_factors
    FOR EACH ROW
    EXECUTE FUNCTION update_personalization_factors_updated_at();

CREATE TRIGGER trigger_update_safety_profiles_updated_at
    BEFORE UPDATE ON safety_profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_safety_profiles_updated_at();

CREATE TRIGGER trigger_update_protocol_customizations_updated_at
    BEFORE UPDATE ON protocol_customizations
    FOR EACH ROW
    EXECUTE FUNCTION update_protocol_customizations_updated_at();
