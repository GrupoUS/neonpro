# üßπ SCRIPT DE AUTOMA√á√ÉO - LIMPEZA DE DEPEND√äNCIAS PNPM
# Arquivo: scripts/cleanup-dependencies.ps1
# Uso: .\scripts\cleanup-dependencies.ps1 [-BackupOnly] [-DryRun] [-Verbose]

param(
    [switch]$BackupOnly,
    [switch]$DryRun,
    [switch]$Verbose
)

# Configura√ß√µes
$ScriptName = "NEONPRO Dependency Cleanup Automation"
$BackupDir = "backup-dependencies"
$LogFile = "logs/dependency-cleanup-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"

# Fun√ß√£o de logging
function Write-Log {
    param($Message, $Level = "INFO")
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogMessage = "[$Timestamp] [$Level] $Message"
    
    if ($Verbose -or $Level -eq "ERROR") {
        Write-Host $LogMessage -ForegroundColor $(
            switch ($Level) {
                "INFO" { "White" }
                "SUCCESS" { "Green" }
                "WARNING" { "Yellow" }
                "ERROR" { "Red" }
                default { "White" }
            }
        )
    }
    
    # Criar diret√≥rio de logs se n√£o existir
    if (!(Test-Path "logs")) {
        New-Item -ItemType Directory -Path "logs" -Force | Out-Null
    }
    
    Add-Content -Path $LogFile -Value $LogMessage
}

# Fun√ß√£o para verificar se PNPM est√° dispon√≠vel
function Test-PnpmAvailable {
    try {
        $pnpmVersion = pnpm --version 2>$null
        if ($pnpmVersion) {
            Write-Log "PNPM vers√£o $pnpmVersion detectado" "SUCCESS"
            return $true
        }
    }
    catch {
        Write-Log "PNPM n√£o encontrado. Instale PNPM primeiro." "ERROR"
        return $false
    }
    return $false
}

# Fun√ß√£o para criar backup
function New-DependencyBackup {
    Write-Log "Iniciando processo de backup..."
    
    if (!(Test-Path $BackupDir)) {
        New-Item -ItemType Directory -Path $BackupDir -Force | Out-Null
        Write-Log "Diret√≥rio de backup criado: $BackupDir" "SUCCESS"
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
    
    try {
        # Backup do package.json
        if (Test-Path "package.json") {
            Copy-Item "package.json" "$BackupDir/package.json.backup-$timestamp"
            Write-Log "Backup do package.json criado" "SUCCESS"
        }
        
        # Backup do pnpm-lock.yaml
        if (Test-Path "pnpm-lock.yaml") {
            Copy-Item "pnpm-lock.yaml" "$BackupDir/pnpm-lock.yaml.backup-$timestamp"
            Write-Log "Backup do pnpm-lock.yaml criado" "SUCCESS"
        }
        
        # Backup do .npmrc se existir
        if (Test-Path ".npmrc") {
            Copy-Item ".npmrc" "$BackupDir/.npmrc.backup-$timestamp"
            Write-Log "Backup do .npmrc criado" "SUCCESS"
        }
        
        Write-Log "Backup conclu√≠do com sucesso!" "SUCCESS"
        return $true
    }
    catch {
        Write-Log "Erro durante backup: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# Fun√ß√£o para obter m√©tricas antes da limpeza
function Get-PreCleanupMetrics {
    Write-Log "Coletando m√©tricas antes da limpeza..."
    
    $metrics = @{}
    
    try {
        if (Test-Path "node_modules") {
            $nodeModulesSize = (Get-ChildItem "node_modules" -Recurse -File | Measure-Object -Property Length -Sum).Sum
            $nodeModulesFiles = (Get-ChildItem "node_modules" -Recurse -File).Count
            
            $metrics.SizeBefore = [math]::Round($nodeModulesSize / 1GB, 2)
            $metrics.FilesBefore = $nodeModulesFiles
            
            Write-Log "Tamanho node_modules: $($metrics.SizeBefore) GB" "INFO"
            Write-Log "Arquivos node_modules: $($metrics.FilesBefore)" "INFO"
        }
        else {
            Write-Log "node_modules n√£o encontrado" "WARNING"
            $metrics.SizeBefore = 0
            $metrics.FilesBefore = 0
        }
    }
    catch {
        Write-Log "Erro ao coletar m√©tricas: $($_.Exception.Message)" "WARNING"
        $metrics.SizeBefore = 0
        $metrics.FilesBefore = 0
    }
    
    return $metrics
}

# Fun√ß√£o principal de limpeza
function Invoke-DependencyCleanup {
    param($Metrics)
    
    Write-Log "Iniciando limpeza de depend√™ncias..."
    
    if ($DryRun) {
        Write-Log "MODO DRY RUN - Nenhuma altera√ß√£o ser√° feita" "WARNING"
        return $true
    }
    
    try {
        # 1. PNPM Prune
        Write-Log "Executando pnpm prune..."
        $pruneResult = pnpm prune 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Log "pnpm prune executado com sucesso" "SUCCESS"
        } else {
            Write-Log "pnpm prune com avisos (c√≥digo $LASTEXITCODE)" "WARNING"
        }
        
        # 2. PNPM Store Prune
        Write-Log "Executando pnpm store prune..."
        $storePruneResult = pnpm store prune 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Log "pnpm store prune executado com sucesso" "SUCCESS"
        } else {
            Write-Log "pnpm store prune falhou (c√≥digo $LASTEXITCODE)" "ERROR"
            return $false
        }
        
        # 3. PNPM Dedupe
        Write-Log "Executando pnpm dedupe..."
        $dedupeResult = pnpm dedupe 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Log "pnpm dedupe executado com sucesso" "SUCCESS"
        } else {
            Write-Log "pnpm dedupe falhou (c√≥digo $LASTEXITCODE)" "ERROR"
            return $false
        }
        
        # 4. Reinstala√ß√£o limpa
        Write-Log "Executando instala√ß√£o limpa..."
        $installResult = pnpm install --ignore-scripts --include=optional 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Log "pnpm install executado com sucesso" "SUCCESS"
        } else {
            Write-Log "pnpm install falhou (c√≥digo $LASTEXITCODE)" "ERROR"
            return $false
        }
        
        return $true
    }
    catch {
        Write-Log "Erro durante limpeza: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# Fun√ß√£o de valida√ß√£o p√≥s-limpeza
function Test-PostCleanupValidation {
    Write-Log "Executando valida√ß√£o p√≥s-limpeza..."
    
    try {
        # Type check
        Write-Log "Executando type-check..."
        $typeCheckResult = pnpm type-check 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Type-check passou com sucesso" "SUCCESS"
        } else {
            Write-Log "Type-check falhou (c√≥digo $LASTEXITCODE)" "ERROR"
            return $false
        }
        
        # Verificar se package.json ainda existe
        if (!(Test-Path "package.json")) {
            Write-Log "package.json n√£o encontrado!" "ERROR"
            return $false
        }
        
        # Verificar se node_modules foi recriado
        if (!(Test-Path "node_modules")) {
            Write-Log "node_modules n√£o foi recriado!" "ERROR"
            return $false
        }
        
        Write-Log "Valida√ß√£o p√≥s-limpeza conclu√≠da com sucesso!" "SUCCESS"
        return $true
    }
    catch {
        Write-Log "Erro durante valida√ß√£o: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# Fun√ß√£o para gerar relat√≥rio final
function New-CleanupReport {
    param($MetricsBefore, $MetricsAfter, $Success)
    
    Write-Log "Gerando relat√≥rio de limpeza..."
    
    $reportFile = "DEPENDENCY-CLEANUP-REPORT-$(Get-Date -Format 'yyyyMMdd-HHmmss').md"
    
    $report = @"
# üìã RELAT√ìRIO DE LIMPEZA AUTOM√ÅTICA - DEPEND√äNCIAS PNPM
**Data:** $(Get-Date -Format "dd/MM/yyyy HH:mm:ss")
**Script:** $ScriptName
**Status:** $(if ($Success) { "‚úÖ SUCESSO" } else { "‚ùå FALHOU" })

## üìä M√âTRICAS

| M√©trica | ANTES | DEPOIS | DIFEREN√áA |
|---------|-------|--------|-----------|
| **Tamanho** | $($MetricsBefore.SizeBefore) GB | $($MetricsAfter.SizeAfter) GB | $(if ($MetricsAfter.SizeAfter) { [math]::Round($MetricsAfter.SizeAfter - $MetricsBefore.SizeBefore, 2) } else { "N/A" }) GB |
| **Arquivos** | $($MetricsBefore.FilesBefore) | $($MetricsAfter.FilesAfter) | $(if ($MetricsAfter.FilesAfter) { $MetricsAfter.FilesAfter - $MetricsBefore.FilesBefore } else { "N/A" }) |

## üìù LOG COMPLETO
Consulte: $LogFile

## üîÑ BACKUP DISPON√çVEL
Localiza√ß√£o: $BackupDir/

$(if (!$Success) {
"## ‚ö†Ô∏è ROLLBACK NECESS√ÅRIO
Execute os comandos:
``````
cp $BackupDir/package.json.backup-* package.json
cp $BackupDir/pnpm-lock.yaml.backup-* pnpm-lock.yaml
pnpm install --frozen-lockfile
``````"
})
"@

    $report | Out-File -FilePath $reportFile -Encoding UTF8
    Write-Log "Relat√≥rio salvo em: $reportFile" "SUCCESS"
}

# SCRIPT PRINCIPAL
Write-Log "üöÄ Iniciando $ScriptName" "SUCCESS"
Write-Log "Par√¢metros: BackupOnly=$BackupOnly, DryRun=$DryRun, Verbose=$Verbose" "INFO"

# Verificar PNPM
if (!(Test-PnpmAvailable)) {
    exit 1
}

# Coletar m√©tricas iniciais
$metricsBefore = Get-PreCleanupMetrics

# Criar backup
$backupSuccess = New-DependencyBackup
if (!$backupSuccess) {
    Write-Log "Falha no backup. Abortando." "ERROR"
    exit 1
}

if ($BackupOnly) {
    Write-Log "Modo BackupOnly ativado. Backup conclu√≠do." "SUCCESS"
    exit 0
}

# Executar limpeza
$cleanupSuccess = Invoke-DependencyCleanup -Metrics $metricsBefore
if (!$cleanupSuccess) {
    Write-Log "Falha na limpeza. Consulte os logs." "ERROR"
    exit 1
}

# Valida√ß√£o p√≥s-limpeza
$validationSuccess = Test-PostCleanupValidation
if (!$validationSuccess) {
    Write-Log "Falha na valida√ß√£o p√≥s-limpeza." "ERROR"
    exit 1
}

# Coletar m√©tricas finais
$metricsAfter = Get-PreCleanupMetrics
$metricsAfter.SizeAfter = $metricsAfter.SizeBefore
$metricsAfter.FilesAfter = $metricsAfter.FilesBefore

# Gerar relat√≥rio
New-CleanupReport -MetricsBefore $metricsBefore -MetricsAfter $metricsAfter -Success $true

Write-Log "üéâ Limpeza autom√°tica conclu√≠da com sucesso!" "SUCCESS"
exit 0