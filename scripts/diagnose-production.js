#!/usr/bin/env node

/**
 * Script de diagn√≥stico para problemas de produ√ß√£o no Vercel
 * Verifica configura√ß√µes, vari√°veis de ambiente e rotas
 */

const fs = require('node:fs');
const _path = require('node:path');

console.log('üîç DIAGN√ìSTICO DE PRODU√á√ÉO - NEONPRO');
console.log('='.repeat(50));

// 1. Verificar estrutura de arquivos
console.log('\nüìÅ 1. VERIFICANDO ESTRUTURA DE ARQUIVOS');
const requiredFiles = [
  'app/auth/popup-callback/route.ts',
  'app/auth/callback/route.ts',
  'app/dashboard/page.tsx',
  'contexts/auth-context.tsx',
  'middleware.ts',
  'vercel.json',
];

const missingFiles = [];
requiredFiles.forEach((file) => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - AUSENTE`);
    missingFiles.push(file);
  }
});

// 2. Verificar vari√°veis de ambiente locais
console.log('\nüîß 2. VERIFICANDO VARI√ÅVEIS DE AMBIENTE LOCAIS');
const envFile = '.env.local';
if (fs.existsSync(envFile)) {
  const envContent = fs.readFileSync(envFile, 'utf8');
  const requiredVars = ['NEXT_PUBLIC_SUPABASE_URL', 'NEXT_PUBLIC_SUPABASE_ANON_KEY'];

  requiredVars.forEach((varName) => {
    if (envContent.includes(varName)) {
      console.log(`‚úÖ ${varName} - Presente`);
    } else {
      console.log(`‚ùå ${varName} - AUSENTE`);
    }
  });
} else {
  console.log('‚ùå .env.local n√£o encontrado');
}

// 3. Verificar configura√ß√£o do Next.js
console.log('\n‚öôÔ∏è 3. VERIFICANDO CONFIGURA√á√ÉO NEXT.JS');
if (fs.existsSync('next.config.mjs')) {
  console.log('‚úÖ next.config.mjs encontrado');
  const config = fs.readFileSync('next.config.mjs', 'utf8');
  if (config.includes('ignoreBuildErrors: true')) {
    console.log('‚ö†Ô∏è  Build errors est√£o sendo ignorados');
  }
} else {
  console.log('‚ùå next.config.mjs n√£o encontrado');
}

// 4. Verificar configura√ß√£o do Vercel
console.log('\nüöÄ 4. VERIFICANDO CONFIGURA√á√ÉO VERCEL');
if (fs.existsSync('vercel.json')) {
  console.log('‚úÖ vercel.json encontrado');
  try {
    const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
    console.log('‚úÖ vercel.json √© v√°lido');

    if (vercelConfig.functions) {
      console.log('‚úÖ Configura√ß√µes de fun√ß√£o definidas');
    }

    if (vercelConfig.rewrites) {
      console.log('‚úÖ Rewrites configurados');
    }
  } catch (error) {
    console.log('‚ùå vercel.json inv√°lido:', error.message);
  }
} else {
  console.log('‚ö†Ô∏è  vercel.json n√£o encontrado (criado automaticamente)');
}

// 5. Verificar rotas de autentica√ß√£o
console.log('\nüîê 5. VERIFICANDO ROTAS DE AUTENTICA√á√ÉO');
const authRoutes = ['app/auth/popup-callback/route.ts', 'app/auth/callback/route.ts'];

authRoutes.forEach((route) => {
  if (fs.existsSync(route)) {
    const content = fs.readFileSync(route, 'utf8');
    console.log(`‚úÖ ${route}`);

    // Verificar se exporta GET
    if (content.includes('export async function GET')) {
      console.log('  ‚úÖ Exporta fun√ß√£o GET');
    } else {
      console.log('  ‚ùå N√£o exporta fun√ß√£o GET');
    }

    // Verificar se usa createClient
    if (content.includes('createClient')) {
      console.log('  ‚úÖ Usa createClient');
    } else {
      console.log('  ‚ùå N√£o usa createClient');
    }
  }
});

// 6. Resumo e recomenda√ß√µes
console.log('\nüìã 6. RESUMO E RECOMENDA√á√ïES');
if (missingFiles.length > 0) {
  console.log('‚ùå PROBLEMAS ENCONTRADOS:');
  missingFiles.forEach((file) => {
    console.log(`   - ${file} est√° ausente`);
  });
}

console.log('\nüîß PR√ìXIMOS PASSOS PARA PRODU√á√ÉO:');
console.log('1. Verificar vari√°veis de ambiente no Vercel Dashboard');
console.log('2. Confirmar URLs no Supabase Dashboard:');
console.log('   - https://neonpro.vercel.app/auth/popup-callback');
console.log('   - https://neonpro.vercel.app/auth/callback');
console.log('3. Atualizar Google Console OAuth URLs');
console.log('4. Fazer redeploy no Vercel');
console.log('5. Testar fluxo OAuth em produ√ß√£o');

console.log('\n‚úÖ DIAGN√ìSTICO CONCLU√çDO');
