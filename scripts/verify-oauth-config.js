// scripts/verify-oauth-config.js
const fs = require('node:fs');
const path = require('node:path');

console.log('üîç Verificando Configura√ß√£o do Google OAuth...\n');

// 1. Verificar .env.local
const envPath = path.join(__dirname, '..', '.env.local');
console.log('üìÅ Verificando .env.local...');

if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');

  const hasGoogleClientId = envContent.includes('GOOGLE_CLIENT_ID=');
  const hasGoogleClientSecret = envContent.includes('GOOGLE_CLIENT_SECRET=');

  console.log('‚úÖ Arquivo .env.local encontrado');
  console.log(`${hasGoogleClientId ? '‚úÖ' : '‚ùå'} GOOGLE_CLIENT_ID definido`);
  console.log(`${hasGoogleClientSecret ? '‚úÖ' : '‚ùå'} GOOGLE_CLIENT_SECRET definido`);

  if (hasGoogleClientId && hasGoogleClientSecret) {
    const clientIdMatch = envContent.match(/GOOGLE_CLIENT_ID=(.+)/);
    const clientSecretMatch = envContent.match(/GOOGLE_CLIENT_SECRET=(.+)/);

    const clientIdPlaceholder = clientIdMatch?.[1].includes('your_google_client_id_here');
    const secretPlaceholder = clientSecretMatch?.[1].includes('your_google_client_secret_here');

    if (clientIdPlaceholder) {
      console.log('‚ö†Ô∏è  GOOGLE_CLIENT_ID ainda √© um placeholder');
    } else {
      console.log('‚úÖ GOOGLE_CLIENT_ID tem valor real');
    }

    if (secretPlaceholder) {
      console.log('‚ö†Ô∏è  GOOGLE_CLIENT_SECRET ainda √© um placeholder');
    } else {
      console.log('‚úÖ GOOGLE_CLIENT_SECRET tem valor real');
    }
  }
} else {
  console.log('‚ùå Arquivo .env.local n√£o encontrado');
}

console.log('\nüìÅ Verificando infrastructure/database/config/config.toml...');

// 2. Verificar config.toml
const configPath = path.join(
  __dirname,
  '..',
  'infrastructure',
  'database',
  'config',
  'config.toml'
);
if (fs.existsSync(configPath)) {
  const configContent = fs.readFileSync(configPath, 'utf8');

  const hasGoogleConfig = configContent.includes('[auth.external.google]');
  const isGoogleEnabled = configContent.includes('enabled = true');
  const hasClientIdRef = configContent.includes('client_id = "env(GOOGLE_CLIENT_ID)"');
  const hasSecretRef = configContent.includes('secret = "env(GOOGLE_CLIENT_SECRET)"');

  console.log('‚úÖ Arquivo config.toml encontrado');
  console.log(`${hasGoogleConfig ? '‚úÖ' : '‚ùå'} Se√ß√£o [auth.external.google] presente`);
  console.log(`${isGoogleEnabled ? '‚úÖ' : '‚ùå'} Google OAuth habilitado`);
  console.log(`${hasClientIdRef ? '‚úÖ' : '‚ùå'} client_id referenciando env var`);
  console.log(`${hasSecretRef ? '‚úÖ' : '‚ùå'} secret referenciando env var`);
} else {
  console.log('‚ùå Arquivo config.toml n√£o encontrado');
}

console.log('\nüìä Status Geral da Configura√ß√£o:');
console.log('üîß C√≥digo implementado: ‚úÖ Completo');
console.log('üîß Arquivos de config: ‚úÖ Configurados');
console.log('üîß Credenciais Google: ‚ö†Ô∏è  Placeholders (necess√°rio configurar)');

console.log('\nüöÄ Pr√≥ximos passos para ativar:');
console.log('1. Configurar Google Cloud Console');
console.log('2. Substituir placeholders no .env.local');
console.log('3. Reiniciar Supabase: npx supabase restart');
console.log('4. Testar login no app');

console.log('\n‚ú® Para teste imediato, use a p√°gina: http://localhost:3002/test-oauth');
