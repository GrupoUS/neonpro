#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Diagn√≥stico e corre√ß√£o dos problemas do Vitest no VS Code

.DESCRIPTION
    Script para diagnosticar e corrigir problemas comuns do Vitest:
    - M√∫ltiplas configura√ß√µes conflitantes
    - Erros da extens√£o VS Code
    - Problemas de workspace

.EXAMPLE
    .\vitest-diagnostic.ps1
#>

Write-Host "üîç VITEST DIAGNOSTIC & FIX SCRIPT" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan
Write-Host ""

# Fun√ß√£o para verificar arquivos de configura√ß√£o
function Test-VitestConfigs {
    Write-Host "üìã Verificando configura√ß√µes Vitest..." -ForegroundColor Yellow
    
    $configs = @(
        "vitest.config.ts",
        "vitest.config.mjs", 
        "vitest.workspace.ts",
        "tools/testing/vitest.config.ts",
        "tools/testing/vitest.config.mjs",
        "packages/ui/vitest.config.mjs"
    )
    
    $found = @()
    foreach ($config in $configs) {
        if (Test-Path $config) {
            $found += $config
            Write-Host "  ‚úÖ Encontrado: $config" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå N√£o encontrado: $config" -ForegroundColor Red
        }
    }
    
    Write-Host "üìä Total de configura√ß√µes encontradas: $($found.Count)" -ForegroundColor Cyan
    return $found
}

# Fun√ß√£o para verificar status da extens√£o Vitest
function Test-VitestExtension {
    Write-Host ""
    Write-Host "üîå Verificando extens√£o Vitest..." -ForegroundColor Yellow
    
    $vscodePath = "$env:USERPROFILE\.vscode\extensions"
    $vitestExtensions = Get-ChildItem -Path $vscodePath -Filter "*vitest*" -Directory -ErrorAction SilentlyContinue
    
    if ($vitestExtensions) {
        foreach ($ext in $vitestExtensions) {
            Write-Host "  üì¶ Extens√£o encontrada: $($ext.Name)" -ForegroundColor Green
        }
    } else {
        Write-Host "  ‚ùå Extens√£o Vitest n√£o encontrada" -ForegroundColor Red
    }
}

# Fun√ß√£o para limpar cache
function Clear-VitestCache {
    Write-Host ""
    Write-Host "üßπ Limpando cache do Vitest..." -ForegroundColor Yellow
    
    $cachePaths = @(
        "node_modules/.vitest",
        ".vitest",
        "coverage",
        "test-results"
    )
    
    foreach ($path in $cachePaths) {
        if (Test-Path $path) {
            Remove-Item -Path $path -Recurse -Force -ErrorAction SilentlyContinue
            Write-Host "  üóëÔ∏è Removido: $path" -ForegroundColor Green
        }
    }
}

# Fun√ß√£o para verificar Node.js e depend√™ncias
function Test-Dependencies {
    Write-Host ""
    Write-Host "üì¶ Verificando depend√™ncias..." -ForegroundColor Yellow
    
    # Verificar Node.js
    try {
        $nodeVersion = node --version
        Write-Host "  ‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
    } catch {
        Write-Host "  ‚ùå Node.js n√£o encontrado" -ForegroundColor Red
    }
    
    # Verificar PNPM
    try {
        $pnpmVersion = pnpm --version
        Write-Host "  ‚úÖ PNPM: $pnpmVersion" -ForegroundColor Green
    } catch {
        Write-Host "  ‚ùå PNPM n√£o encontrado" -ForegroundColor Red
    }
    
    # Verificar Vitest
    if (Test-Path "node_modules/vitest") {
        Write-Host "  ‚úÖ Vitest instalado" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Vitest n√£o instalado" -ForegroundColor Red
    }
}

# Fun√ß√£o para executar testes de valida√ß√£o
function Test-VitestRun {
    Write-Host ""
    Write-Host "üß™ Testando execu√ß√£o do Vitest..." -ForegroundColor Yellow
    
    try {
        Write-Host "  Executando: pnpm vitest --run --reporter=basic" -ForegroundColor Gray
        $result = pnpm vitest --run --reporter=basic 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "  ‚úÖ Vitest executou com sucesso" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è Vitest executou com warnings/erros" -ForegroundColor Yellow
            Write-Host "  $result" -ForegroundColor Gray
        }
    } catch {
        Write-Host "  ‚ùå Erro ao executar Vitest: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Fun√ß√£o principal
function Main {
    Write-Host "üöÄ Iniciando diagn√≥stico..." -ForegroundColor Cyan
    Write-Host ""
    
    # Verificar se estamos no diret√≥rio correto
    if (-not (Test-Path "package.json")) {
        Write-Host "‚ùå Execute este script na raiz do projeto (onde est√° o package.json)" -ForegroundColor Red
        exit 1
    }
    
    # Executar diagn√≥sticos
    $configs = Test-VitestConfigs
    Test-VitestExtension
    Test-Dependencies
    Clear-VitestCache
    Test-VitestRun
    
    # Recomenda√ß√µes
    Write-Host ""
    Write-Host "üí° RECOMENDA√á√ïES:" -ForegroundColor Cyan
    Write-Host "==================" -ForegroundColor Cyan
    
    if ($configs.Count -gt 3) {
        Write-Host "‚ö†Ô∏è Muitas configura√ß√µes Vitest encontradas ($($configs.Count))" -ForegroundColor Yellow
        Write-Host "   Considere usar vitest.workspace.ts para consolidar" -ForegroundColor Yellow
    }
    
    if (Test-Path "vitest.workspace.ts") {
        Write-Host "‚úÖ vitest.workspace.ts encontrado - configura√ß√£o de workspace ativa" -ForegroundColor Green
    } else {
        Write-Host "üí° Crie vitest.workspace.ts para melhor organiza√ß√£o em monorepo" -ForegroundColor Yellow
    }
    
    Write-Host ""
    Write-Host "üîÑ Para corrigir problemas da extens√£o VS Code:" -ForegroundColor Cyan
    Write-Host "   1. Recarregue a janela do VS Code (Ctrl+Shift+P > Reload Window)" -ForegroundColor White
    Write-Host "   2. Desative e reative a extens√£o Vitest" -ForegroundColor White
    Write-Host "   3. Verifique o Output do VS Code (View > Output > Vitest)" -ForegroundColor White
    
    Write-Host ""
    Write-Host "‚úÖ Diagn√≥stico conclu√≠do!" -ForegroundColor Green
}

# Executar script principal
Main