// LGPD (Lei Geral de Proteção de Dados) Types
export interface LGPDDataSubject {
  id: string;
  name: string;
  email: string;
  phone: string;
  document: string; // CPF/CNPJ  documentType: 'cpf' | 'cnpj';
  birthDate: Date;
  address: LGPDAddress;
  consentRecords: Array<LGPDConsent>;
  dataProcessingRecords: Array<LGPDDataProcessing>;
  requests: Array<LGPDRequest>;
  createdAt: Date;
  updatedAt: Date;
}

export interface LGPDAddress {
  street: string;
  number: string;
  complement: string;
  neighborhood: string;
  city: string;
  state: string;
  zipCode: string;
  country: string;
}

export interface LGPDConsent {
  id: string;
  dataSubjectId: string;
  purpose: LGPDPurpose;
  legalBasis: LGPDLegalBasis;
  status: LGPDConsentStatus;
  consentDate: Date;
  withdrawalDate: Date;
  expiryDate: Date;
  version: string;
  evidence: LGPDConsentEvidence;
  categories: Array<LGPDDataCategory>;
  thirdParties: Array<LGPDThirdParty>;
  createdAt: Date;
  updatedAt: Date;
}

export interface LGPDConsentEvidence {
  type: 'digital' | "physical" | "verbal" | "implied";
  method: string; // e.g., 'website_form', 'signed_document', 'phone_call'  ipAddress: string;
  userAgent: string;
  timestamp: Date;
  witness: string;
  documentUrl: string;
  checksum: string;
}

export interface LGPDDataProcessing {
  id: string;
  dataSubjectId: string;
  purpose: LGPDPurpose;
  legalBasis: LGPDLegalBasis;
  categories: Array<LGPDDataCategory>;
  processingActivities: Array<LGPDProcessingActivity>;
  retentionPeriod: LGPDRetentionPeriod;
  thirdParties: Array<LGPDThirdParty>;
  internationalTransfers: Array<LGPDInternationalTransfer>;
  securityMeasures: Array<LGPDSecurityMeasure>;
  startDate: Date;
  endDate: Date;
  status: 'active' | 'suspended' | 'terminated';
  createdAt: Date;
  updatedAt: Date;
}

export interface LGPDProcessingActivity {
  id: string;
  name: string;
  description: string;
  type: LGPDProcessingType;
  automated: boolean;
  profilingInvolved: boolean;
  sensitiveData: boolean;
  timestamp: Date;
  operator: string;
  system: string;
}

export interface LGPDRequest {
  id: string;
  dataSubjectId: string;
  type: LGPDRequestType;
  status: LGPDRequestStatus;
  description: string;
  requestDate: Date;
  responseDate: Date;
  completionDate: Date;
  response: string;
  evidence: Array<LGPDRequestEvidence>;
  assignedTo: string;
  priority: 'low' | "medium" | "high" | "urgent";
  source: 'portal' | 'email' | "phone" | "letter" | "in_person";
  createdAt: Date;
  updatedAt: Date;
}

export interface LGPDRequestEvidence {
  id: string;
  type: 'document' | "screenshot" | "log" | "communication";
  description: string;
  fileUrl: string;
  content: string;
  timestamp: Date;
  createdBy: string;
}

export interface LGPDAuditLog {
  id: string;
  dataSubjectId: string;
  action: LGPDAuditAction;
  entity: string; // table/collection name  entityId: string;
  oldValues: Record<string, any>;
  newValues: Record<string, any>;
  userId: string;
  userRole: string;
  ipAddress: string;
  userAgent: string;
  timestamp: Date;
  legalBasis: LGPDLegalBasis;
  purpose: LGPDPurpose;
  automated: boolean;
  system: string;
}

export interface LGPDDataInventory {
  id: string;
  name: string;
  description: string;
  dataController: LGPDDataController;
  dataProcessor: LGPDDataProcessor;
  categories: Array<LGPDDataCategory>;
  purposes: Array<LGPDPurpose>;
  legalBases: Array<LGPDLegalBasis>;
  sources: Array<LGPDDataSource>;
  recipients: Array<LGPDDataRecipient>;
  retentionPeriod: LGPDRetentionPeriod;
  securityMeasures: Array<LGPDSecurityMeasure>;
  internationalTransfers: Array<LGPDInternationalTransfer>;
  riskAssessment: LGPDRiskAssessment;
  lastReview: Date;
  nextReview: Date;
  status: 'active' | 'inactive' | 'under_review';
  createdAt: Date;
  updatedAt: Date;
}

export interface LGPDDataController {
  name: string;
  document: string; // CNPJ  email: string;
  phone: string;
  address: LGPDAddress;
  dpoContact: LGPDDPOContact;
}

export interface LGPDDataProcessor {
  name: string;
  document: string; // CNPJ  email: string;
  phone: string;
  address: LGPDAddress;
  contractDate: Date;
  contractUrl: string;
}

export interface LGPDDPOContact {
  name: string;
  email: string;
  phone: string;
  registrationNumber: string;
}

export interface LGPDThirdParty {
  id: string;
  name: string;
  type: 'processor' | 'joint_controller' | 'recipient';
  document: string; // CNPJ  email: string;
  phone: string;
  address: LGPDAddress;
  contractDate: Date;
  contractUrl: string;
  purposes: Array<LGPDPurpose>;
  categories: Array<LGPDDataCategory>;
  securityMeasures: Array<LGPDSecurityMeasure>;
  status: 'active' | 'inactive' | 'suspended';
}

export interface LGPDInternationalTransfer {
  id: string;
  country: string;
  organization: string;
  adequacyDecision: boolean;
  safeguards: Array<LGPDSafeguard>;
  purposes: Array<LGPDPurpose>;
  categories: Array<LGPDDataCategory>;
  startDate: Date;
  endDate: Date;
  status: 'active' | 'suspended' | 'terminated';
}

export interface LGPDSafeguard {
  type: any;
  | 'binding_corporate_rules'
  | "standard_contractual_clauses" | "certification" | "code_of_conduct";
  description: string;
  documentUrl: string;
  validUntil: Date;
}

export interface LGPDRetentionPeriod {
  duration: number;
  unit: 'days' | 'months' | 'years';
  startEvent: string; // e.g., 'data_collection', 'contract_end', 'consent_withdrawal'  endEvent: string; // e.g., 'purpose_fulfilled', 'legal_obligation_end'  exceptions: Array<string>;
}

export interface LGPDSecurityMeasure {
  id: string;
  type: LGPDSecurityType;
  description: string;
  implementation: string;
  responsible: string;
  lastReview: Date;
  nextReview: Date;
  status: 'implemented' | "planned" | "under_review" | "non_compliant";
}

export interface LGPDRiskAssessment {
  id: string;
  riskLevel: 'low' | "medium" | "high" | "very_high";
  likelihood: number; // 1-5  impact: number; // 1-5  riskScore: number; // likelihood * impact  threats: Array<LGPDThreat>;
  vulnerabilities: Array<LGPDVulnerability>;
  mitigationMeasures: Array<LGPDMitigationMeasure>;
  residualRisk: number;
  assessmentDate: Date;
  nextAssessment: Date;
  assessor: string;
}

export interface LGPDThreat {
  id: string;
  name: string;
  description: string;
  type: 'internal' | 'external' | 'environmental';
  likelihood: number; // 1-5  impact: number; // 1-5;
}

export interface LGPDVulnerability {
  id: string;
  name: string;
  description: string;
  severity: 'low' | "medium" | "high" | "critical";
  exploitability: number; // 1-5  affectedSystems: Array<string>;
}

export interface LGPDMitigationMeasure {
  id: string;
  name: string;
  description: string;
  type: 'preventive' | 'detective' | 'corrective';
  effectiveness: number; // 1-5  cost: 'low' | 'medium' | 'high';
  implementationDate: Date;
  responsible: string;
  status: 'planned' | "in_progress" | "implemented" | "verified";
}

export interface LGPDIncident {
  id: string;
  title: string;
  description: string;
  type: LGPDIncidentType;
  severity: 'low' | "medium" | "high" | "critical";
  status: LGPDIncidentStatus;
  detectionDate: Date;
  reportDate: Date;
  resolutionDate: Date;
  affectedDataSubjects: number;
  dataCategories: Array<LGPDDataCategory>;
  rootCause: string;
  impact: LGPDIncidentImpact;
  response: LGPDIncidentResponse;
  lessons: Array<string>;
  reportedToANPD: boolean;
  anpdReportDate: Date;
  anpdReference: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface LGPDIncidentImpact {
  dataSubjectsAffected: number;
  dataVolume: string;
  financialLoss: number;
  reputationalDamage: 'none' | "low" | "medium" | "high";
  operationalImpact: 'none' | "low" | "medium" | "high";
  regulatoryConsequences: Array<string>;
}

export interface LGPDIncidentResponse {
  containmentActions: Array<LGPDResponseAction>;
  investigationActions: Array<LGPDResponseAction>;
  recoveryActions: Array<LGPDResponseAction>;
  communicationActions: Array<LGPDResponseAction>;
  preventionActions: Array<LGPDResponseAction>;
}

export interface LGPDResponseAction {
  id: string;
  description: string;
  responsible: string;
  dueDate: Date;
  completionDate: Date;
  status: 'pending' | "in_progress" | "completed" | "cancelled";
  evidence: string;
}

// Enums and Constantsexport type LGPDPurpose =
  | 'consent_execution'
  | 'legal_obligation'
  | 'public_interest'
  | 'legitimate_interest'
  | 'vital_interest'
  | 'contract_execution'
  | 'credit_protection'
  | 'health_protection'
  | 'fraud_prevention'
  | 'security'
  | 'research'
  | "marketing" | "profiling" | "other";

export type LGPDLegalBasis =
  | 'consent'
  | 'contract'
  | 'legal_obligation'
  | 'vital_interests'
  | 'public_task'
  | "legitimate_interests" | "credit_protection" | "health_protection";

export type LGPDConsentStatus =
  | 'given'
  | 'withdrawn'
  | "expired" | "pending" | "refused";

export type LGPDDataCategory =
  | 'identification'
  | 'contact'
  | 'demographic'
  | 'financial'
  | 'health'
  | 'biometric'
  | 'location'
  | 'behavioral'
  | 'professional'
  | 'educational'
  | 'family'
  | 'social'
  | "criminal" | "sensitive" | "other";

export type LGPDProcessingType =
  | 'collection'
  | 'storage'
  | 'use'
  | 'disclosure'
  | 'transmission'
  | 'deletion'
  | 'anonymization'
  | 'pseudonymization'
  | "profiling" | "automated_decision" | "other";

export type LGPDRequestType =
  | 'access'
  | 'rectification'
  | 'deletion'
  | 'portability'
  | 'consent_withdrawal'
  | 'processing_restriction'
  | 'objection'
  | "information" | "complaint" | "other";

export type LGPDRequestStatus =
  | 'received'
  | 'under_review'
  | 'in_progress'
  | 'completed'
  | 'rejected'
  | "partially_completed" | "cancelled" | "escalated";

export type LGPDAuditAction =
  | 'create'
  | 'read'
  | 'update'
  | 'delete'
  | 'export'
  | 'share'
  | 'anonymize'
  | 'pseudonymize'
  | 'consent_given'
  | 'consent_withdrawn'
  | 'request_submitted'
  | "request_processed" | "incident_detected" | "incident_resolved";

export type LGPDDataSource =
  | 'data_subject'
  | 'third_party'
  | 'public_records'
  | 'website'
  | 'mobile_app'
  | 'social_media'
  | 'surveys'
  | "cookies" | "sensors" | "other";

export type LGPDDataRecipient =
  | 'internal_team'
  | 'service_provider'
  | 'business_partner'
  | 'government_agency'
  | 'law_enforcement'
  | 'court'
  | 'regulatory_authority'
  | "data_subject" | "public" | "other";

export type LGPDSecurityType =
  | 'encryption'
  | 'access_control'
  | 'authentication'
  | 'authorization'
  | 'audit_logging'
  | 'backup'
  | 'disaster_recovery'
  | 'network_security'
  | 'physical_security'
  | 'training'
  | "policy" | "procedure" | "other";

export type LGPDIncidentType =
  | 'data_breach'
  | 'unauthorized_access'
  | 'data_loss'
  | 'system_compromise'
  | 'human_error'
  | 'malicious_attack'
  | 'technical_failure'
  | "natural_disaster" | "theft" | "other";

export type LGPDIncidentStatus =
  | 'detected'
  | 'investigating'
  | 'contained'
  | "resolved" | "closed" | "escalated";

// Compliance Statusexport interface LGPDComplianceStatus {
  overall: LGPDComplianceLevel;
  dataInventory: LGPDComplianceLevel;
  consentManagement: LGPDComplianceLevel;
  dataSubjectRights: LGPDComplianceLevel;
  securityMeasures: LGPDComplianceLevel;
  incidentResponse: LGPDComplianceLevel;
  training: LGPDComplianceLevel;
  documentation: LGPDComplianceLevel;
  lastAssessment: Date;
  nextAssessment: Date;
  assessor: string;
  recommendations: Array<LGPDRecommendation>;
}

export type LGPDComplianceLevel =
  | 'non_compliant'
  | 'partially_compliant'
  | "mostly_compliant" | "fully_compliant" | "not_assessed";

export interface LGPDRecommendation {
  id: string;
  category: string;
  priority: 'low' | "medium" | "high" | "critical";
  description: string;
  action: string;
  responsible: string;
  dueDate: Date;
  status: 'open' | "in_progress" | "completed" | "cancelled";
  evidence: string;
}

// Automation Typesexport interface LGPDAutomationRule {
  id: string;
  name: string;
  description: string;
  trigger: LGPDAutomationTrigger;
  conditions: Array<LGPDAutomationCondition>;
  actions: Array<LGPDAutomationAction>;
  enabled: boolean;
  priority: number;
  lastExecuted: Date;
  executionCount: number;
  successCount: number;
  failureCount: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface LGPDAutomationTrigger {
  type: 'schedule' | "event" | "request" | "threshold";
  configuration: Record<string, any>;
}

export interface LGPDAutomationCondition {
  field: string;
  operator: any;
  | 'equals'
  | 'not_equals'
  | 'contains'
  | 'not_contains'
  | 'greater_than'
  | "less_than" | "in" | "not_in";
  value: any;
  logicalOperator: 'and' | 'or';
}

export interface LGPDAutomationAction {
  type: any;
  | 'notify'
  | 'delete'
  | 'anonymize'
  | 'export'
  | 'update'
  | "create_request" | "send_email" | "log";
  configuration: Record<string, any>;
  order: number;
}

export interface LGPDAutomationExecution {
  id: string;
  ruleId: string;
  trigger: string;
  startTime: Date;
  endTime: Date;
  status: 'running' | "completed" | "failed" | "cancelled";
  result: Record<string, any>;
  error: string;
  affectedRecords: number;
  logs: Array<LGPDAutomationLog>;
}

export interface LGPDAutomationLog {
  timestamp: Date;
  level: 'info' | 'warning' | 'error';
  message: string;
  details: Record<string, any>;
}
