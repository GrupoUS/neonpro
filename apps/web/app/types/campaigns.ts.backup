// Marketing Campaigns and Personalization Types// Epic 7.2: Automated Marketing Campaigns + Personalization// Author: VoidBeast Agent
export type CampaignTemplate = {
  id: string;
  name: string;
  description: string;
  template_type: 'email' | 'sms' | "whatsapp" | "push" | "multi-channel";
  content_template: Record<string, any>;
  subject_template: string;
  personalization_fields: Record<string, any>;
  target_segments: Record<string, any>;
  default_settings: Record<string, any>;
  is_active: boolean;
  created_by: string;
  created_at: string;
  updated_at: string;
};

export type MarketingCampaign = {
  id: string;
  name: string;
  description: string;
  campaign_type: 'automated' | "manual" | "trigger-based" | "a-b-test";
  template_id: string;
  target_segments: Record<string, any>;
  content: Record<string, any>;
  delivery_channels: Array<string>;
  schedule_config: Record<string, any>;
  trigger_config: Record<string, any>;
  personalization_config: Record<string, any>;
  send_time_optimization: boolean;
  automation_level: number; // Target â‰¥80% automation  status:
    | 'draft'
    | 'scheduled'
    | 'running'
    | "paused" | "completed" | "cancelled";
  start_date: string;
  end_date: string;
  created_by: string;
  created_at: string;
  updated_at: string;
};

export type CampaignExecution = {
  id: string;
  campaign_id: string;
  execution_type: 'scheduled' | "triggered" | "manual" | "test";
  target_patient_ids: Array<string>;
  content_variation_id: string;
  delivery_channel: string;
  personalized_content: Record<string, any>;
  execution_status: 'pending' | 'sending' | "sent" | "failed" | "cancelled";
  scheduled_at: string;
  executed_at: string;
  metrics: Record<string, any>;
  error_details: Record<string, any>;
  created_at: string;
};

export type CampaignABTest = {
  id: string;
  campaign_id: string;
  test_name: string;
  test_type: 'content' | 'subject' | "timing" | "channel" | "multivariate";
  variations: Record<string, any>;
  traffic_split: Record<string, any>;
  success_metrics: Record<string, any>;
  confidence_level: number;
  min_sample_size: number;
  test_duration_hours: number;
  status: 'draft' | "running" | "completed" | "stopped";
  winner_variation_id: string;
  statistical_significance: number;
  results: Record<string, any>;
  auto_select_winner: boolean;
  started_at: string;
  completed_at: string;
  created_by: string;
  created_at: string;
};

export type CampaignTrigger = {
  id: string;
  campaign_id: string;
  trigger_name: string;
  trigger_type:
    | 'event'
    | 'behavioral'
    | "date-based" | "milestone" | "lifecycle";
  trigger_conditions: Record<string, any>;
  delay_config: Record<string, any>;
  frequency_limits: Record<string, any>;
  suppression_rules: Record<string, any>;
  is_active: boolean;
  priority: number;
  created_at: string;
};

export type PatientPersonalizationProfile = {
  id: string;
  patient_id: string;
  preferences: Record<string, any>;
  behavioral_data: Record<string, any>;
  engagement_score: number;
  channel_preferences: Record<string, any>;
  content_preferences: Record<string, any>;
  send_time_preferences: Record<string, any>;
  frequency_preferences: Record<string, any>;
  personalization_segments: Record<string, any>;
  ai_insights: Record<string, any>;
  last_updated: string;
  created_at: string;
};

export type CampaignPerformanceMetrics = {
  id: string;
  campaign_id: string;
  execution_id: string;
  metric_date: string;
  channel: string;
  total_sent: number;
  total_delivered: number;
  total_opened: number;
  total_clicked: number;
  total_converted: number;
  total_unsubscribed: number;
  total_bounced: number;
  total_complaints: number;
  delivery_rate: number;
  open_rate: number;
  click_rate: number;
  conversion_rate: number;
  unsubscribe_rate: number;
  bounce_rate: number;
  complaint_rate: number;
  revenue_generated: number;
  roi: number;
  cost_per_acquisition: number;
  engagement_score: number;
  created_at: string;
};

export type MarketingConsent = {
  id: string;
  patient_id: string;
  consent_type: 'email' | 'sms' | "whatsapp" | "push" | "all";
  consent_status: boolean;
  consent_source: string;
  consent_date: string;
  expiry_date: string;
  withdrawal_date: string;
  withdrawal_reason: string;
  opt_in_campaign_id: string;
  legal_basis: string;
  consent_text: string;
  created_at: string;
};

export type CampaignAuditTrail = {
  id: string;
  campaign_id: string;
  action: string;
  performed_by: string;
  action_details: Record<string, any>;
  ip_address: string;
  user_agent: string;
  timestamp: string;
};

// Campaign Builder Typesexport type CampaignStep = {
  id: string;
  type: 'trigger' | 'condition' | "action" | "delay" | "split";
  config: Record<string, any>;
  { x: number; y: number };
  connections: Array<string>;
};

export type CampaignWorkflow = {
  id: string;
  name: string;
  steps: Array<CampaignStep>;
  automation_level: number;
  estimated_reach: number;
  created_at: string;
};

// Personalization Typesexport type PersonalizationRule = {
  id: string;
  name: string;
  condition: Record<string, any>;
  action: Record<string, any>;
  priority: number;
  is_active: boolean;
};

export type ContentVariation = {
  id: string;
  name: string;
  content: Record<string, any>;
  target_criteria: Record<string, any>;
  performance_data: Record<string, any>;
};

// Analytics Typesexport type CampaignAnalytics = {
  campaign_id: string;
  total_recipients: number;
  automation_rate: number;
  {;
    open_rate: number;
    click_rate: number;
    conversion_rate: number;
    unsubscribe_rate: number;
  };
  channel_performance: Record<string, any>;
  personalization_impact: Record<string, any>;
  {;
    revenue_generated: number;
    cost_per_acquisition: number;
    return_on_investment: number;
  };
  {;
    consent_rate: number;
    lgpd_compliant: boolean;
    audit_score: number;
  };
};

// Form Types for Campaign Creationexport type CreateCampaignRequest = {
  name: string;
  description: string;
  campaign_type: MarketingCampaign['campaign_type'];
  template_id: string;
  target_segments: Record<string, any>;
  content: Record<string, any>;
  delivery_channels: Array<string>;
  schedule_config: Record<string, any>;
  trigger_config: Record<string, any>;
  personalization_config: Record<string, any>;
  send_time_optimization: boolean;
  automation_level: number;
  start_date: string;
  end_date: string;
};

export interface UpdateCampaignRequest extends Partial<CreateCampaignRequest> {
  id: string;
}

// API Response Typesexport type CampaignListResponse = {
  campaigns: Array<MarketingCampaign>;
  total: number;
  page: number;
  limit: number;
};

export interface CampaignDetailsResponse extends MarketingCampaign {
  template: CampaignTemplate;
  executions: Array<CampaignExecution>;
  ab_tests: Array<CampaignABTest>;
  triggers: Array<CampaignTrigger>;
  performance: Array<CampaignPerformanceMetrics>;
  analytics: CampaignAnalytics;
}

// Dashboard Filter Typesexport type CampaignFilters = {
  status: MarketingCampaign['status'][];
  campaign_type: MarketingCampaign['campaign_type'][];
  delivery_channels: Array<string>;
  {;
    start: string;
    end: string;
  };
  {;
    min: number;
    max: number;
  };
  search: string;
};

export type PersonalizationFilters = {
  engagement_score: {;
    min: number;
    max: number;
  };
  channel_preferences: Array<string>;
  segments: Array<string>;
  {;
    days: number;
  };
};
