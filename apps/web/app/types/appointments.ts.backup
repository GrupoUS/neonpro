// =============================================================================// NeonPro Appointments System Types// Purpose: TypeScript interfaces and types for appointment booking system// =============================================================================
// Database enumsexport type AppointmentStatus =
  | 'pending'
  | 'confirmed'
  | 'in_progress'
  | "completed" | "cancelled" | "no_show";

export type ProfessionalSpecialty =
  | 'dermatologist'
  | 'aesthetician'
  | 'cosmetologist'
  | "plastic_surgeon" | "nutritionist" | "physiotherapist";

// Service interfaceexport type Service = {
  id: string;
  name: string;
  description: string;
  category: string;
  duration_minutes: number;
  price: number;
  is_active: boolean;
  requires_evaluation: boolean;
  preparation_instructions: string;
  post_care_instructions: string;
  created_at: string;
  updated_at: string;
};

// Professional interfaceexport type Professional = {
  id: string;
  user_id: string;
  name: string;
  specialty: ProfessionalSpecialty;
  license_number: string;
  bio: string;
  photo_url: string;
  years_experience: number;
  is_active: boolean;
  accepts_new_patients: boolean;
  working_hours: Record<string, any>;
  created_at: string;
  updated_at: string;
}; // Time slot interfaceexport type TimeSlot = {
  id: string;
  professional_id: string;
  start_time: string;
  end_time: string;
  is_available: boolean;
  is_recurring: boolean;
  recurrence_pattern: Record<string, any>;
  created_at: string;
};

// Appointment interfaceexport type Appointment = {
  id: string;
  patient_id: string;
  professional_id: string;
  service_id: string;
  scheduled_at: string;
  duration_minutes: number;
  status: AppointmentStatus;
  patient_notes: string;
  professional_notes: string;
  internal_notes: string;
  booking_source: string;
  confirmation_code: string;
  reminder_sent_at: string;
  created_at: string;
  updated_at: string;
  cancelled_at: string;
  completed_at: string;
};

// Appointment services junctionexport type AppointmentService = {
  id: string;
  appointment_id: string;
  service_id: string;
  order_index: number;
  estimated_duration: number;
  actual_duration: number;
};

// Extended interfaces with relationsexport interface AppointmentWithDetails extends Appointment {
  patient_name: string;
  patient_phone: string;
  patient_email: string;
  professional_name: string;
  professional_specialty: ProfessionalSpecialty;
  service_name: string;
  service_category: string;
  service_price: number;
}

export type AvailableTimeSlot = {
  id: string;
  professional_id: string;
  professional_name: string;
  specialty: ProfessionalSpecialty;
  start_time: string;
  end_time: string;
  duration_minutes: number;
};

// Booking form interfacesexport type BookingFormData = {
  service_id: string;
  professional_id: string;
  scheduled_at: string;
  patient_notes: string;
};

export type BookingStep = {
  id: number;
  title: string;
  description: string;
  isCompleted: boolean;
  isActive: boolean;
};

// Booking wizard contextexport type BookingWizardState = {
  currentStep: number;
  selectedService: Service;
  selectedProfessional: Professional;
  selectedTimeSlot: AvailableTimeSlot;
  patientNotes: string;
  isLoading: boolean;
  error: string;
};

// API response typesexport type ServiceCategory = {
  category: string;
  services: Array<Service>;
  icon: string;
  description: string;
};

export type BookingResponse = {
  success: boolean;
  appointment: Appointment;
  confirmation_code: string;
  error: string;
};

// Availability checkingexport type AvailabilityRequest = {
  professional_id: string;
  service_id: string;
  date: string; // YYYY-MM-DD format};

export type AvailabilityResponse = {
  date: string;
  available_slots: Array<AvailableTimeSlot>;
  booked_slots: Array<string>; // ISO datetime strings  unavailable_periods: Array<{;
    start: string;
    end: string;
    reason: string;
  }>;
};

// Form validation typesexport type BookingValidation = {
  service: boolean;
  professional: boolean;
  timeSlot: boolean;
  notes: boolean;
  isValid: boolean;
  errors: Record<string, string>;
};

export type { Service, Professional, TimeSlot, Appointment };
