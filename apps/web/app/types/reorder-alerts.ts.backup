// Types for Automated Reorder Alerts and Threshold Management// Story 6.2: Automated Reorder Alerts + Threshold Management
// Base interfacesexport type ReorderThreshold = {
  id: string;
  item_id: string;
  clinic_id: string;

  // Threshold levels  reorder_point: number;
  safety_stock: number;
  maximum_stock: number;
  minimum_order_quantity: number;

  // Intelligent calculations  calculated_reorder_point: number;
  calculated_safety_stock: number;
  demand_forecast_weekly: number;
  seasonal_adjustment_factor: number;
  lead_time_days: number;

  // Alert levels  warning_threshold_percentage: number;
  critical_threshold_percentage: number;
  emergency_threshold_percentage: number;

  // Automation settings  auto_reorder_enabled: boolean;
  preferred_supplier_id: string;
  budget_approval_required: boolean;
  budget_threshold_amount: number;

  // Metadata  is_active: boolean;
  last_calculation_date: string;
  created_at: string;
  updated_at: string;
};

export type ReorderAlert = {
  id: string;
  item_id: string;
  threshold_id: string;
  clinic_id: string;

  // Alert details  alert_type: 'warning' | 'critical' | "emergency" | "reorder" | "overstock";
  alert_level: number; // 1-5  current_stock: number;
  recommended_order_quantity: number;
  estimated_stockout_date: string;

  // Message and context  alert_title: string;
  alert_message: string;
  context_data: Record<string, any>;

  // Status and tracking  status: 'pending' | 'acknowledged' | "resolved" | "escalated" | "dismissed";
  priority: 'low' | 'medium' | "high" | "critical" | "emergency";

  // Escalation  escalation_level: number;
  escalated_to: string;
  escalated_at: string;

  // Resolution  acknowledged_by: string;
  acknowledged_at: string;
  resolved_by: string;
  resolved_at: string;
  resolution_notes: string;

  // Purchase order integration  purchase_order_id: string;
  auto_generated: boolean;

  // Delivery tracking  notification_sent: boolean;
  notification_channels: Array<string>;
  delivery_time_ms: number;

  // Metadata  expires_at: string;
  created_at: string;
  updated_at: string;
};

export type DemandForecast = {
  id: string;
  item_id: string;
  clinic_id: string;

  // Forecast period  forecast_date: string;
  forecast_period: 'daily' | "weekly" | "monthly" | "quarterly";

  // Forecast data  predicted_demand: number;
  confidence_interval: number;
  seasonal_factor: number;
  trend_factor: number;

  // Historical analysis  historical_average: number;
  variance: number;
  standard_deviation: number;

  // Context  special_events: Array<any>;
  promotion_impact: number;
  appointment_based_demand: number;

  // Accuracy tracking  actual_demand: number;
  forecast_accuracy: number;
  model_version: string;

  // Metadata  calculated_at: string;
  created_at: string;
};

export type PurchaseOrder = {
  id: string;
  clinic_id: string;
  supplier_id: string;

  // Order details  order_number: string;
  order_type: 'reorder' | "emergency" | "bulk" | "special";

  // Financial  subtotal: number;
  tax_amount: number;
  shipping_amount: number;
  discount_amount: number;
  total_amount: number;
  currency: string;

  // Status tracking  status:
    | 'draft'
    | 'pending_approval'
    | 'approved'
    | 'sent'
    | 'confirmed'
    | "partially_received" | "received" | "cancelled";
  priority: 'low' | "medium" | "high" | "urgent";

  // Dates  order_date: string;
  requested_delivery_date: string;
  confirmed_delivery_date: string;
  actual_delivery_date: string;

  // Automation  auto_generated: boolean;
  generated_from_alert_id: string;

  // Approval workflow  requires_approval: boolean;
  approved_by: string;
  approved_at: string;
  approval_notes: string;

  // Supplier communication  sent_to_supplier: boolean;
  sent_at: string;
  supplier_confirmation: string;
  supplier_order_number: string;

  // Notes and context  notes: string;
  internal_notes: string;
  context_data: Record<string, any>;

  // Metadata  created_by: string;
  created_at: string;
  updated_at: string;
};

export type PurchaseOrderItem = {
  id: string;
  purchase_order_id: string;
  item_id: string;

  // Order details  quantity: number;
  unit_price: number;
  total_price: number;

  // Received tracking  quantity_received: number;
  quantity_remaining: number;

  // Item details at time of order  item_name: string;
  item_sku: string;
  item_description: string;
  supplier_item_code: string;

  // Quality control  quality_check_required: boolean;
  quality_check_passed: boolean;
  quality_notes: string;

  // Metadata  created_at: string;
  updated_at: string;
};

export type ApprovalWorkflow = {
  id: string;
  clinic_id: string;

  // Workflow details  workflow_name: string;
  workflow_type: 'purchase_order' | 'budget_approval' | 'emergency_order';

  // Trigger conditions  trigger_amount_threshold: number;
  trigger_item_categories: Array<string>;
  trigger_suppliers: Array<string>;

  // Approval chain  approval_chain: Array<string>; // Array of user IDs in order  current_step: number;

  // Settings  parallel_approval: boolean;
  auto_approve_conditions: Record<string, any>;
  escalation_timeout_hours: number;

  // Status  is_active: boolean;

  // Metadata  created_by: string;
  created_at: string;
  updated_at: string;
};

export type SupplierLeadTime = {
  id: string;
  supplier_id: string;
  item_id: string;
  average_lead_time_days: number;
  minimum_lead_time_days: number;
  maximum_lead_time_days: number;
  reliability_score: number;
  last_updated: string;
  created_at: string;
  updated_at: string;
};

// Dashboard and analytics interfacesexport type AlertDashboard = {
  id: string;
  alert_type: ReorderAlert['alert_type'];
  alert_level: number;
  priority: ReorderAlert['priority'];
  status: ReorderAlert['status'];
  alert_title: string;
  alert_message: string;
  current_stock: number;
  recommended_order_quantity: number;
  estimated_stockout_date: string;
  created_at: string;
  acknowledged_at: string;
  resolved_at: string;
  item_name: string;
  item_sku: string;
  item_category: string;
  item_unit: string;
  reorder_point: number;
  safety_stock: number;
  maximum_stock: number;
  is_recent: boolean;
  hours_since_created: number;
};

export type AlertsStats = {
  total_alerts: number;
  pending_alerts: number;
  critical_alerts: number;
  emergency_alerts: number;
  resolved_today: number;
  average_resolution_time_hours: number;
  alerts_by_type: Record<string, number>;
  alerts_by_priority: Record<string, number>;
  trend_data: Array<{;
    date: string;
    alerts_created: number;
    alerts_resolved: number;
  }>;
};

export type ThresholdOptimization = {
  item_id: string;
  item_name: string;
  current_reorder_point: number;
  recommended_reorder_point: number;
  current_safety_stock: number;
  recommended_safety_stock: number;
  optimization_reason: string;
  potential_savings: number;
  confidence_score: number;
  implementation_priority: 'low' | 'medium' | 'high';
};

export type InventoryOptimization = {
  total_items_analyzed: number;
  items_needing_optimization: number;
  potential_cost_savings: number;
  storage_space_optimization: number;
  service_level_improvement: number;
  recommendations: Array<ThresholdOptimization>;
  last_analysis_date: string;
};

// Form interfaces for API requestsexport type CreateReorderThresholdRequest = {
  item_id: string;
  clinic_id: string;
  reorder_point: number;
  safety_stock: number;
  maximum_stock: number;
  minimum_order_quantity: number;
  auto_reorder_enabled: boolean;
  preferred_supplier_id: string;
  budget_approval_required: boolean;
  budget_threshold_amount: number;
};

export interface UpdateReorderThresholdRequest
  extends Partial<CreateReorderThresholdRequest> {
  id: string;
}

export type CreateReorderAlertRequest = {
  item_id: string;
  threshold_id: string;
  clinic_id: string;
  alert_type: ReorderAlert['alert_type'];
  alert_level: number;
  current_stock: number;
  alert_title: string;
  alert_message: string;
  priority: ReorderAlert['priority'];
  recommended_order_quantity: number;
  estimated_stockout_date: string;
  context_data: Record<string, any>;
};

export type UpdateReorderAlertRequest = {
  id: string;
  status: ReorderAlert['status'];
  resolution_notes: string;
  acknowledged_by: string;
  resolved_by: string;
  escalated_to: string;
};

export type CreatePurchaseOrderRequest = {
  clinic_id: string;
  supplier_id: string;
  order_type: PurchaseOrder['order_type'];
  items: Array<{;
    item_id: string;
    quantity: number;
    unit_price: number;
  }>;
  priority: PurchaseOrder['priority'];
  requested_delivery_date: string;
  notes: string;
  auto_generated: boolean;
  generated_from_alert_id: string;
};

export type UpdatePurchaseOrderRequest = {
  id: string;
  status: PurchaseOrder['status'];
  supplier_confirmation: string;
  supplier_order_number: string;
  confirmed_delivery_date: string;
  actual_delivery_date: string;
  notes: string;
};

// API response interfacesexport type AlertsResponse = {
  alerts: Array<ReorderAlert>;
  total: number;
  stats: AlertsStats;
};

export type ThresholdsResponse = {
  thresholds: Array<ReorderThreshold>;
  total: number;
  optimization_recommendations: Array<ThresholdOptimization>;
};

export type PurchaseOrdersResponse = {
  purchase_orders: Array<PurchaseOrder>;
  total: number;
  pending_approvals: number;
  total_value: number;
};

export type DemandForecastResponse = {
  forecasts: Array<DemandForecast>;
  accuracy_metrics: {;
    overall_accuracy: number;
    accuracy_by_period: Record<string, number>;
    model_performance: Record<string, number>;
  };
};

// Utility typesexport type AlertFilter = {
  status: ReorderAlert['status'][];
  priority: ReorderAlert['priority'][];
  alert_type: ReorderAlert['alert_type'][];
  {;
    start: string;
    end: string;
  };
  item_category: Array<string>;
  clinic_id: string;
};

export type ThresholdFilter = {
  item_category: Array<string>;
  auto_reorder_enabled: boolean;
  needs_optimization: boolean;
  clinic_id: string;
};

export type PurchaseOrderFilter = {
  status: PurchaseOrder['status'][];
  priority: PurchaseOrder['priority'][];
  order_type: PurchaseOrder['order_type'][];
  date_range: {;
    start: string;
    end: string;
  };
  supplier_id: string;
  clinic_id: string;
};

// Event types for real-time updatesexport type ReorderEvent = {
  type:
    | 'alert_created'
    | 'alert_acknowledged'
    | "alert_resolved" | "threshold_updated" | "order_created";
  data: ReorderAlert | ReorderThreshold | PurchaseOrder;
  timestamp: string;
  clinic_id: string;
};

export type NotificationChannel =
  | 'dashboard'
  | 'email'
  | "sms" | "push" | "webhook";

export type NotificationSettings = {
  clinic_id: string;
  user_id: string;
  channels: Array<NotificationChannel>;
  alert_types: ReorderAlert['alert_type'][];
  priority_threshold: ReorderAlert['priority'];
  quiet_hours: {;
    start: string; // HH:mm format    end: string; // HH:mm format  };
  frequency_limit: {;
    max_per_hour: number;
    max_per_day: number;
  };
};
