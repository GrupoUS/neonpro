// app/types/automated-before-after-analysis.ts// TypeScript types for Story 10.1: Automated Before/After Analysis
export type AnalysisEngineConfig = {
  id: string;
  engine_name: string;
  model_version: string;
  accuracy_threshold: number;
  processing_timeout_seconds: number;
  feature_extraction_config: Record<string, any>;
  measurement_metrics: Record<string, any>;
  is_active: boolean;
  created_at: string;
  updated_at: string;
};

export type PhotoAnalysisSession = {
  id: string;
  patient_id: string;
  treatment_type: string;
  session_name: string;
  analysis_type: 'before_after' | 'progress_tracking' | 'treatment_validation';
  status: 'pending' | 'processing' | "completed" | "failed" | "queued";
  started_at: string;
  completed_at: string;
  processing_time_seconds: number;
  total_photos: number;
  processed_photos: number;
  accuracy_score: number;
  confidence_level: number;
  created_by: string;
  created_at: string;
  updated_at: string;
};

export type BeforeAfterPhotoPair = {
  id: string;
  session_id: string;
  before_photo_id: string;
  after_photo_id: string;
  treatment_area: string;
  pair_type: 'frontal' | 'profile' | "close_up" | "full_body" | "specific_area";
  time_between_days: number;
  analysis_status: 'pending' | "analyzed" | "failed" | "manual_review";
  improvement_percentage: number;
  comparison_score: number;
  created_at: string;
  updated_at: string;
};

export type ImageAnalysisResult = {
  id: string;
  photo_pair_id: string;
  analysis_engine: string;
  analysis_timestamp: string;
  processing_time_ms: number;
  feature_vectors: Record<string, any>;
  measurement_data: Record<string, any>;
  change_detection: Record<string, any>;
  quality_metrics: Record<string, any>;
  annotations: Record<string, any>;
  confidence_scores: Record<string, any>;
  raw_analysis_data: Record<string, any>;
  created_at: string;
};

export type MeasurementMetric = {
  id: string;
  metric_name: string;
  metric_type:
    | 'distance'
    | 'area'
    | 'volume'
    | 'angle'
    | "texture" | "color" | "symmetry";
  measurement_unit: string;
  calculation_method: string;
  accuracy_weight: number;
  is_active: boolean;
  description: string;
  validation_rules: Record<string, any>;
  created_at: string;
  updated_at: string;
};

export type TreatmentArea = {
  id: string;
  area_name: string;
  area_category: 'facial' | 'body' | "specific" | "surgical" | "cosmetic";
  anatomical_region: string;
  measurement_points: Record<string, any>;
  standard_views: Record<string, any>;
  analysis_parameters: Record<string, any>;
  is_active: boolean;
  created_at: string;
  updated_at: string;
};

export type VisualAnnotation = {
  id: string;
  analysis_result_id: string;
  annotation_type:
    | 'highlight'
    | 'measurement'
    | "comparison" | "change_area" | "improvement_zone";
  coordinates: Record<string, any>;
  annotation_data: Record<string, any>;
  style_properties: Record<string, any>;
  description: string;
  is_visible: boolean;
  created_at: string;
};

export type AnalysisReport = {
  id: string;
  session_id: string;
  report_type:
    | 'summary'
    | 'detailed'
    | "patient_consultation" | "clinical" | "research";
  report_title: string;
  generated_at: string;
  report_data: Record<string, any>;
  export_formats: Record<string, any>;
  template_used: string;
  generated_by: string;
  is_public: boolean;
  created_at: string;
};

export type QualityValidation = {
  id: string;
  analysis_result_id: string;
  validation_type: 'automated' | "manual" | "peer_review" | "expert_validation";
  validator_id: string;
  validation_status: 'pending' | "approved" | "rejected" | "needs_review";
  accuracy_assessment: number;
  quality_score: number;
  validation_notes: string;
  validation_data: Record<string, any>;
  validated_at: string;
  created_at: string;
};

export type MLModelTraining = {
  id: string;
  model_name: string;
  model_version: string;
  training_dataset_size: number;
  validation_dataset_size: number;
  training_start: string;
  training_end: string;
  accuracy_achieved: number;
  precision_score: number;
  recall_score: number;
  f1_score: number;
  training_parameters: Record<string, any>;
  model_weights_path: string;
  deployment_status: 'training' | "completed" | "deployed" | "archived";
  performance_metrics: Record<string, any>;
  created_at: string;
  updated_at: string;
};

// API Request/Response typesexport type CreateAnalysisSessionRequest = {
  patient_id: string;
  treatment_type: string;
  session_name: string;
  analysis_type: PhotoAnalysisSession['analysis_type'];
};

export type CreatePhotoPairRequest = {
  session_id: string;
  before_photo_id: string;
  after_photo_id: string;
  treatment_area: string;
  pair_type: BeforeAfterPhotoPair['pair_type'];
  time_between_days: number;
};

export type StartAnalysisRequest = {
  session_id: string;
  engine_config_id: string;
  analysis_parameters: Record<string, any>;
};

export type AnalysisProgressResponse = {
  session_id: string;
  status: PhotoAnalysisSession['status'];
  progress_percentage: number;
  processed_photos: number;
  total_photos: number;
  estimated_completion_time: string;
  current_processing: BeforeAfterPhotoPair;
};

export type ComparisonAnalysisRequest = {
  photo_pair_id: string;
  measurement_metrics: Array<string>;
  treatment_areas: Array<string>;
  quality_threshold: number;
};

export type ComparisonAnalysisResponse = {
  photo_pair_id: string;
  improvement_percentage: number;
  comparison_score: number;
  detailed_measurements: Record<string, any>;
  visual_annotations: Array<VisualAnnotation>;
  quality_assessment: QualityValidation;
  processing_time_ms: number;
};

export type GenerateReportRequest = {
  session_id: string;
  report_type: AnalysisReport['report_type'];
  template_options: Record<string, any>;
  include_sections: Array<string>;
  export_format: 'pdf' | 'html' | 'json';
};

export type BatchAnalysisRequest = {
  session_ids: Array<string>;
  analysis_parameters: Record<string, any>;
  priority_level: 'low' | 'normal' | 'high';
};

export type ModelTrainingRequest = {
  model_name: string;
  training_dataset_path: string;
  validation_dataset_path: string;
  training_parameters: Record<string, any>;
  target_accuracy: number;
};

export type AccuracyValidationRequest = {
  analysis_result_id: string;
  ground_truth_data: Record<string, any>;
  validation_type: QualityValidation['validation_type'];
  validator_notes: string;
};

export type AnnotationCreateRequest = {
  analysis_result_id: string;
  annotation_type: VisualAnnotation['annotation_type'];
  coordinates: Record<string, any>;
  annotation_data: Record<string, any>;
  style_properties: Record<string, any>;
  description: string;
};

// Filter and Search typesexport type AnalysisSessionFilters = {
  patient_id: string;
  treatment_type: string;
  analysis_type: PhotoAnalysisSession['analysis_type'];
  status: PhotoAnalysisSession['status'];
  date_from: string;
  date_to: string;
  accuracy_min: number;
  created_by: string;
};

export type PhotoPairFilters = {
  session_id: string;
  treatment_area: string;
  pair_type: BeforeAfterPhotoPair['pair_type'];
  analysis_status: BeforeAfterPhotoPair['analysis_status'];
  improvement_min: number;
  time_between_min: number;
  time_between_max: number;
};

export type AnalysisResultFilters = {
  photo_pair_id: string;
  analysis_engine: string;
  processing_time_max: number;
  confidence_min: number;
  date_from: string;
  date_to: string;
};

export type ReportFilters = {
  session_id: string;
  report_type: AnalysisReport['report_type'];
  generated_by: string;
  date_from: string;
  date_to: string;
  is_public: boolean;
};

// Dashboard and Analytics typesexport type AnalysisDashboardStats = {
  total_sessions: number;
  completed_sessions: number;
  average_accuracy: number;
  average_processing_time: number;
  total_photo_pairs: number;
  analyzed_pairs: number;
  pending_validations: number;
  recent_activity: Array<PhotoAnalysisSession>;
};

export type AccuracyMetrics = {
  overall_accuracy: number;
  accuracy_by_treatment_area: Record<string, number>;
  accuracy_by_engine: Record<string, number>;
  accuracy_trend: Array<{ date: string; accuracy: number }>;
  confidence_distribution: Record<string, number>;
};

export type ProcessingMetrics = {
  average_processing_time: number;
  processing_time_by_area: Record<string, number>;
  processing_time_trend: Array<{ date: string; time_ms: number }>;
  queue_statistics: {;
    pending: number;
    processing: number;
    completed_today: number;
  };
};

export type QualityMetrics = {
  validation_success_rate: number;
  manual_review_rate: number;
  accuracy_validation_results: Record<string, number>;
  quality_score_distribution: Record<string, number>;
  improvement_validation: {;
    accurate_predictions: number;
    false_positives: number;
    false_negatives: number;
  };
};

// Export grouped typesexport type BeforeAfterAnalysisTypes = {
  AnalysisEngineConfig: AnalysisEngineConfig;
  PhotoAnalysisSession: PhotoAnalysisSession;
  BeforeAfterPhotoPair: BeforeAfterPhotoPair;
  ImageAnalysisResult: ImageAnalysisResult;
  MeasurementMetric: MeasurementMetric;
  TreatmentArea: TreatmentArea;
  VisualAnnotation: VisualAnnotation;
  AnalysisReport: AnalysisReport;
  QualityValidation: QualityValidation;
  MLModelTraining: MLModelTraining;
};
