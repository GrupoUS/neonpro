// Story 11.2: No-Show Prediction System Types// â‰¥80% accuracy requirement with multi-factor analysis
import { z } from "zod";

// Base enumsexport const RiskFactorType = z.enum([
  'historical_attendance',
  'appointment_timing',
  'demographics',
  'communication_response',
  'weather_sensitivity',
  'distance_travel',
  'appointment_type',
  'day_of_week',
  'season',
  'confirmation_pattern',
]);

export const InterventionType = z.enum([
  'targeted_reminder',
  'confirmation_request',
  'incentive_offer',
  'flexible_rescheduling',
  'personal_call',
  'priority_booking',
]);

export const AppointmentOutcome = z.enum([
  'attended',
  'no_show',
  'cancelled',
  'rescheduled',
]);

export const InterventionOutcome = z.enum([
  'successful',
  'failed',
  'no_response',
]);

// Core schemasexport const NoShowPredictionSchema = z.object({id: z.string().uuid,
    appointment_id: z.string().uuid,
  patient_id: z.string().uuid,
    risk_score: z.number.min(0).max(1),
  prediction_confidence: z.number.min(0).max(1),
    prediction_date: z.string().datetime,
  factors_analyzed: z.record(z.any),
    intervention_recommended: z.boolean,
  actual_outcome: AppointmentOutcome.optional,
    prediction_accuracy: z.number().min(0).max(1).optional,
  model_version: z.string,
    created_at: z.string().datetime,
  updated_at: z.string().datetime,
});

export const RiskFactorSchema = z.object({id: z.string().uuid,
    patient_id: z.string().uuid,
  factor_type: RiskFactorType,
    factor_value: z.number,
  weight_score: z.number.min(0).max(1),
    last_updated: z.string().datetime,
  calculation_details: z.record(z.any),
    created_at: z.string().datetime,
});

export const InterventionStrategySchema = z.object({id: z.string().uuid,
    prediction_id: z.string().uuid,
  intervention_type: InterventionType,
    trigger_time: z.string().datetime,
  executed_at: z.string().datetime().optional,
    effectiveness_score: z.number().min(0).max(1).optional,
  intervention_details: z.record(z.any),
    result_outcome: InterventionOutcome.optional,
  cost_impact: z.number,
    created_at: z.string().datetime,
  updated_at: z.string().datetime,
});

export const NoShowAnalyticsSchema = z.object({id: z.string().uuid,
    date: z.string().date,
  predicted_no_shows: z.number().int.min(0),
    actual_no_shows: z.number().int.min(0),
  accuracy_rate: z.number.min(0).max(1),
    cost_impact: z.number,
  revenue_recovered: z.number,
    interventions_executed: z.number().int.min(0),
  model_performance_metrics: z.record(z.any),
    clinic_id: z.string().uuid,
  created_at: z.string().datetime,
    updated_at: z.string().datetime,
});

// Input schemas for API endpointsexport const CreatePredictionInputSchema = z.object({appointment_id: z.string().uuid,
    patient_id: z.string().uuid,
  risk_score: z.number.min(0).max(1),
    prediction_confidence: z.number.min(0).max(1),
  factors_analyzed: z.record(z.any),
    intervention_recommended: z.boolean,
  model_version: z.string.default('v1.0'),
});

export const UpdatePredictionInputSchema = z.object({risk_score: z.number().min(0).max(1).optional,
    prediction_confidence: z.number().min(0).max(1).optional,
  factors_analyzed: z.record(z.any()).optional,
    intervention_recommended: z.boolean().optional,
  actual_outcome: AppointmentOutcome.optional,
});

export const CreateRiskFactorInputSchema = z.object({patient_id: z.string().uuid,
    factor_type: RiskFactorType,
  factor_value: z.number,
    weight_score: z.number.min(0).max(1),
  calculation_details: z.record(z.any()).optional,
});

export const CreateInterventionInputSchema = z.object({prediction_id: z.string().uuid,
    intervention_type: InterventionType,
  trigger_time: z.string().datetime,
    intervention_details: z.record(z.any()).optional,
});

export const UpdateInterventionInputSchema = z.object({executed_at: z.string().datetime().optional,
    effectiveness_score: z.number().min(0).max(1).optional,
  intervention_details: z.record(z.any()).optional,
    result_outcome: InterventionOutcome.optional,
  cost_impact: z.number().optional,
});

// Analysis and reporting schemasexport const PredictionAnalysisSchema = z.object({patient_id: z.string().uuid,
    appointment_id: z.string().uuid,
  risk_factors: z.array(RiskFactorSchema),
    historical_pattern: z.object({;
    total_appointments: z.number().int,
    no_shows: z.number().int,
    attendance_rate: z.number.min(0).max(1),
    last_attendance: z.string().datetime().optional,
  }),
  prediction_result: z.object({;
    risk_score: z.number.min(0).max(1),
    confidence: z.number.min(0).max(1),
    intervention_recommended: z.boolean,
    key_factors: z.array(z.string),
  }),
});

export const ModelPerformanceSchema = z.object({model_version: z.string,
    accuracy_rate: z.number.min(0).max(1),
  precision: z.number.min(0).max(1),
    recall: z.number.min(0).max(1),
  f1_score: z.number.min(0).max(1),
    total_predictions: z.number().int,
  correct_predictions: z.number().int,
    false_positives: z.number().int,
  false_negatives: z.number().int,
    evaluation_period: z.object({;
    start_date: z.string().date,
    end_date: z.string().date,
  }),
});

export const NoShowTrendsSchema = z.object({period: z.object({;
    start_date: z.string().date,
    end_date: z.string().date,
  }),
  overall_stats: z.object({;
    total_appointments: z.number().int,
    predicted_no_shows: z.number().int,
    actual_no_shows: z.number().int,
    accuracy_rate: z.number.min(0).max(1),
    cost_impact: z.number,
    revenue_recovered: z.number,
  }),
  trends_by_factor: z.record(
    z.object({factor_impact: z.number.min(0).max(1),
    trend_direction: z.enum(['increasing', 'decreasing', 'stable']),
      correlation_strength: z.number.min(-1).max(1),
    }),
  ),
  intervention_effectiveness: z.record(
    z.object(success_rate: z.number.min(0).max(1),
    cost_per_prevention: z.number,
      roi: z.number,),
  ),
});

// Dashboard visualization schemasexport const NoShowDashboardStatsSchema = z.object({today: z.object({;
    high_risk_appointments: z.number().int,
    interventions_scheduled: z.number().int,
    predicted_no_shows: z.number().int,
    estimated_cost_impact: z.number,
  }),
  this_week: z.object({;
    accuracy_rate: z.number.min(0).max(1),
    interventions_executed: z.number().int,
    successful_interventions: z.number().int,
    revenue_saved: z.number,
  }),
  this_month: z.object({;
    total_predictions: z.number().int,
    model_accuracy: z.number.min(0).max(1),
    cost_savings: z.number,
    trend_analysis: z.string,
  }),
});

export const RiskFactorAnalysisSchema = z.object({factor_type: RiskFactorType,
    current_weight: z.number.min(0).max(1),
  impact_score: z.number.min(0).max(1),
    trend: z.enum(['increasing', 'decreasing', 'stable']),
  correlation_with_no_shows: z.number.min(-1).max(1),
    sample_size: z.number().int,
  confidence_interval: z.object({;
    lower: z.number,
    upper: z.number,
  }),
});

// Type exportsexport type NoShowPrediction = z.infer<typeof NoShowPredictionSchema>;
export type RiskFactor = z.infer<typeof RiskFactorSchema>;
export type InterventionStrategy = z.infer<typeof InterventionStrategySchema>;
export type NoShowAnalytics = z.infer<typeof NoShowAnalyticsSchema>;

export type CreatePredictionInput = z.infer<typeof CreatePredictionInputSchema>;
export type UpdatePredictionInput = z.infer<typeof UpdatePredictionInputSchema>;
export type CreateRiskFactorInput = z.infer<typeof CreateRiskFactorInputSchema>;
export type CreateInterventionInput = z.infer<
  typeof CreateInterventionInputSchema
>;
export type UpdateInterventionInput = z.infer<
  typeof UpdateInterventionInputSchema
>;

export type PredictionAnalysis = z.infer<typeof PredictionAnalysisSchema>;
export type ModelPerformance = z.infer<typeof ModelPerformanceSchema>;
export type NoShowTrends = z.infer<typeof NoShowTrendsSchema>;
export type NoShowDashboardStats = z.infer<typeof NoShowDashboardStatsSchema>;
export type RiskFactorAnalysis = z.infer<typeof RiskFactorAnalysisSchema>;

export type RiskFactorTypeValue = z.infer<typeof RiskFactorType>;
export type InterventionTypeValue = z.infer<typeof InterventionType>;
export type AppointmentOutcomeValue = z.infer<typeof AppointmentOutcome>;
export type InterventionOutcomeValue = z.infer<typeof InterventionOutcome>;
