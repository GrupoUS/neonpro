// TypeScript types for Automated Protocol Optimization System// Story 9.3: Automated protocol optimization with continuous improvement// Generated by: VoidBeast V4.0
// Core protocol version managementexport type ProtocolVersion = {
  id: string;
  protocol_name: string;
  version_number: string;
  description: string;
  optimization_data: Record<string, any>;
  protocol_content: Record<string, any>;
  approval_status: 'draft' | 'pending' | "approved" | "rejected" | "deprecated";
  approved_by: string;
  effective_date: string;
  expiry_date: string;
  is_active: boolean;
  optimization_score: number;
  success_rate: number;
  created_by: string;
  created_at: string;
  updated_at: string;
};

// Protocol outcome tracking for optimizationexport type ProtocolOutcome = {
  id: string;
  protocol_version_id: string;
  patient_id: string;
  treatment_id: string;
  outcome_data: Record<string, any>;
  success_score: number;
  improvement_percentage: number;
  complications: Record<string, any>[];
  side_effects: Record<string, any>[];
  patient_satisfaction: number;
  follow_up_date: string;
  outcome_date: string;
  recorded_by: string;
  created_at: string;
  updated_at: string;
};

// Medical professional feedback for refinementexport type ProtocolFeedback = {
  id: string;
  protocol_id: string;
  provider_id: string;
  feedback_type:
    | 'improvement'
    | 'issue'
    | "suggestion" | "rating" | "complaint";
  feedback_data: Record<string, any>;
  improvement_suggestions: string;
  rating: number;
  priority_level: 'low' | "medium" | "high" | "critical";
  status: 'open' | "reviewed" | "implemented" | "rejected";
  reviewed_by: string;
  reviewed_at: string;
  implementation_notes: string;
  created_at: string;
  updated_at: string;
};

// Automated optimization resultsexport type OptimizationResult = {
  id: string;
  protocol_id: string;
  optimization_type: string;
  improvement_metrics: Record<string, any>;
  validation_data: Record<string, any>;
  confidence_score: number;
  statistical_significance: number;
  recommendation_data: Record<string, any>;
  implementation_status: 'pending' | "approved" | "implemented" | "rejected";
  automated_analysis: Record<string, any>;
  human_review_required: boolean;
  created_at: string;
  updated_at: string;
};

// A/B testing experimentsexport type ProtocolExperiment = {
  id: string;
  experiment_name: string;
  description: string;
  control_protocol_id: string;
  test_protocol_id: string;
  experiment_type: 'ab_test' | 'multivariate' | 'sequential';
  status: 'setup' | 'running' | "paused" | "completed" | "cancelled";
  start_date: string;
  end_date: string;
  target_sample_size: number;
  current_sample_size: number;
  statistical_power: number;
  significance_level: number;
  primary_metric: string;
  secondary_metrics: Array<string>;
  results_data: Record<string, any>;
  conclusion: string;
  created_by: string;
  created_at: string;
  updated_at: string;
};

// Evidence and medical literature integrationexport type ProtocolEvidence = {
  id: string;
  protocol_id: string;
  evidence_type:
    | 'literature'
    | 'guideline'
    | "regulation" | "study" | "best_practice";
  source_reference: string;
  evidence_level: 'A' | 'B' | "C" | "D" | "expert_opinion";
  evidence_data: Record<string, any>;
  relevance_score: number;
  last_verified: string;
  verification_status: 'current' | "outdated" | "conflicting" | "superseded";
  compliance_status: 'compliant' | "partial" | "non_compliant" | "unknown";
  notes: string;
  created_by: string;
  created_at: string;
  updated_at: string;
};

// Protocol implementation and distributionexport type ProtocolImplementation = {
  id: string;
  protocol_version_id: string;
  implementation_scope: 'clinic_wide' | "department" | "provider" | "pilot";
  target_providers: Array<string>;
  implementation_date: string;
  rollout_strategy: 'immediate' | "gradual" | "pilot" | "scheduled";
  training_required: boolean;
  training_completion_rate: number;
  adherence_rate: number;
  implementation_notes: string;
  status: 'planned' | 'in_progress' | "completed" | "failed" | "rolled_back";
  success_metrics: Record<string, any>;
  rollback_reason: string;
  implemented_by: string;
  created_at: string;
  updated_at: string;
};

// Protocol performance analyticsexport type ProtocolAnalytics = {
  id: string;
  protocol_version_id: string;
  analytics_period: 'daily' | "weekly" | "monthly" | "quarterly";
  period_start: string;
  period_end: string;
  usage_count: number;
  success_rate: number;
  average_outcome_score: number;
  patient_satisfaction: number;
  provider_satisfaction: number;
  cost_effectiveness: number;
  time_efficiency: number;
  complication_rate: number;
  readmission_rate: number;
  performance_metrics: Record<string, any>;
  comparative_analysis: Record<string, any>;
  roi_analysis: Record<string, any>;
  trend_analysis: Record<string, any>;
  calculated_at: string;
  created_at: string;
};

// Request/Response DTOs for API endpoints
// Protocol version requestsexport type CreateProtocolVersionRequest = {
  protocol_name: string;
  version_number: string;
  description: string;
  protocol_content: Record<string, any>;
  optimization_data: Record<string, any>;
};

export type UpdateProtocolVersionRequest = {
  protocol_name: string;
  description: string;
  protocol_content: Record<string, any>;
  optimization_data: Record<string, any>;
  approval_status: | 'draft'
    | 'pending'
    | "approved" | "rejected" | "deprecated";
  effective_date: string;
  expiry_date: string;
  is_active: boolean;
};

// Protocol outcome requestsexport type CreateProtocolOutcomeRequest = {
  protocol_version_id: string;
  patient_id: string;
  treatment_id: string;
  outcome_data: Record<string, any>;
  success_score: number;
  improvement_percentage: number;
  complications: Record<string, any>[];
  side_effects: Record<string, any>[];
  patient_satisfaction: number;
  follow_up_date: string;
  outcome_date: string;
};

// Protocol feedback requestsexport type CreateProtocolFeedbackRequest = {
  protocol_id: string;
  feedback_type:
    | 'improvement'
    | 'issue'
    | "suggestion" | "rating" | "complaint";
  feedback_data: Record<string, any>;
  improvement_suggestions: string;
  rating: number;
  priority_level: 'low' | "medium" | "high" | "critical";
};

export type UpdateProtocolFeedbackRequest = {
  feedback_data: Record<string, any>;
  improvement_suggestions: string;
  rating: number;
  priority_level: 'low' | "medium" | "high" | "critical";
  status: 'open' | "reviewed" | "implemented" | "rejected";
  implementation_notes: string;
};

// Protocol experiment requestsexport type CreateProtocolExperimentRequest = {
  experiment_name: string;
  description: string;
  control_protocol_id: string;
  test_protocol_id: string;
  experiment_type: 'ab_test' | 'multivariate' | 'sequential';
  target_sample_size: number;
  statistical_power: number;
  significance_level: number;
  primary_metric: string;
  secondary_metrics: Array<string>;
};

export type UpdateProtocolExperimentRequest = {
  experiment_name: string;
  description: string;
  status: 'setup' | 'running' | "paused" | "completed" | "cancelled";
  start_date: string;
  end_date: string;
  target_sample_size: number;
  current_sample_size: number;
  results_data: Record<string, any>;
  conclusion: string;
};

// Protocol evidence requestsexport type CreateProtocolEvidenceRequest = {
  protocol_id: string;
  evidence_type:
    | 'literature'
    | 'guideline'
    | "regulation" | "study" | "best_practice";
  source_reference: string;
  evidence_level: 'A' | 'B' | "C" | "D" | "expert_opinion";
  evidence_data: Record<string, any>;
  relevance_score: number;
  compliance_status: 'compliant' | "partial" | "non_compliant" | "unknown";
  notes: string;
};

// Protocol implementation requestsexport type CreateProtocolImplementationRequest = {
  protocol_version_id: string;
  implementation_scope: 'clinic_wide' | "department" | "provider" | "pilot";
  target_providers: Array<string>;
  implementation_date: string;
  rollout_strategy: 'immediate' | "gradual" | "pilot" | "scheduled";
  training_required: boolean;
  implementation_notes: string;
};

export type UpdateProtocolImplementationRequest = {
  implementation_scope: 'clinic_wide' | "department" | "provider" | "pilot";
  target_providers: Array<string>;
  implementation_date: string;
  rollout_strategy: 'immediate' | "gradual" | "pilot" | "scheduled";
  training_completion_rate: number;
  adherence_rate: number;
  implementation_notes: string;
  status: 'planned' | 'in_progress' | "completed" | "failed" | "rolled_back";
  success_metrics: Record<string, any>;
  rollback_reason: string;
};

// Analytics and reporting typesexport type ProtocolAnalyticsRequest = {
  protocol_version_id: string;
  analytics_period: 'daily' | "weekly" | "monthly" | "quarterly";
  period_start: string;
  period_end: string;
};

export type ProtocolOptimizationAnalysis = {
  protocol_id: string;
  current_performance: Record<string, any>;
  optimization_opportunities: Array<{;
    type: string;
    potential_improvement: number;
    confidence_score: number;
    recommendation: string;
  }>;
  comparative_analysis: Record<string, any>;
  risk_assessment: Record<string, any>;
};

export type ProtocolPerformanceReport = {
  protocol_version_id: string;
  reporting_period: {;
    start: string;
    end: string;
  };
  {;
    usage_count: number;
    success_rate: number;
    patient_satisfaction: number;
    provider_satisfaction: number;
    cost_effectiveness: number;
  };
  trend_analysis: Record<string, any>;
  benchmarks: Record<string, any>;
  recommendations: Array<string>;
};

// Specialized response typesexport interface ProtocolVersionWithAnalytics extends ProtocolVersion {
  latest_analytics: ProtocolAnalytics;
  outcome_count: number;
  feedback_count: number;
  implementation_status: string;
}

export type ProtocolExperimentResults = {
  experiment: ProtocolExperiment;
  statistical_analysis: {;
    p_value: number;
    confidence_interval: [number, number];
    effect_size: number;
    statistical_power: number;
  };
  {;
    winner: 'control' | 'test';
    significance: boolean;
    next_steps: Array<string>;
  };
};

export type ProtocolOptimizationQueue = {
  high_priority: Array<OptimizationResult>;
  medium_priority: Array<OptimizationResult>;
  low_priority: Array<OptimizationResult>;
  review_required: Array<OptimizationResult>;
};

// API response wrapper typesexport type ProtocolApiResponse<T> = {
  data: T;
  success: boolean;
  message: string;
  {;
    page: number;
    per_page: number;
    total: number;
    total_pages: number;
  };
};

export type ProtocolApiError = {
  error: string;
  details: Record<string, any>;
  field_errors: Record<string, string[]>;
};
