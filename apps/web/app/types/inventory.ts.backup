// =====================================================================================// NeonPro Inventory Management System - TypeScript Types// Epic 6: Real-time Stock Tracking with Barcode/QR Integration// Generated: 2025-01-26// =====================================================================================
// =====================================================================================// BASE TYPES AND ENUMS// =====================================================================================
export type ItemType = 'supply' | "medication" | "equipment" | "consumable";
export type StorageType =
  | 'room'
  | 'cabinet'
  | "refrigerator" | "freezer" | "controlled";
export type TransactionType =
  | 'receive'
  | 'issue'
  | 'transfer'
  | 'adjustment'
  | "count" | "expire" | "return";
export type ReferenceType =
  | 'purchase_order'
  | 'treatment'
  | "appointment" | "adjustment" | "transfer";
export type AlertType =
  | 'low_stock'
  | 'expired'
  | "expiring" | "overstock" | "zero_stock";
export type AlertLevel = 'info' | "warning" | "critical" | "urgent";
export type AlertStatus = 'active' | "acknowledged" | "resolved" | "dismissed";
export type StockStatus = 'active' | "quarantine" | "expired" | "recalled";
export type VerificationStatus = 'pending' | 'verified' | 'rejected';
export type ScanType = 'barcode' | 'qr_code';
export type ScanFormat = 'code128' | 'code39' | "ean13" | "qr" | "datamatrix";
export type ScanPurpose =
  | 'stock_in'
  | 'stock_out'
  | "count" | "lookup" | "transfer";
export type ScanStatus = 'success' | "not_found" | "error" | "duplicate";
export type DeviceType = 'mobile' | "scanner" | "tablet" | "desktop";
export type SyncStatus = 'pending' | "synced" | "error" | "conflict";
export type SyncOperation = 'create' | 'update' | 'delete';
export type ConflictResolution =
  | 'server_wins'
  | "client_wins" | "merge" | "manual";

// =====================================================================================// CORE INVENTORY INTERFACES// =====================================================================================
export type InventoryItem = {
  id: string;
  clinic_id: string;

  // Basic Item Information  name: string;
  description: string;
  sku: string;
  barcode: string;
  qr_code: string;

  // Classification  category: string;
  subcategory: string;
  item_type: ItemType;

  // Measurement & Ordering  unit_of_measure: string;
  unit_size: number;
  unit_cost: number;

  // Stock Management  reorder_level: number;
  max_stock: number;
  min_stock: number;
  safety_stock: number;

  // Medical/Regulatory Information  requires_prescription: boolean;
  controlled_substance: boolean;
  anvisa_code: string;
  therapeutic_class: string;

  // Status & Metadata  is_active: boolean;
  created_at: string;
  updated_at: string;
  created_by: string;
};

export type InventoryLocation = {
  id: string;
  clinic_id: string;

  // Location Information  location_name: string;
  location_code: string;
  address: string;
  room_number: string;

  // Storage Details  storage_type: StorageType;
  temperature_controlled: boolean;
  min_temperature: number;
  max_temperature: number;
  humidity_controlled: boolean;

  // Access Control  access_permissions: Array<string>;
  requires_authorization: boolean;
  responsible_user_id: string;

  // Status & Metadata  is_active: boolean;
  created_at: string;
  updated_at: string;
};

export type StockLevel = {
  id: string;
  item_id: string;
  location_id: string;

  // Stock Quantities  current_quantity: number;
  reserved_quantity: number;
  available_quantity: number; // computed: current - reserved  allocated_quantity: number;

  // Batch Information  batch_number: string;
  lot_number: string;
  serial_number: string;
  expiration_date: string;
  manufacture_date: string;

  // Tracking  last_counted_at: string;
  last_counted_by: string;
  variance_quantity: number;

  // Status & Metadata  status: StockStatus;
  last_updated: string;
  created_at: string;

  // Relations (populated when needed)  item: InventoryItem;
  location: InventoryLocation;
};

export type InventoryTransaction = {
  id: string;
  item_id: string;
  location_id: string;

  // Transaction Details  transaction_type: TransactionType;
  reference_type: ReferenceType;
  reference_id: string;

  // Quantities  quantity_before: number;
  quantity_change: number;
  quantity_after: number;

  // Batch Information  batch_number: string;
  lot_number: string;
  expiration_date: string;

  // Cost Information  unit_cost: number;
  total_cost: number;

  // Transaction Context  reason: string;
  notes: string;
  source_location_id: string;
  destination_location_id: string;

  // Audit Information  transaction_date: string;
  created_by: string;
  approved_by: string;

  // Verification  verification_status: VerificationStatus;
  verified_by: string;
  verified_at: string;

  // Relations (populated when needed)  item: InventoryItem;
  location: InventoryLocation;
  source_location: InventoryLocation;
  destination_location: InventoryLocation;
  created_by_user: any; // User profile};

// =====================================================================================// ALERTS AND NOTIFICATIONS// =====================================================================================
export type StockAlert = {
  id: string;
  clinic_id: string;
  item_id: string;
  location_id: string;

  // Alert Details  alert_type: AlertType;
  alert_level: AlertLevel;

  // Alert Content  title: string;
  message: string;
  current_quantity: number;
  threshold_quantity: number;

  // Status & Timing  status: AlertStatus;
  created_at: string;
  acknowledged_at: string;
  acknowledged_by: string;
  resolved_at: string;
  resolved_by: string;

  // Delivery Tracking  notification_sent: boolean;
  notification_channels: Array<string>;
  escalation_level: number;

  // Relations (populated when needed)  item: InventoryItem;
  location: InventoryLocation;
};

// =====================================================================================// BARCODE/QR CODE INTEGRATION// =====================================================================================
export type BarcodeScan = {
  id: string;
  clinic_id: string;

  // Scan Details  barcode_value: string;
  scan_type: ScanType;
  scan_format: ScanFormat;

  // Context  item_id: string;
  location_id: string;
  scan_purpose: ScanPurpose;

  // Scan Result  scan_status: ScanStatus;
  error_message: string;

  // Device & User  device_id: string;
  device_type: DeviceType;
  scanned_by: string;
  scanned_at: string;

  // Transaction Reference  transaction_id: string;

  // Relations (populated when needed)  item: InventoryItem;
  location: InventoryLocation;
  transaction: InventoryTransaction;
};

// =====================================================================================// MOBILE & OFFLINE SUPPORT// =====================================================================================
export type MobileSyncQueue = {
  id: string;
  clinic_id: string;

  // Sync Details  entity_type: string;
  entity_id: string;
  operation: SyncOperation;

  // Sync Data  sync_data: Record<string, any>;
  client_timestamp: string;
  server_timestamp: string;

  // Status  sync_status: SyncStatus;
  error_message: string;
  conflict_resolution: ConflictResolution;

  // Device Info  device_id: string;
  user_id: string;

  // Processing  processed_at: string;
  retry_count: number;
};

// =====================================================================================// API REQUEST/RESPONSE TYPES// =====================================================================================
// Stock Level Updatesexport type StockUpdateRequest = {
  item_id: string;
  location_id: string;
  quantity_change: number;
  transaction_type: TransactionType;
  reason: string;
  batch_number: string;
  expiration_date: string;
  reference_type: ReferenceType;
  reference_id: string;
};

export type StockUpdateResponse = {
  success: boolean;
  transaction_id: string;
  new_quantity: number;
  available_quantity: number;
  alerts_created: Array<StockAlert>;
  errors: Array<string>;
};

// Barcode Scanningexport type BarcodeScanRequest = {
  barcode_value: string;
  scan_type: ScanType;
  scan_purpose: ScanPurpose;
  location_id: string;
  device_id: string;
  device_type: DeviceType;
};

export type BarcodeScanResponse = {
  success: boolean;
  scan_id: string;
  item: InventoryItem;
  stock_level: StockLevel;
  suggestions: Array<InventoryItem>;
  error_message: string;
};

// Batch Operationsexport type BatchTransactionRequest = {
  transactions: Array<StockUpdateRequest>;
  validate_only: boolean;
};

export type BatchTransactionResponse = {
  success: boolean;
  successful_transactions: Array<string>;
  failed_transactions: {;
    request: StockUpdateRequest;
    error: string;
  }[];
  total_processed: number;
};

// Search and Filteringexport type InventorySearchParams = {
  query: string;
  category: string;
  location_id: string;
  stock_status: 'all' | "in_stock" | "low_stock" | "out_of_stock";
  expiry_status: 'all' | "expired" | "expiring_soon" | "expiring_this_month";
  item_type: ItemType;
  page: number;
  limit: number;
  sort_by: 'name' | 'sku' | "quantity" | "expiry_date" | "last_updated";
  sort_order: 'asc' | 'desc';
};

export type InventorySearchResponse = {items: (InventoryItem & {;
    stock_levels: Array<StockLevel>;
    total_quantity: number;
    total_available: number;
    locations_count: number;
    low_stock_locations: number;
  })[];
  {;
    page: number;
    limit: number;
    total_items: number;
    total_pages: number;
    has_next: boolean;
    has_prev: boolean;
  };
  {;
    total_items: number;
    in_stock_items: number;
    low_stock_items: number;
    out_of_stock_items: number;
    total_value: number;
  };
};

// =====================================================================================// DASHBOARD AND ANALYTICS TYPES// =====================================================================================
export type InventoryAnalytics = {
  clinic_id: string;
  period: string;

  // Stock Overview  total_items: number;
  total_locations: number;
  total_value: number;

  // Stock Status  in_stock_items: number;
  low_stock_items: number;
  out_of_stock_items: number;
  expired_items: number;
  expiring_items: number;

  // Transaction Volume  total_transactions: number;
  inbound_transactions: number;
  outbound_transactions: number;
  adjustments: number;

  // Category Breakdown  categories: {;
    category: string;
    items_count: number;
    total_value: number;
    low_stock_count: number;
  }[];

  // Location Breakdown  locations: {;
    location_id: string;
    location_name: string;
    items_count: number;
    total_value: number;
    utilization_percentage: number;
  }[];

  // Trends  stock_trend: {;
    date: string;
    total_quantity: number;
    total_value: number;
  }[];

  // Top Items  top_used_items: {;
    item_id: string;
    item_name: string;
    usage_quantity: number;
    usage_frequency: number;
  }[];

  {;
    item_id: string;
    item_name: string;
    total_value: number;
    current_quantity: number;
  }[];
};

export type InventoryKPIs = {
  // Stock Performance  stock_accuracy: number; // percentage  inventory_turnover: number;
  days_on_hand: number;
  fill_rate: number; // percentage
  // Cost Metrics  carrying_cost: number;
  stockout_cost: number;
  obsolescence_cost: number;

  // Operational Metrics  cycle_count_accuracy: number;
  replenishment_frequency: number;
  lead_time_variance: number;

  // Alert Metrics  alert_response_time: number; // average in minutes  alerts_resolved_percentage: number;
  escalated_alerts: number;
};

// =====================================================================================// FORM AND VALIDATION TYPES// =====================================================================================
export type CreateInventoryItemForm = {
  name: string;
  description: string;
  sku: string;
  barcode: string;
  category: string;
  subcategory: string;
  item_type: ItemType;
  unit_of_measure: string;
  unit_size: number;
  unit_cost: number;
  reorder_level: number;
  max_stock: number;
  min_stock: number;
  safety_stock: number;
  requires_prescription: boolean;
  controlled_substance: boolean;
  anvisa_code: string;
  therapeutic_class: string;
};

export type CreateLocationForm = {
  location_name: string;
  location_code: string;
  address: string;
  room_number: string;
  storage_type: StorageType;
  temperature_controlled: boolean;
  min_temperature: number;
  max_temperature: number;
  humidity_controlled: boolean;
  requires_authorization: boolean;
  responsible_user_id: string;
};

export type StockAdjustmentForm = {
  item_id: string;
  location_id: string;
  adjustment_type: 'set' | 'increase' | 'decrease';
  quantity: number;
  reason: string;
  batch_number: string;
  expiration_date: string;
  notes: string;
};

export type TransferStockForm = {
  item_id: string;
  source_location_id: string;
  destination_location_id: string;
  quantity: number;
  reason: string;
  batch_number: string;
  notes: string;
};

// =====================================================================================// VIEW AND COMPUTED TYPES// =====================================================================================
export type LowStockItem = {
  id: string;
  clinic_id: string;
  name: string;
  sku: string;
  category: string;
  location_name: string;
  current_quantity: number;
  available_quantity: number;
  reorder_level: number;
  min_stock: number;
  shortage_quantity: number;
  stock_status: 'Out of Stock' | "Critical" | "Low" | "OK";
};

export type ExpiringItem = {
  id: string;
  clinic_id: string;
  name: string;
  sku: string;
  category: string;
  location_name: string;
  batch_number: string;
  expiration_date: string;
  current_quantity: number;
  days_to_expiry: number;
  expiry_status: 'Expired' | "Expires This Week" | "Expires This Month" | "OK";
};

export type InventorySummary = {
  clinic_id: string;
  category: string;
  total_items: number;
  total_locations: number;
  total_quantity: number;
  total_available: number;
  total_reserved: number;
  low_stock_items: number;
  out_of_stock_items: number;
  total_inventory_value: number;
};

// =====================================================================================// ERROR AND VALIDATION TYPES// =====================================================================================
export type InventoryError = {
  code: string;
  message: string;
  field: string;
  details: Record<string, any>;
};

export type ValidationResult = {
  valid: boolean;
  errors: Array<InventoryError>;
  warnings: Array<InventoryError>;
};

// =====================================================================================// REAL-TIME UPDATES AND SUBSCRIPTIONS// =====================================================================================
export type InventoryUpdate = {
  type: 'stock_change' | "new_alert" | "alert_resolved" | "new_transaction";
  clinic_id: string;
  item_id: string;
  location_id: string;
  data: any;
  timestamp: string;
};

export type RealtimeSubscription = {
  clinic_id: string;
  filters: {
    item_ids?: Array<string>;
    location_ids: Array<string>;
    alert_levels: Array<AlertLevel>;
  };
  callback: (update: InventoryUpdate) => void;
};

// =====================================================================================// INTEGRATION TYPES// =====================================================================================
export type PurchaseOrderIntegration = {
  po_number: string;
  supplier_id: string;
  expected_items: {;
    item_id: string;
    quantity: number;
    unit_cost: number;
    batch_number: string;
    expiration_date: string;
  }[];
};

export type TreatmentIntegration = {
  treatment_id: string;
  patient_id: string;
  required_items: {;
    item_id: string;
    quantity: number;
    is_consumed: boolean;
  }[];
};

// =====================================================================================// EXPORT ALL TYPES// =====================================================================================
// All types are already exported above with individual export statements// This provides a clean way to import commonly used enums and types