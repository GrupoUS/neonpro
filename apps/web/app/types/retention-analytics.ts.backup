// =====================================================================================// RETENTION ANALYTICS TYPES// Epic 7.4: Patient Retention Analytics + Predictions// Comprehensive type system for retention analytics and churn prediction// =====================================================================================
import { z } from "zod";
// =====================================================================================// CORE RETENTION METRICS// =====================================================================================
export type PatientRetentionMetrics = {
  id: string;
  patient_id: string;
  clinic_id: string;

  // Core Retention Metrics  first_appointment_date: string;
  last_appointment_date: string;
  days_since_last_appointment: number;
  total_appointments: number;
  appointment_frequency: number; // appointments per month
  // Engagement Metrics  response_rate: number; // 0-1 (follow-up response rate)  satisfaction_score: number; // 0-10 average  referral_count: number;
  complaints_count: number;

  // Financial Metrics  total_spent: number;
  average_ticket: number;
  lifetime_value: number;
  payment_punctuality: number; // 0-1
  // Behavioral Metrics  cancellation_rate: number; // 0-1  no_show_rate: number; // 0-1  rebooking_rate: number; // 0-1  treatment_completion_rate: number; // 0-1
  // Churn Risk Assessment  churn_risk_score: number; // 0-1 (0=low risk, 1=high risk)  churn_risk_level: ChurnRiskLevel;
  churn_probability: number; // 0-1  days_to_predicted_churn: number | null;

  // Metadata  last_calculated: string;
  created_at: string;
  updated_at: string;
};

export enum ChurnRiskLevel {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical',
}

// =====================================================================================// CHURN PREDICTION MODELS// =====================================================================================
export type ChurnPrediction = {
  id: string;
  patient_id: string;
  clinic_id: string;

  // Prediction Details  churn_probability: number; // 0-1  confidence_score: number; // 0-1  risk_level: ChurnRiskLevel;
  predicted_churn_date: string | null;
  days_until_churn: number | null;

  // Model Information  model_version: string;
  model_type: ChurnModelType;
  prediction_date: string;

  // Feature Importance  top_risk_factors: Array<RiskFactor>;
  feature_scores: Record<string, number>;

  // Intervention Recommendations  recommended_actions: Array<RetentionAction>;
  intervention_priority: InterventionPriority;

  // Validation  is_validated: boolean;
  actual_outcome: ChurnOutcome | null;
  prediction_accuracy: number | null;

  created_at: string;
  updated_at: string;
};

export enum ChurnModelType {
  LOGISTIC_REGRESSION = 'logistic_regression',
  RANDOM_FOREST = 'random_forest',
  GRADIENT_BOOSTING = 'gradient_boosting',
  NEURAL_NETWORK = 'neural_network',
  ENSEMBLE = 'ensemble',
}

export type RiskFactor = {
  factor: string;
  importance: number; // 0-1  current_value: number;
  threshold_value: number;
  description: string;
};

export enum InterventionPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  URGENT = 'urgent',
}

export enum ChurnOutcome {
  CHURNED = 'churned',
  RETAINED = 'retained',
  REACTIVATED = 'reactivated',
}

// =====================================================================================// RETENTION STRATEGIES// =====================================================================================
export type RetentionStrategy = {
  id: string;
  clinic_id: string;

  // Strategy Details  name: string;
  description: string;
  strategy_type: RetentionStrategyType;
  target_risk_levels: Array<ChurnRiskLevel>;

  // Configuration  trigger_conditions: Array<TriggerCondition>;
  actions: Array<RetentionAction>;
  timing: StrategyTiming;

  // Performance Metrics  success_rate: number; // 0-1  patients_targeted: number;
  patients_retained: number;
  cost_per_retention: number;
  roi: number;

  // Status  is_active: boolean;
  auto_execution: boolean;

  // Metadata  created_by: string;
  created_at: string;
  updated_at: string;
};

export enum RetentionStrategyType {
  REACTIVE = 'reactive', // After churn risk detected  PROACTIVE = 'proactive', // Before churn risk  PERSONALIZED = 'personalized', // Based on patient profile  BULK = 'bulk', // Mass strategy  AUTOMATED = 'automated', // Fully automated}

export type TriggerCondition = {
  metric: string;
  operator: 'gt' | 'lt' | 'eq' | "gte" | "lte" | "between";
  value: number | string;
  secondary_value: number; // For 'between' operator};

export type RetentionAction = {
  id: string;
  action_type: RetentionActionType;

  // Action Details  title: string;
  description: string;

  // Configuration  channel: CommunicationChannel;
  template_id: string;
  personalization_rules: Array<PersonalizationRule>;

  // Timing  delay_hours: number;
  max_attempts: number;
  retry_interval_hours: number;

  // Targeting  patient_segments: Array<string>;
  exclusion_rules: Array<ExclusionRule>;

  // Performance  success_rate: number;
  cost: number;

  created_at: string;
};

export enum RetentionActionType {
  SEND_MESSAGE = 'send_message',
  SCHEDULE_CALL = 'schedule_call',
  SEND_EMAIL = 'send_email',
  OFFER_DISCOUNT = 'offer_discount',
  SCHEDULE_FOLLOWUP = 'schedule_followup',
  ASSIGN_ACCOUNT_MANAGER = 'assign_account_manager',
  SEND_SURVEY = 'send_survey',
  CREATE_TASK = 'create_task',
}

export enum CommunicationChannel {
  WHATSAPP = 'whatsapp',
  SMS = 'sms',
  EMAIL = 'email',
  PHONE = 'phone',
  IN_APP = 'in_app',
}

export type PersonalizationRule = {
  field: string;
  value_source: 'patient_data' | 'static' | 'calculated';
  calculation: string;
  fallback_value: string;
};

export type ExclusionRule = {
  condition: string;
  value: string | number;
  reason: string;
};

// =====================================================================================// STRATEGY TIMING// =====================================================================================
export type StrategyTiming = {
  execution_type: ExecutionType;

  // Immediate execution  immediate: boolean;

  // Scheduled execution  schedule: ScheduleConfig;

  // Event-based execution  event_triggers: Array<EventTrigger>;

  // Time-based execution  time_windows: Array<TimeWindow>;

  // Frequency limits  max_executions_per_patient: number;
  cooldown_period_days: number;
};

export enum ExecutionType {
  IMMEDIATE = 'immediate',
  SCHEDULED = 'scheduled',
  EVENT_BASED = 'event_based',
  TIME_BASED = 'time_based',
}

export type ScheduleConfig = {
  frequency: 'daily' | 'weekly' | 'monthly';
  days_of_week: Array<number>; // 0-6 (Sunday-Saturday)  time_of_day: string; // HH:MM format  timezone: string;
};

export type EventTrigger = {
  event_type: string;
  conditions: Array<TriggerCondition>;
  delay_after_event: number; // hours};

export type TimeWindow = {
  start_time: string; // HH:MM  end_time: string; // HH:MM  days_of_week: Array<number>; // 0-6};

// =====================================================================================// RETENTION PERFORMANCE// =====================================================================================
export type RetentionPerformance = {
  id: string;
  clinic_id: string;
  strategy_id: string;
  patient_id: string;

  // Execution Details  execution_date: string;
  actions_executed: Array<string>; // Array of action IDs  total_cost: number;

  // Results  outcome: RetentionOutcome;
  success: boolean;
  retention_period_days: number;
  follow_up_appointments: number;
  revenue_generated: number;

  // Patient Response  patient_response: PatientResponse | null;
  satisfaction_change: number; // Change in satisfaction score  engagement_change: number; // Change in engagement level
  // Performance Metrics  time_to_response: number; // hours  cost_effectiveness: number; // revenue/cost  retention_probability_improvement: number; // 0-1
  // Tracking  created_at: string;
  updated_at: string;
};

export enum RetentionOutcome {
  SUCCESSFUL = 'successful',
  FAILED = 'failed',
  PARTIAL = 'partial',
  PENDING = 'pending',
}

export type PatientResponse = {
  response_type: 'positive' | "negative" | "neutral" | "no_response";
  response_time: number; // hours after action  feedback: string | null;
  satisfaction_rating: number | null; // 1-10  rebooking_intent: boolean | null;
};

// =====================================================================================// ANALYTICS DASHBOARD// =====================================================================================
export type RetentionAnalyticsDashboard = {
  clinic_id: string;
  period_start: string;
  period_end: string;

  // Overall Metrics  overview: RetentionOverview;

  // Churn Analysis  churn_analysis: ChurnAnalysis;

  // Strategy Performance  strategy_performance: Array<StrategyPerformanceMetrics>;

  // Patient Segmentation  retention_by_segment: Array<RetentionBySegment>;

  // Trends  retention_trends: Array<RetentionTrend>;

  // Predictions  churn_predictions_summary: ChurnPredictionSummary;

  generated_at: string;
};

export type RetentionOverview = {
  total_patients: number;
  active_patients: number;
  at_risk_patients: number;
  churned_patients: number;

  overall_retention_rate: number; // 0-1  churn_rate: number; // 0-1  average_lifetime_value: number;
  average_retention_period_days: number;

  // Period comparisons  retention_rate_change: number;
  churn_rate_change: number;
  ltv_change: number;
};

export type ChurnAnalysis = {
  churn_reasons: Array<ChurnReason>;
  churn_by_risk_level: Record<ChurnRiskLevel, number>;
  churn_patterns: Array<ChurnPattern>;
  seasonal_trends: Array<SeasonalTrend>;
};

export type ChurnReason = {
  reason: string;
  count: number;
  percentage: number;
  avg_lifetime_value: number;
};

export type ChurnPattern = {
  pattern: string;
  description: string;
  frequency: number;
  impact_score: number; // 0-1};

export type SeasonalTrend = {
  period: string; // month, quarter, etc.  churn_rate: number;
  retention_rate: number;
  patient_count: number;
};

export type StrategyPerformanceMetrics = {
  strategy_id: string;
  strategy_name: string;

  executions: number;
  success_rate: number; // 0-1  cost_per_retention: number;
  roi: number;

  patients_targeted: number;
  patients_retained: number;
  revenue_protected: number;

  avg_response_time: number; // hours  satisfaction_improvement: number;
};

export type RetentionBySegment = {
  segment_id: string;
  segment_name: string;
  patient_count: number;
  retention_rate: number;
  churn_rate: number;
  avg_lifetime_value: number;
  at_risk_count: number;
};

export type RetentionTrend = {
  date: string;
  retention_rate: number;
  churn_rate: number;
  new_patients: number;
  churned_patients: number;
  at_risk_patients: number;
};

export type ChurnPredictionSummary = {
  total_predictions: number;
  high_risk_patients: number;
  medium_risk_patients: number;
  low_risk_patients: number;

  model_accuracy: number; // 0-1  predictions_this_week: number;
  interventions_triggered: number;
  successful_interventions: number;
};

// =====================================================================================// ZOD VALIDATION SCHEMAS// =====================================================================================
export const PatientRetentionMetricsSchema = z.object({id: z.string().uuid,
    patient_id: z.string().uuid,
  clinic_id: z.string().uuid,
    first_appointment_date: z.string,
  last_appointment_date: z.string,
    days_since_last_appointment: z.number.min(0),
  total_appointments: z.number.min(0),
    appointment_frequency: z.number.min(0),

  response_rate: z.number.min(0).max(1),
    satisfaction_score: z.number.min(0).max(10),
  referral_count: z.number.min(0),
    complaints_count: z.number.min(0),

  total_spent: z.number.min(0),
    average_ticket: z.number.min(0),
  lifetime_value: z.number.min(0),
    payment_punctuality: z.number.min(0).max(1),

  cancellation_rate: z.number.min(0).max(1),
    no_show_rate: z.number.min(0).max(1),
  rebooking_rate: z.number.min(0).max(1),
    treatment_completion_rate: z.number.min(0).max(1),

  churn_risk_score: z.number.min(0).max(1),
    churn_risk_level: z.nativeEnum(ChurnRiskLevel),
  churn_probability: z.number.min(0).max(1),
    days_to_predicted_churn: z.number().nullable,

  last_calculated: z.string,
    created_at: z.string,
  updated_at: z.string,
});

export const ChurnPredictionSchema = z.object({id: z.string().uuid,
    patient_id: z.string().uuid,
  clinic_id: z.string().uuid,
    churn_probability: z.number.min(0).max(1),
  confidence_score: z.number.min(0).max(1),
    risk_level: z.nativeEnum(ChurnRiskLevel),
  predicted_churn_date: z.string().nullable,
    days_until_churn: z.number().nullable,

  model_version: z.string,
    model_type: z.nativeEnum(ChurnModelType),
  prediction_date: z.string,
    top_risk_factors: z.array(
    z.object({
      factor: z.string,
    importance: z.number.min(0).max(1),
      current_value: z.number,
    threshold_value: z.number,
      description: z.string,
    }),
  ),

  feature_scores: z.record(z.string, z.number()),

  recommended_actions: z.array(
    z.object({id: z.string,
    action_type: z.nativeEnum(RetentionActionType),
      title: z.string,
    description: z.string,
      channel: z.nativeEnum(CommunicationChannel),
    template_id: z.string().optional,
      personalization_rules: z.array(z.any),
    delay_hours: z.number.min(0),
      max_attempts: z.number.min(1),
    retry_interval_hours: z.number.min(1),
      patient_segments: z.array(z.string),
    exclusion_rules: z.array(z.any),
      success_rate: z.number.min(0).max(1),
    cost: z.number.min(0),
      created_at: z.string,
    }),
  ),

  intervention_priority: z.nativeEnum(InterventionPriority),
    is_validated: z.boolean,
  actual_outcome: z.nativeEnum(ChurnOutcome).nullable,
    prediction_accuracy: z.number().min(0).max(1).nullable,

  created_at: z.string,
    updated_at: z.string,
});

export const RetentionStrategySchema = z.object({id: z.string().uuid,
    clinic_id: z.string().uuid,

  name: z.string.min(1).max(100),
    description: z.string.max(500),
  strategy_type: z.nativeEnum(RetentionStrategyType),
    target_risk_levels: z.array(z.nativeEnum(ChurnRiskLevel)),

  trigger_conditions: z.array(
    z.object({
      metric: z.string,
    operator: z.enum(['gt', 'lt', 'eq', 'gte', 'lte', 'between']),
      value: z.union([z.number, z.string()]),
      secondary_value: z.number().optional,
    }),
  ),

  actions: z.array(z.any), // Reference to RetentionAction schema  timing: z.any, // Reference to StrategyTiming schema
  success_rate: z.number.min(0).max(1),
    patients_targeted: z.number.min(0),
  patients_retained: z.number.min(0),
    cost_per_retention: z.number.min(0),
  roi: z.number,
    is_active: z.boolean,
  auto_execution: z.boolean,
    created_by: z.string().uuid,
  created_at: z.string,
    updated_at: z.string,
});

// =====================================================================================// UTILITY TYPES// =====================================================================================
export type CreatePatientRetentionMetrics = Omit<
  PatientRetentionMetrics,
  'id' | 'created_at' | 'updated_at'
>;
export type UpdatePatientRetentionMetrics =
  Partial<CreatePatientRetentionMetrics>;

export type CreateChurnPrediction = Omit<
  ChurnPrediction,
  'id' | 'created_at' | 'updated_at'
>;
export type UpdateChurnPrediction = Partial<CreateChurnPrediction>;

export type CreateRetentionStrategy = Omit<
  RetentionStrategy,
  | 'id'
  | 'created_at'
  | 'updated_at'
  | 'success_rate'
  | 'patients_targeted'
  | 'patients_retained'
  | 'cost_per_retention'
  | 'roi'
>;
export type UpdateRetentionStrategy = Partial<CreateRetentionStrategy>;

// =====================================================================================// API RESPONSE TYPES// =====================================================================================
export type RetentionAnalyticsResponse = {
  success: boolean;
  data: RetentionAnalyticsDashboard;
  message: string;
};

export type ChurnPredictionsResponse = {
  success: boolean;
  data: Array<ChurnPrediction>;
  pagination: {;
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
  message: string;
};

export type RetentionStrategiesResponse = {
  success: boolean;
  data: Array<RetentionStrategy>;
  message: string;
};

export type RetentionPerformanceResponse = {
  success: boolean;
  data: Array<RetentionPerformance>;
  message: string;
};
