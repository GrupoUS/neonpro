// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get Supabase credentials from environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;
const IS_TEST = typeof import.meta !== 'undefined' && (import.meta as any).env?.MODE === 'test';

// Validate required environment variables
if (!SUPABASE_URL && !IS_TEST) {
  throw new Error('Missing required environment variable: VITE_SUPABASE_URL');
}

if (!SUPABASE_PUBLISHABLE_KEY && !IS_TEST) {
  throw new Error('Missing required environment variable: VITE_SUPABASE_ANON_KEY');
}

import { getSiteUrl } from '@/lib/site-url';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL || 'http://localhost:54321',
  SUPABASE_PUBLISHABLE_KEY || 'test-anon-key',
  {
    auth: {
      storage: typeof globalThis !== 'undefined' && typeof globalThis.localStorage !== 'undefined'
        ? globalThis.localStorage
        : undefined,
      persistSession: true,
      autoRefreshToken: true,
      // Note: Redirects are configured per auth action (e.g., signInWithOAuth options)
    },
  },
);
// Helper functions for authentication with proper redirects

// Helper para login com OAuth providers
export const signInWithProvider = async (
  provider: 'google' | 'github' | 'apple',
  redirectTo?: string
) => {
  const baseUrl = getSiteUrl();
  const finalRedirectTo = redirectTo ? `${baseUrl}${redirectTo}` : `${baseUrl}/dashboard`;
  
  return supabase.auth.signInWithOAuth({
    provider,
    options: {
      redirectTo: `${baseUrl}/auth/callback?next=${encodeURIComponent(finalRedirectTo)}`,
    },
  });
};

// Helper para login com email/password
export const signInWithEmail = async (
  email: string,
  password: string
) => {
  return supabase.auth.signInWithPassword({
    email,
    password,
  });
};

// Helper para signup com redirecionamento
export const signUpWithEmail = async (
  email: string,
  password: string,
  redirectTo?: string
) => {
  const baseUrl = getSiteUrl();
  const finalRedirectTo = redirectTo ? `${baseUrl}${redirectTo}` : `${baseUrl}/dashboard`;
  
  return supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${baseUrl}/auth/confirm?next=${encodeURIComponent(finalRedirectTo)}`,
    },
  });
};

// Helper para reset de senha
export const resetPassword = async (
  email: string,
  redirectTo?: string
) => {
  const baseUrl = getSiteUrl();
  const finalRedirectTo = redirectTo ? `${baseUrl}${redirectTo}` : `${baseUrl}/dashboard`;
  
  return supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${baseUrl}/auth/confirm?next=${encodeURIComponent(finalRedirectTo)}`,
  });
};

// Helper para logout
export const signOut = async () => {
  return supabase.auth.signOut();
};

// Helper para verificar se usuário está autenticado
export const getCurrentUser = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  return session?.user || null;
};

// Helper para verificar sessão atual
export const getCurrentSession = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  return session;
};