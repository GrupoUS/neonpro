/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport, } from './routes/__root'
import { Route as AppointmentsRouteImport, } from './routes/appointments'
import { Route as DashboardRouteImport, } from './routes/dashboard'
import { Route as DashboardIndexRouteImport, } from './routes/dashboard/index'
import { Route as IndexRouteImport, } from './routes/index'
import { Route as LoginRouteImport, } from './routes/login'
import { Route as PatientsRouteImport, } from './routes/patients'
import { Route as PatientsIndexRouteImport, } from './routes/patients/index'
import { Route as PatientsNewRouteImport, } from './routes/patients/new'

const PatientsRoute = PatientsRouteImport.update({
  id: '/patients',
  path: '/patients',
  getParentRoute: () => rootRouteImport,
} as any,)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any,)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any,)
const AppointmentsRoute = AppointmentsRouteImport.update({
  id: '/appointments',
  path: '/appointments',
  getParentRoute: () => rootRouteImport,
} as any,)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any,)
const PatientsIndexRoute = PatientsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PatientsRoute,
} as any,)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any,)
const PatientsNewRoute = PatientsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => PatientsRoute,
} as any,)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/patients': typeof PatientsRouteWithChildren
  '/patients/new': typeof PatientsNewRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/patients/': typeof PatientsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/login': typeof LoginRoute
  '/patients/new': typeof PatientsNewRoute
  '/dashboard': typeof DashboardIndexRoute
  '/patients': typeof PatientsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/patients': typeof PatientsRouteWithChildren
  '/patients/new': typeof PatientsNewRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/patients/': typeof PatientsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/appointments'
    | '/dashboard'
    | '/login'
    | '/patients'
    | '/patients/new'
    | '/dashboard/'
    | '/patients/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/appointments'
    | '/login'
    | '/patients/new'
    | '/dashboard'
    | '/patients'
  id:
    | '__root__'
    | '/'
    | '/appointments'
    | '/dashboard'
    | '/login'
    | '/patients'
    | '/patients/new'
    | '/dashboard/'
    | '/patients/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppointmentsRoute: typeof AppointmentsRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
  PatientsRoute: typeof PatientsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/patients': {
      id: '/patients'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof PatientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appointments': {
      id: '/appointments'
      path: '/appointments'
      fullPath: '/appointments'
      preLoaderRoute: typeof AppointmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patients/': {
      id: '/patients/'
      path: '/'
      fullPath: '/patients/'
      preLoaderRoute: typeof PatientsIndexRouteImport
      parentRoute: typeof PatientsRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/patients/new': {
      id: '/patients/new'
      path: '/new'
      fullPath: '/patients/new'
      preLoaderRoute: typeof PatientsNewRouteImport
      parentRoute: typeof PatientsRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface PatientsRouteChildren {
  PatientsNewRoute: typeof PatientsNewRoute
  PatientsIndexRoute: typeof PatientsIndexRoute
}

const PatientsRouteChildren: PatientsRouteChildren = {
  PatientsNewRoute: PatientsNewRoute,
  PatientsIndexRoute: PatientsIndexRoute,
}

const PatientsRouteWithChildren = PatientsRoute._addFileChildren(
  PatientsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppointmentsRoute: AppointmentsRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
  PatientsRoute: PatientsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren,)
  ._addFileTypes<FileRouteTypes>()
