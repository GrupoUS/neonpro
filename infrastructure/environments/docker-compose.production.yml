version: '3.8'

# NeonPro AI Services - Production Docker Compose Configuration
# This configuration sets up the complete AI services infrastructure
# Includes web application, Redis cache, monitoring, and supporting services

services:
  # =============================================================================
  # WEB APPLICATION (Next.js with AI Services)
  # =============================================================================
  web:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.production
      target: production
      args:
        - NEXT_TELEMETRY_DISABLED=1
    image: neonpro/ai-services:${VERSION:-latest}
    container_name: neonpro-ai-web-prod
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    env_file:
      - ./production.env
    depends_on:
      - redis
      - monitoring
    networks:
      - neonpro-network
    volumes:
      - web-logs:/app/logs
      - web-uploads:/app/uploads
      - web-cache:/app/.next/cache
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neonpro-web.rule=Host(`app.neonpro.com.br`)"
      - "traefik.http.routers.neonpro-web.tls=true"
      - "traefik.http.routers.neonpro-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.neonpro-web.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  # =============================================================================
  # REDIS CACHE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: neonpro-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-neonpro_redis_2024!}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - neonpro-network
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================
  monitoring:
    image: prom/prometheus:latest
    container_name: neonpro-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - neonpro-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`monitoring.neonpro.com.br`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.middlewares=auth"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: neonpro-grafana-prod
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.neonpro.com.br
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    networks:
      - neonpro-network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.neonpro.com.br`)"
      - "traefik.http.routers.grafana.tls=true"
    depends_on:
      - monitoring

  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # =============================================================================
  traefik:
    image: traefik:v3.0
    container_name: neonpro-traefik-prod
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@neonpro.com.br}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--accesslog=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - neonpro-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.neonpro.com.br`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH_USERS}"

  # =============================================================================
  # LOG AGGREGATION
  # =============================================================================
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: neonpro-fluent-bit-prod
    restart: unless-stopped
    volumes:
      - ./logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - web-logs:/var/log/web:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    networks:
      - neonpro-network
    depends_on:
      - web
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # BACKUP SERVICE
  # =============================================================================
  backup:
    image: neonpro/backup-service:latest
    container_name: neonpro-backup-prod
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *
      - BACKUP_RETENTION_DAYS=30
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${BACKUP_S3_BUCKET:-neonpro-backups-prod}
      - S3_REGION=${BACKUP_S3_REGION:-sa-east-1}
    networks:
      - neonpro-network
    volumes:
      - redis-data:/backup/redis:ro
      - web-logs:/backup/logs:ro
      - ./backup/scripts:/backup/scripts:ro
    depends_on:
      - redis

  # =============================================================================
  # SECURITY SCANNER
  # =============================================================================
  security-scanner:
    image: aquasec/trivy:latest
    container_name: neonpro-security-scanner
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy-cache:/root/.cache
    networks:
      - neonpro-network
    command: >
      sh -c "
        trivy image --exit-code 0 --severity HIGH,CRITICAL neonpro/ai-services:${VERSION:-latest} &&
        trivy fs --exit-code 0 --severity HIGH,CRITICAL /app
      "
    profiles:
      - security

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  neonpro-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  web-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neonpro/logs
  web-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neonpro/uploads
  web-cache:
    driver: local
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neonpro/redis
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neonpro/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neonpro/grafana
  traefik-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neonpro/certs
  trivy-cache:
    driver: local

# =============================================================================
# DOCKER COMPOSE PROFILES
# =============================================================================
# Usage Examples:
# - Full stack: docker-compose -f docker-compose.production.yml up -d
# - Without monitoring: docker-compose -f docker-compose.production.yml --profile web up -d  
# - Security scan: docker-compose -f docker-compose.production.yml --profile security up
# - Development: docker-compose -f docker-compose.production.yml --profile dev up -d