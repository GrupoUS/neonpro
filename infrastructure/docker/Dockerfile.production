# NeonPro AI Services - Production Dockerfile
# Multi-stage build for optimized production image
# Includes security hardening and performance optimizations

# =============================================================================
# BASE IMAGE with security updates
# =============================================================================
FROM node:20-alpine AS base
LABEL maintainer="NeonPro Team <dev@neonpro.com.br>"
LABEL description="NeonPro AI Healthcare Platform - Production Image"
LABEL version="1.0.0"

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata && \
    rm -rf /var/cache/apk/*

# Set timezone for Brazil
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create non-root user for security
RUN addgroup -g 1001 -S neonpro && \
    adduser -S neonpro -u 1001 -G neonpro

# Set working directory
WORKDIR /app

# Enable PNPM
RUN corepack enable pnpm

# =============================================================================
# DEPENDENCIES STAGE - Install and cache dependencies
# =============================================================================
FROM base AS dependencies

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/*/package.json ./packages/*/
COPY apps/*/package.json ./apps/*/

# Configure pnpm for production
RUN pnpm config set store-dir /root/.pnpm-store

# Install dependencies with production optimizations
RUN --mount=type=cache,id=pnpm,target=/root/.pnpm-store \
    pnpm install --frozen-lockfile --prefer-offline

# =============================================================================
# BUILDER STAGE - Build the application
# =============================================================================
FROM dependencies AS builder

# Copy source code
COPY . .

# Set build environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV CI=true

# Build the application
RUN pnpm build

# Remove development dependencies to reduce image size
RUN pnpm prune --prod

# =============================================================================
# PRODUCTION STAGE - Final optimized image
# =============================================================================
FROM base AS production

# Set production environment
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# Create app directories with proper permissions
RUN mkdir -p /app/logs /app/uploads /app/cache && \
    chown -R neonpro:neonpro /app

# Copy built application and dependencies
COPY --from=builder --chown=neonpro:neonpro /app/node_modules ./node_modules
COPY --from=builder --chown=neonpro:neonpro /app/packages ./packages
COPY --from=builder --chown=neonpro:neonpro /app/apps ./apps
COPY --from=builder --chown=neonpro:neonpro /app/next.config.mjs ./
COPY --from=builder --chown=neonpro:neonpro /app/package.json ./
COPY --from=builder --chown=neonpro:neonpro /app/pnpm-lock.yaml ./

# Copy built Next.js application
COPY --from=builder --chown=neonpro:neonpro /app/apps/web/.next ./apps/web/.next
COPY --from=builder --chown=neonpro:neonpro /app/apps/web/public ./apps/web/public

# Copy infrastructure files for runtime
COPY --from=builder --chown=neonpro:neonpro /app/infrastructure/scripts ./infrastructure/scripts

# Install production runtime dependencies
RUN apk add --no-cache \
    tini \
    su-exec && \
    rm -rf /var/cache/apk/*

# Security hardening
RUN chmod 755 /app && \
    find /app -type f -name "*.js" -exec chmod 644 {} \; && \
    find /app -type f -name "*.json" -exec chmod 644 {} \; && \
    find /app -type d -exec chmod 755 {} \;

# Remove unnecessary files to reduce image size
RUN rm -rf \
    /app/apps/web/.next/cache/webpack \
    /app/node_modules/.cache \
    /tmp/* \
    /var/tmp/* \
    /root/.npm \
    /root/.pnpm-store

# Switch to non-root user
USER neonpro

# Expose port
EXPOSE 3000

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use tini for proper signal handling
ENTRYPOINT ["tini", "--"]

# Start the application
CMD ["pnpm", "start"]

# =============================================================================
# DEVELOPMENT STAGE - For local development with hot reload
# =============================================================================
FROM base AS development

# Install development dependencies
RUN apk add --no-cache git openssh

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/*/package.json ./packages/*/
COPY apps/*/package.json ./apps/*/

# Install all dependencies including dev dependencies
RUN --mount=type=cache,id=pnpm-dev,target=/root/.pnpm-store \
    pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Switch to non-root user
USER neonpro

# Expose port and Next.js dev server port
EXPOSE 3000 3001

# Development command
CMD ["pnpm", "dev"]

# =============================================================================
# TESTING STAGE - For running tests in CI/CD
# =============================================================================
FROM dependencies AS testing

# Install testing dependencies
RUN apk add --no-cache git

# Copy source code
COPY . .

# Install Playwright browsers for E2E testing
RUN npx playwright install --with-deps chromium

# Run tests
CMD ["pnpm", "test"]

# =============================================================================
# SECURITY SCANNER STAGE - For vulnerability scanning
# =============================================================================
FROM aquasec/trivy:latest AS security-scanner

# Copy application files for scanning
COPY --from=production /app /scan-target

# Run security scan
CMD ["trivy", "fs", "--exit-code", "1", "--severity", "HIGH,CRITICAL", "/scan-target"]

# =============================================================================
# NGINX STAGE - Static file server for assets
# =============================================================================
FROM nginx:alpine AS nginx

# Copy built static assets
COPY --from=builder /app/apps/web/.next/static /usr/share/nginx/html/static
COPY --from=builder /app/apps/web/public /usr/share/nginx/html

# Copy nginx configuration
COPY infrastructure/nginx/nginx.conf /etc/nginx/nginx.conf
COPY infrastructure/nginx/default.conf /etc/nginx/conf.d/default.conf

# Security hardening for nginx
RUN chmod 644 /etc/nginx/nginx.conf && \
    chmod 644 /etc/nginx/conf.d/default.conf && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Use non-root user
USER nginx

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

# =============================================================================
# BUILD ARGUMENTS AND METADATA
# =============================================================================
# Build arguments for versioning and configuration
ARG VERSION=latest
ARG BUILD_DATE
ARG VCS_REF
ARG NEXT_TELEMETRY_DISABLED=1

# Image metadata
LABEL org.opencontainers.image.title="NeonPro AI Services"
LABEL org.opencontainers.image.description="Healthcare AI Platform with Brazilian Compliance"
LABEL org.opencontainers.image.version=$VERSION
LABEL org.opencontainers.image.created=$BUILD_DATE
LABEL org.opencontainers.image.revision=$VCS_REF
LABEL org.opencontainers.image.vendor="NeonPro Healthcare"
LABEL org.opencontainers.image.source="https://github.com/neonpro/healthcare-platform"
LABEL org.opencontainers.image.documentation="https://docs.neonpro.com.br"
LABEL org.opencontainers.image.licenses="MIT"

# Custom labels for NeonPro
LABEL neonpro.component="ai-services"
LABEL neonpro.environment="production"
LABEL neonpro.compliance="LGPD,ANVISA,CFM"
LABEL neonpro.security-scan="trivy"
LABEL neonpro.monitoring="prometheus,grafana"

# =============================================================================
# BUILD INSTRUCTIONS
# =============================================================================
# Build commands:
# 
# Production build:
# docker build -f infrastructure/docker/Dockerfile.production --target production -t neonpro/ai-services:latest .
#
# Development build:
# docker build -f infrastructure/docker/Dockerfile.production --target development -t neonpro/ai-services:dev .
#
# With build arguments:
# docker build -f infrastructure/docker/Dockerfile.production \
#   --build-arg VERSION=1.0.0 \
#   --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#   --build-arg VCS_REF=$(git rev-parse HEAD) \
#   --target production \
#   -t neonpro/ai-services:1.0.0 .
#
# Multi-platform build:
# docker buildx build --platform linux/amd64,linux/arm64 \
#   -f infrastructure/docker/Dockerfile.production \
#   --target production \
#   -t neonpro/ai-services:latest \
#   --push .
#
# Security scan:
# docker build -f infrastructure/docker/Dockerfile.production --target security-scanner .
#
# Test build:
# docker build -f infrastructure/docker/Dockerfile.production --target testing .
#
# =============================================================================