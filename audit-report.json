{
  "actions": [
    {
      "action": "update",
      "resolves": [
        {
          "id": 1102341,
          "path": ".>vitest>vite>esbuild",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "vite",
      "target": "7.1.5",
      "depth": 3
    },
    {
      "action": "review",
      "module": "tmp",
      "resolves": [
        {
          "id": 1106849,
          "path": "tools__performance>@lhci/cli>inquirer>external-editor>tmp",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1106849,
          "path": "tools__performance>@lhci/cli>tmp",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "hono",
      "resolves": [
        {
          "id": 1107532,
          "path": "apps__api>hono",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    }
  ],
  "advisories": {
    "1102341": {
      "findings": [
        {
          "version": "0.21.5",
          "paths": [
            ". > @vitest/ui@3.2.4 > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            ". > @vitest/ui@3.2.4 > vitest@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            ". > @vitest/ui@3.2.4 > vitest@3.2.4 > vite-node@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            ". > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            ". > vitest@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            ". > vitest@3.2.4 > vite-node@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "apps/api > vitest@2.1.9 > @vitest/mocker@2.1.9 > vite@5.4.20 > esbuild@0.21.5",
            "apps/api > vitest@2.1.9 > @vitest/ui@3.2.4 > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "apps/api > vitest@2.1.9 > @vitest/ui@3.2.4 > vitest@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "apps/api > vitest@2.1.9 > @vitest/ui@3.2.4 > vitest@3.2.4 > vite-node@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "apps/api > vitest@2.1.9 > vite@5.4.20 > esbuild@0.21.5",
            "apps/api > vitest@2.1.9 > vite-node@2.1.9 > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > @tanstack/router-plugin@1.131.41 > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > @vitejs/plugin-react@4.7.0 > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > vitest@2.1.9 > @vitest/mocker@2.1.9 > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > vitest@2.1.9 > @vitest/ui@3.2.4 > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > vitest@2.1.9 > @vitest/ui@3.2.4 > vitest@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > vitest@2.1.9 > @vitest/ui@3.2.4 > vitest@3.2.4 > vite-node@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > vitest@2.1.9 > vite@5.4.20 > esbuild@0.21.5",
            "apps/web > vitest@2.1.9 > vite-node@2.1.9 > vite@5.4.20 > esbuild@0.21.5",
            "packages/cli > vitest@1.6.1 > @vitest/ui@3.2.4 > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "packages/cli > vitest@1.6.1 > @vitest/ui@3.2.4 > vitest@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "packages/cli > vitest@1.6.1 > @vitest/ui@3.2.4 > vitest@3.2.4 > vite-node@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "packages/cli > vitest@1.6.1 > vite@5.4.20 > esbuild@0.21.5",
            "packages/cli > vitest@1.6.1 > vite-node@1.6.1 > vite@5.4.20 > esbuild@0.21.5",
            "packages/core-services > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "packages/core-services > vitest@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "packages/core-services > vitest@3.2.4 > vite-node@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "packages/security > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "packages/security > vitest@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "packages/security > vitest@3.2.4 > vite-node@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "tools/monorepo-audit > vitest@1.6.1 > @vitest/ui@3.2.4 > vitest@3.2.4 > @vitest/mocker@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "tools/monorepo-audit > vitest@1.6.1 > @vitest/ui@3.2.4 > vitest@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "tools/monorepo-audit > vitest@1.6.1 > @vitest/ui@3.2.4 > vitest@3.2.4 > vite-node@3.2.4 > vite@5.4.20 > esbuild@0.21.5",
            "tools/monorepo-audit > vitest@1.6.1 > vite@5.4.20 > esbuild@0.21.5",
            "tools/monorepo-audit > vitest@1.6.1 > vite-node@1.6.1 > vite@5.4.20 > esbuild@0.21.5"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/evanw/esbuild/security/advisories/GHSA-67mh-4wv8-2f99\n- https://github.com/evanw/esbuild/commit/de85afd65edec9ebc44a11e245fd9e9a2e99760d\n- https://github.com/advisories/GHSA-67mh-4wv8-2f99",
      "created": "2025-02-10T17:48:07.000Z",
      "id": 1102341,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nesbuild allows any websites to send any request to the development server and read the response due to default CORS settings.\n\n### Details\n\nesbuild sets `Access-Control-Allow-Origin: *` header to all requests, including the SSE connection, which allows any websites to send any request to the development server and read the response.\n\nhttps://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L121\nhttps://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L363\n\n**Attack scenario**:\n\n1. The attacker serves a malicious web page (`http://malicious.example.com`).\n1. The user accesses the malicious web page.\n1. The attacker sends a `fetch('http://127.0.0.1:8000/main.js')` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that's not the case for the reasons above.\n1. The attacker gets the content of `http://127.0.0.1:8000/main.js`.\n\nIn this scenario, I assumed that the attacker knows the URL of the bundle output file name. But the attacker can also get that information by\n\n- Fetching `/index.html`: normally you have a script tag here\n- Fetching `/assets`: it's common to have a `assets` directory when you have JS files and CSS files in a different directory and the directory listing feature tells the attacker the list of files\n- Connecting `/esbuild` SSE endpoint: the SSE endpoint sends the URL path of the changed files when the file is changed (`new EventSource('/esbuild').addEventListener('change', e => console.log(e.type, e.data))`)\n- Fetching URLs in the known file: once the attacker knows one file, the attacker can know the URLs imported from that file\n\nThe scenario above fetches the compiled content, but if the victim has the source map option enabled, the attacker can also get the non-compiled content by fetching the source map file.\n\n### PoC\n\n1. Download [reproduction.zip](https://github.com/user-attachments/files/18561484/reproduction.zip)\n2. Extract it and move to that directory\n1. Run `npm i`\n1. Run `npm run watch`\n1. Run `fetch('http://127.0.0.1:8000/app.js').then(r => r.text()).then(content => console.log(content))` in a different website's dev tools.\n\n![image](https://github.com/user-attachments/assets/08fc2e4d-e1ec-44ca-b0ea-78a73c3c40e9)\n\n### Impact\n\nUsers using the serve feature may get the source code stolen by malicious websites.",
      "reported_by": null,
      "title": "esbuild enables any website to send any requests to the development server and read the response",
      "metadata": null,
      "cves": [],
      "access": "public",
      "severity": "moderate",
      "module_name": "esbuild",
      "vulnerable_versions": "<=0.24.2",
      "github_advisory_id": "GHSA-67mh-4wv8-2f99",
      "recommendation": "Upgrade to version 0.25.0 or later",
      "patched_versions": ">=0.25.0",
      "updated": "2025-02-10T17:48:08.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-346"
      ],
      "url": "https://github.com/advisories/GHSA-67mh-4wv8-2f99"
    },
    "1106849": {
      "findings": [
        {
          "version": "0.0.33",
          "paths": [
            "tools/performance > @lhci/cli@0.15.1 > inquirer@6.5.2 > external-editor@3.1.0 > tmp@0.0.33"
          ]
        },
        {
          "version": "0.1.0",
          "paths": [
            "tools/performance > @lhci/cli@0.15.1 > tmp@0.1.0"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/raszi/node-tmp/security/advisories/GHSA-52f5-9888-hmc6\n- https://github.com/raszi/node-tmp/commit/188b25e529496e37adaf1a1d9dccb40019a08b1b\n- https://nvd.nist.gov/vuln/detail/CVE-2025-54798\n- https://github.com/raszi/node-tmp/issues/207\n- https://github.com/advisories/GHSA-52f5-9888-hmc6",
      "created": "2025-08-06T17:06:04.000Z",
      "id": 1106849,
      "npm_advisory_id": null,
      "overview": "### Summary\n\n`tmp@0.2.3` is vulnerable to an Arbitrary temporary file / directory write via symbolic link `dir` parameter.\n\n\n### Details\n\nAccording to the documentation there are some conditions that must be held:\n\n```\n// https://github.com/raszi/node-tmp/blob/v0.2.3/README.md?plain=1#L41-L50\n\nOther breaking changes, i.e.\n\n- template must be relative to tmpdir\n- name must be relative to tmpdir\n- dir option must be relative to tmpdir //<-- this assumption can be bypassed using symlinks\n\nare still in place.\n\nIn order to override the system's tmpdir, you will have to use the newly\nintroduced tmpdir option.\n\n\n// https://github.com/raszi/node-tmp/blob/v0.2.3/README.md?plain=1#L375\n* `dir`: the optional temporary directory that must be relative to the system's default temporary directory.\n     absolute paths are fine as long as they point to a location under the system's default temporary directory.\n     Any directories along the so specified path must exist, otherwise a ENOENT error will be thrown upon access, \n     as tmp will not check the availability of the path, nor will it establish the requested path for you.\n```\n\nRelated issue: https://github.com/raszi/node-tmp/issues/207.\n\n\nThe issue occurs because `_resolvePath` does not properly handle symbolic link when resolving paths:\n```js\n// https://github.com/raszi/node-tmp/blob/v0.2.3/lib/tmp.js#L573-L579\nfunction _resolvePath(name, tmpDir) {\n  if (name.startsWith(tmpDir)) {\n    return path.resolve(name);\n  } else {\n    return path.resolve(path.join(tmpDir, name));\n  }\n}\n```\n\nIf the `dir` parameter points to a symlink that resolves to a folder outside the `tmpDir`, it's possible to bypass the `_assertIsRelative` check used in `_assertAndSanitizeOptions`:\n```js\n// https://github.com/raszi/node-tmp/blob/v0.2.3/lib/tmp.js#L590-L609\nfunction _assertIsRelative(name, option, tmpDir) {\n  if (option === 'name') {\n    // assert that name is not absolute and does not contain a path\n    if (path.isAbsolute(name))\n      throw new Error(`${option} option must not contain an absolute path, found \"${name}\".`);\n    // must not fail on valid .<name> or ..<name> or similar such constructs\n    let basename = path.basename(name);\n    if (basename === '..' || basename === '.' || basename !== name)\n      throw new Error(`${option} option must not contain a path, found \"${name}\".`);\n  }\n  else { // if (option === 'dir' || option === 'template') {\n    // assert that dir or template are relative to tmpDir\n    if (path.isAbsolute(name) && !name.startsWith(tmpDir)) {\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${name}\".`);\n    }\n    let resolvedPath = _resolvePath(name, tmpDir); //<--- \n    if (!resolvedPath.startsWith(tmpDir))\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${resolvedPath}\".`);\n  }\n}\n```\n\n\n### PoC\n\nThe following PoC demonstrates how writing a tmp file on a folder outside the `tmpDir` is possible.\nTested on a Linux machine.\n\n- Setup: create a symbolic link inside the `tmpDir` that points to a directory outside of it\n```bash\nmkdir $HOME/mydir1\n\nln -s $HOME/mydir1 ${TMPDIR:-/tmp}/evil-dir\n```\n\n- check the folder is empty:\n```bash\nls -lha $HOME/mydir1 | grep \"tmp-\"\n```\n\n- run the poc\n```bash\nnode main.js\nFile:  /tmp/evil-dir/tmp-26821-Vw87SLRaBIlf\ntest 1: ENOENT: no such file or directory, open '/tmp/mydir1/tmp-[random-id]'\ntest 2: dir option must be relative to \"/tmp\", found \"/foo\".\ntest 3: dir option must be relative to \"/tmp\", found \"/home/user/mydir1\".\n```\n\n- the temporary file is created under `$HOME/mydir1` (outside the `tmpDir`):\n```bash\nls -lha $HOME/mydir1 | grep \"tmp-\"\n-rw------- 1 user user    0 Apr  X XX:XX tmp-[random-id]\n```\n\n\n- `main.js`\n```js\n// npm i tmp@0.2.3\n\nconst tmp = require('tmp');\n\nconst tmpobj = tmp.fileSync({ 'dir': 'evil-dir'});\nconsole.log('File: ', tmpobj.name);\n\ntry {\n    tmp.fileSync({ 'dir': 'mydir1'});\n} catch (err) {\n    console.log('test 1:', err.message)\n}\n\ntry {\n    tmp.fileSync({ 'dir': '/foo'});\n} catch (err) {\n    console.log('test 2:', err.message)\n}\n\ntry {\n    const fs = require('node:fs');\n    const resolved = fs.realpathSync('/tmp/evil-dir');\n    tmp.fileSync({ 'dir': resolved});\n} catch (err) {\n    console.log('test 3:', err.message)\n}\n```\n\n\nA Potential fix could be to call `fs.realpathSync` (or similar) that resolves also symbolic links.\n```js\nfunction _resolvePath(name, tmpDir) {\n  let resolvedPath;\n  if (name.startsWith(tmpDir)) {\n    resolvedPath = path.resolve(name);\n  } else {\n    resolvedPath = path.resolve(path.join(tmpDir, name));\n  }\n  return fs.realpathSync(resolvedPath);\n}\n```\n\n\n### Impact\n\nArbitrary temporary file / directory write via symlink",
      "reported_by": null,
      "title": "tmp allows arbitrary temporary file / directory write via symbolic link `dir` parameter",
      "metadata": null,
      "cves": [
        "CVE-2025-54798"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "tmp",
      "vulnerable_versions": "<=0.2.3",
      "github_advisory_id": "GHSA-52f5-9888-hmc6",
      "recommendation": "Upgrade to version 0.2.4 or later",
      "patched_versions": ">=0.2.4",
      "updated": "2025-08-07T15:11:23.000Z",
      "cvss": {
        "score": 2.5,
        "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "cwe": [
        "CWE-59"
      ],
      "url": "https://github.com/advisories/GHSA-52f5-9888-hmc6"
    },
    "1107532": {
      "findings": [
        {
          "version": "4.9.6",
          "paths": [
            ". > hono@4.9.6",
            "apps/api > @hono/node-server@1.19.2 > hono@4.9.6",
            "apps/api > @hono/swagger-ui@0.4.1 > hono@4.9.6",
            "apps/api > @hono/zod-openapi@0.18.4 > @hono/zod-validator@0.4.3 > hono@4.9.6",
            "apps/api > @hono/zod-openapi@0.18.4 > hono@4.9.6",
            "apps/api > @hono/zod-validator@0.2.2 > hono@4.9.6",
            "apps/api > hono@4.9.6"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/honojs/hono/security/advisories/GHSA-92vj-g62v-jqhh\n- https://nvd.nist.gov/vuln/detail/CVE-2025-59139\n- https://github.com/honojs/hono/commit/605c70560b52f13af10379f79b76717042fafe8d\n- https://github.com/advisories/GHSA-92vj-g62v-jqhh",
      "created": "2025-09-12T21:12:20.000Z",
      "id": 1107532,
      "npm_advisory_id": null,
      "overview": "### Summary\nA flaw in the `bodyLimit` middleware could allow bypassing the configured request body size limit when conflicting HTTP headers were present.\n\n### Details\nThe middleware previously prioritized the `Content-Length` header even when a `Transfer-Encoding: chunked` header was also included. According to the HTTP specification, `Content-Length` must be ignored in such cases. This discrepancy could allow oversized request bodies to bypass the configured limit.\n\nMost standards-compliant runtimes and reverse proxies may reject such malformed requests with `400 Bad Request`, so the practical impact depends on the runtime and deployment environment.\n\n### Impact\nIf body size limits are used as a safeguard against large or malicious requests, this flaw could allow attackers to send oversized request bodies. The primary risk is denial of service (DoS) due to excessive memory or CPU consumption when handling very large requests.\n\n### Resolution\nThe implementation has been updated to align with the HTTP specification, ensuring that `Transfer-Encoding` takes precedence over `Content-Length`. The issue is fixed in Hono v4.9.7, and all users should upgrade immediately.",
      "reported_by": null,
      "title": "Hono has Body Limit Middleware Bypass",
      "metadata": null,
      "cves": [
        "CVE-2025-59139"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "hono",
      "vulnerable_versions": "<4.9.7",
      "github_advisory_id": "GHSA-92vj-g62v-jqhh",
      "recommendation": "Upgrade to version 4.9.7 or later",
      "patched_versions": ">=4.9.7",
      "updated": "2025-09-12T21:12:21.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
      },
      "cwe": [
        "CWE-400",
        "CWE-770"
      ],
      "url": "https://github.com/advisories/GHSA-92vj-g62v-jqhh"
    }
  },
  "muted": [],
  "metadata": {
    "vulnerabilities": {
      "info": 0,
      "low": 2,
      "moderate": 2,
      "high": 0,
      "critical": 0
    },
    "dependencies": 1559,
    "devDependencies": 0,
    "optionalDependencies": 0,
    "totalDependencies": 1559
  }
}
