openapi: 3.0.3
info:
  title: NeonPro AI Agent API
  description: |
    API for AI agent database integration with conversational interface.
    
    ## Security Requirements
    - All communication MUST use HTTPS with TLS 1.3 or higher
    - HTTP requests are automatically redirected to HTTPS
    - HSTS headers enforced with max-age ≥ 31536000
    - Comprehensive security headers implemented
    - Mixed content strictly prohibited
    
    ## TLS Configuration
    - TLS 1.3 minimum version
    - Perfect Forward Secrecy (PFS) cipher suites
    - Certificate Transparency logging enabled
    - Automatic certificate renewal
    
    ## Performance Requirements
    - Agent responses ≤ 2 seconds for simple queries
    - HTTPS handshake time ≤ 300ms
    - Support for concurrent users
  version: 1.0.0

servers:
  - url: https://api.neonpro.com/v1
    description: Production server (HTTPS required, TLS 1.3+)

security:
  - BearerAuth: []

paths:
  /api/ai/data-agent:
    post:
      summary: Send query to AI data agent
      description: |
        Process natural language queries and return structured responses.
        Supports queries for client data, appointments, and financial information.
      operationId: processAgentQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentQueryRequest'
            examples:
              clientQuery:
                summary: Query for client information
                value:
                  query: "Quais os próximos agendamentos?"
                  sessionId: "sess_123456"
                  context:
                    userId: "user_789"
              appointmentQuery:
                summary: Query for appointments
                value:
                  query: "Me mostre os clientes cadastrados"
                  sessionId: "sess_123456"
                  context:
                    userId: "user_789"
      responses:
        '200':
          description: Successful response with agent data
          headers:
            Strict-Transport-Security:
              description: HSTS header enforcing HTTPS
              schema:
                type: string
                example: "max-age=31536000; includeSubDomains; preload"
            X-Content-Type-Options:
              description: Prevents MIME type sniffing
              schema:
                type: string
                example: "nosniff"
            X-Frame-Options:
              description: Prevents clickjacking
              schema:
                type: string
                example: "DENY"
            X-XSS-Protection:
              description: XSS protection
              schema:
                type: string
                example: "1; mode=block"
            Content-Security-Policy:
              description: CSP policy for enhanced security
              schema:
                type: string
                example: "default-src 'self'; script-src 'self'"
            Referrer-Policy:
              description: Controls referrer information
              schema:
                type: string
                example: "strict-origin-when-cross-origin"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentQueryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/ai/sessions/{sessionId}:
    get:
      summary: Get conversation session
      description: Retrieve conversation history and context for a session
      operationId: getSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Session identifier
      responses:
        '200':
          description: Session data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/sessions/{sessionId}/feedback:
    post:
      summary: Submit feedback for agent response
      description: Provide feedback on agent responses to improve accuracy
      operationId: submitFeedback
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Session identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
      responses:
        '200':
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Feedback received successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for user authentication

  schemas:
    AgentQueryRequest:
      type: object
      required:
        - query
        - sessionId
      properties:
        query:
          type: string
          description: Natural language query from user
          example: "Quais os próximos agendamentos?"
          minLength: 1
          maxLength: 1000
        sessionId:
          type: string
          format: uuid
          description: Unique session identifier for conversation context
          example: "550e8400-e29b-41d4-a716-446655440000"
        context:
          type: object
          description: Optional conversation context
          properties:
            userId:
              type: string
              format: uuid
              example: "user_789"
            previousMessages:
              type: array
              items:
                $ref: '#/components/schemas/ChatMessage'
              maxItems: 10
              description: Recent conversation history

    AgentQueryResponse:
      type: object
      required:
        - success
        - response
      properties:
        success:
          type: boolean
          example: true
        response:
          type: object
          required:
            - id
            - type
            - content
          properties:
            id:
              type: string
              format: uuid
              example: "resp_123"
            type:
              type: string
              enum: [text, list, table, chart, error]
              example: "list"
              description: Type of response for UI rendering
            content:
              type: object
              properties:
                title:
                  type: string
                  example: "Próximos Agendamentos"
                text:
                  type: string
                  example: "Aqui estão seus próximos agendamentos:"
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      datetime:
                        type: string
                        format: date-time
                      clientName:
                        type: string
                      status:
                        type: string
                        enum: [scheduled, confirmed, completed, cancelled]
                columns:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      label:
                        type: string
                      type:
                        type: string
                        enum: [string, number, date, boolean]
        actions:
          type: array
          items:
            $ref: '#/components/schemas/InteractiveAction'
          description: Available interactive actions for the response
        metadata:
          type: object
          properties:
            processingTime:
              type: integer
              description: Processing time in milliseconds
              example: 1250
            confidence:
              type: number
              format: float
              minimum: 0
              maximum: 1
              example: 0.95
            sources:
              type: array
              items:
                type: string
              example: ["appointments", "clients"]

    InteractiveAction:
      type: object
      required:
        - id
        - label
        - type
      properties:
        id:
          type: string
          example: "view_details"
        label:
          type: string
          example: "Ver detalhes"
        type:
          type: string
          enum: [button, link, form]
        action:
          type: string
          example: "navigate_to_details"
        parameters:
          type: object
          description: Action-specific parameters

    ChatMessage:
      type: object
      required:
        - id
        - role
        - content
        - timestamp
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant]
        content:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          description: Optional structured data

    SessionResponse:
      type: object
      required:
        - sessionId
        - userId
        - status
        - createdAt
        - lastActivity
      properties:
        sessionId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, expired, terminated]
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        createdAt:
          type: string
          format: date-time
        lastActivity:
          type: string
          format: date-time
        messageCount:
          type: integer
          minimum: 0

    FeedbackRequest:
      type: object
      required:
        - messageId
        - feedback
      properties:
        messageId:
          type: string
          format: uuid
          description: ID of the message being rated
        feedback:
          type: object
          required:
            - rating
          properties:
            rating:
              type: integer
              minimum: 1
              maximum: 5
              description: Rating from 1 (poor) to 5 (excellent)
            comment:
              type: string
              maxLength: 1000
              description: Optional feedback comment
            helpful:
              type: boolean
              description: Whether the response was helpful

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              example: "INVALID_QUERY"
            message:
              type: string
              example: "Query cannot be empty"
            details:
              type: object
              description: Additional error details

  responses:
    BadRequest:
      description: Bad request - invalid input
      headers:
        Strict-Transport-Security:
          description: HSTS header enforcing HTTPS
          schema:
            type: string
            example: "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options:
          description: Prevents MIME type sniffing
          schema:
            type: string
            example: "nosniff"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - authentication required
      headers:
        Strict-Transport-Security:
          description: HSTS header enforcing HTTPS
          schema:
            type: string
            example: "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options:
          description: Prevents MIME type sniffing
          schema:
            type: string
            example: "nosniff"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden - insufficient permissions
      headers:
        Strict-Transport-Security:
          description: HSTS header enforcing HTTPS
          schema:
            type: string
            example: "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options:
          description: Prevents MIME type sniffing
          schema:
            type: string
            example: "nosniff"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalError:
      description: Internal server error
      headers:
        Strict-Transport-Security:
          description: HSTS header enforcing HTTPS
          schema:
            type: string
            example: "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options:
          description: Prevents MIME type sniffing
          schema:
            type: string
            example: "nosniff"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'