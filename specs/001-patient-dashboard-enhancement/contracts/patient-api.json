{
  "openapi": "3.0.3",
  "info": {
    "title": "NeonPro Patient Dashboard API",
    "description": "Enhanced patient management API for Brazilian healthcare clinics",
    "version": "1.0.0",
    "contact": {
      "name": "NeonPro API Support",
      "email": "api@neonpro.com.br"
    }
  },
  "servers": [
    {
      "url": "https://api.neonpro.com.br/v1",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Development server"
    }
  ],
  "paths": {
    "/patients": {
      "get": {
        "summary": "List patients with advanced filtering",
        "description": "Retrieve a paginated list of patients with support for advanced filtering, sorting, and search",
        "operationId": "listPatients",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "enum": [25, 50, 100],
              "default": 50
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Global search across name, CPF, email, phone",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "name_filter",
            "in": "query",
            "description": "Filter by patient name (partial match)",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "cpf_filter",
            "in": "query",
            "description": "Filter by CPF (exact or partial match)",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9.-]*$"
            }
          },
          {
            "name": "email_filter",
            "in": "query",
            "description": "Filter by email (partial match)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "registration_date_start",
            "in": "query",
            "description": "Filter patients registered on or after this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "registration_date_end",
            "in": "query",
            "description": "Filter patients registered on or before this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "age_min",
            "in": "query",
            "description": "Minimum age filter",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 150
            }
          },
          {
            "name": "age_max",
            "in": "query",
            "description": "Maximum age filter",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 150
            }
          },
          {
            "name": "gender",
            "in": "query",
            "description": "Filter by gender (multiple values allowed)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["male", "female", "other", "prefer_not_to_say"]
              }
            }
          },
          {
            "name": "has_insurance",
            "in": "query",
            "description": "Filter by insurance status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "consent_status",
            "in": "query",
            "description": "Filter by LGPD consent status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["active", "withdrawn", "expired"]
              }
            }
          },
          {
            "name": "sort_field",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["full_name", "created_at", "birth_date", "last_accessed", "cpf"],
              "default": "created_at"
            }
          },
          {
            "name": "sort_direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with patient list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new patient",
        "description": "Register a new patient with comprehensive information and LGPD compliance",
        "operationId": "createPatient",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Patient created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid patient data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Patient with CPF already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/patients/{patientId}": {
      "get": {
        "summary": "Get patient details",
        "description": "Retrieve detailed information for a specific patient",
        "operationId": "getPatient",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "description": "Patient unique identifier",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patient details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientResponse"
                }
              }
            }
          },
          "404": {
            "description": "Patient not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update patient information",
        "description": "Update existing patient information with audit trail",
        "operationId": "updatePatient",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "description": "Patient unique identifier",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Patient updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Patient not found"
          }
        }
      },
      "delete": {
        "summary": "Soft delete patient",
        "description": "Soft delete patient record (for LGPD compliance)",
        "operationId": "deletePatient",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "description": "Patient unique identifier",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patient deleted successfully"
          },
          "404": {
            "description": "Patient not found"
          }
        }
      }
    },
    "/patients/bulk": {
      "post": {
        "summary": "Bulk patient operations",
        "description": "Perform bulk operations on multiple patients (update, delete, export)",
        "operationId": "bulkPatientOperations",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOperationRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Bulk operation accepted for processing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid bulk operation request"
          }
        }
      }
    },
    "/patients/search": {
      "get": {
        "summary": "Global patient search",
        "description": "Advanced search across all patient fields with autocomplete support",
        "operationId": "searchPatients",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Search query string",
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 100
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive/deleted patients in search",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/patients/{patientId}/documents": {
      "post": {
        "summary": "Upload patient document",
        "description": "Upload and associate a document with a patient",
        "operationId": "uploadPatientDocument",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentUploadRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or metadata"
          },
          "413": {
            "description": "File too large"
          }
        }
      },
      "get": {
        "summary": "List patient documents",
        "description": "Get all documents associated with a patient",
        "operationId": "listPatientDocuments",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patients/export": {
      "post": {
        "summary": "Export patient data",
        "description": "Export patient data in various formats (CSV, PDF, Excel) with LGPD compliance",
        "operationId": "exportPatients",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Export request accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PatientListResponse": {
        "type": "object",
        "required": ["data", "pagination"],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientSummary"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationInfo"
          },
          "filters_applied": {
            "type": "object",
            "description": "Summary of filters that were applied"
          }
        }
      },
      "PatientSummary": {
        "type": "object",
        "required": ["id", "full_name", "cpf", "email", "created_at"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "full_name": {
            "type": "string"
          },
          "preferred_name": {
            "type": "string"
          },
          "cpf": {
            "type": "string",
            "pattern": "^[0-9]{3}\\.[0-9]{3}\\.[0-9]{3}-[0-9]{2}$"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "age": {
            "type": "integer"
          },
          "gender": {
            "type": "string",
            "enum": ["male", "female", "other", "prefer_not_to_say"]
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "has_insurance": {
            "type": "boolean"
          },
          "consent_status": {
            "type": "string",
            "enum": ["active", "withdrawn", "expired"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_accessed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PatientResponse": {
        "type": "object",
        "required": ["id", "full_name", "cpf", "email", "birth_date", "consent_lgpd"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "full_name": {
            "type": "string"
          },
          "preferred_name": {
            "type": "string"
          },
          "cpf": {
            "type": "string"
          },
          "rg": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "$ref": "#/components/schemas/BrazilianPhone"
          },
          "address": {
            "$ref": "#/components/schemas/BrazilianAddress"
          },
          "birth_date": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string",
            "enum": ["male", "female", "other", "prefer_not_to_say"]
          },
          "medical_history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MedicalHistory"
            }
          },
          "allergies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "medications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Medication"
            }
          },
          "insurance": {
            "$ref": "#/components/schemas/InsuranceInfo"
          },
          "emergency_contact": {
            "$ref": "#/components/schemas/EmergencyContact"
          },
          "consent_lgpd": {
            "$ref": "#/components/schemas/LGPDConsent"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PatientCreateRequest": {
        "type": "object",
        "required": ["full_name", "cpf", "email", "phone", "address", "birth_date", "consent_lgpd"],
        "properties": {
          "full_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100
          },
          "preferred_name": {
            "type": "string",
            "maxLength": 50
          },
          "cpf": {
            "type": "string",
            "pattern": "^[0-9]{11}$",
            "description": "CPF without formatting"
          },
          "rg": {
            "type": "string",
            "maxLength": 20
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 254
          },
          "phone": {
            "$ref": "#/components/schemas/BrazilianPhoneInput"
          },
          "address": {
            "$ref": "#/components/schemas/BrazilianAddressInput"
          },
          "birth_date": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string",
            "enum": ["male", "female", "other", "prefer_not_to_say"]
          },
          "emergency_contact": {
            "$ref": "#/components/schemas/EmergencyContactInput"
          },
          "consent_lgpd": {
            "$ref": "#/components/schemas/LGPDConsentInput"
          }
        }
      },
      "PatientUpdateRequest": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100
          },
          "preferred_name": {
            "type": "string",
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "$ref": "#/components/schemas/BrazilianPhoneInput"
          },
          "address": {
            "$ref": "#/components/schemas/BrazilianAddressInput"
          },
          "emergency_contact": {
            "$ref": "#/components/schemas/EmergencyContactInput"
          }
        }
      },
      "BrazilianPhone": {
        "type": "object",
        "required": ["country_code", "area_code", "number", "formatted"],
        "properties": {
          "country_code": {
            "type": "string",
            "enum": ["+55"]
          },
          "area_code": {
            "type": "string",
            "pattern": "^[0-9]{2}$"
          },
          "number": {
            "type": "string",
            "pattern": "^[0-9]{8,9}$"
          },
          "formatted": {
            "type": "string",
            "pattern": "^\\+55 \\([0-9]{2}\\) [0-9]{4,5}-[0-9]{4}$"
          },
          "type": {
            "type": "string",
            "enum": ["mobile", "landline", "commercial"]
          },
          "whatsapp_enabled": {
            "type": "boolean"
          }
        }
      },
      "BrazilianPhoneInput": {
        "type": "object",
        "required": ["area_code", "number"],
        "properties": {
          "area_code": {
            "type": "string",
            "pattern": "^[0-9]{2}$"
          },
          "number": {
            "type": "string",
            "pattern": "^[0-9]{8,9}$"
          },
          "type": {
            "type": "string",
            "enum": ["mobile", "landline", "commercial"]
          },
          "whatsapp_enabled": {
            "type": "boolean"
          }
        }
      },
      "BrazilianAddress": {
        "type": "object",
        "required": ["cep", "street", "neighborhood", "city", "state"],
        "properties": {
          "cep": {
            "type": "string",
            "pattern": "^[0-9]{5}-[0-9]{3}$"
          },
          "street": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "complement": {
            "type": "string"
          },
          "neighborhood": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": ["AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"]
          }
        }
      },
      "BrazilianAddressInput": {
        "type": "object",
        "required": ["cep", "street", "neighborhood", "city", "state"],
        "properties": {
          "cep": {
            "type": "string",
            "pattern": "^[0-9]{5}-?[0-9]{3}$"
          },
          "street": {
            "type": "string",
            "minLength": 1
          },
          "number": {
            "type": "string"
          },
          "complement": {
            "type": "string"
          },
          "neighborhood": {
            "type": "string",
            "minLength": 1
          },
          "city": {
            "type": "string",
            "minLength": 1
          },
          "state": {
            "type": "string",
            "enum": ["AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"]
          }
        }
      },
      "LGPDConsent": {
        "type": "object",
        "required": ["data_processing", "consent_version", "consent_date"],
        "properties": {
          "data_processing": {
            "type": "boolean"
          },
          "data_processing_date": {
            "type": "string",
            "format": "date-time"
          },
          "marketing_communications": {
            "type": "boolean"
          },
          "marketing_date": {
            "type": "string",
            "format": "date-time"
          },
          "data_sharing_third_parties": {
            "type": "boolean"
          },
          "sharing_date": {
            "type": "string",
            "format": "date-time"
          },
          "consent_version": {
            "type": "string"
          },
          "consent_date": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "legal_basis": {
            "type": "string",
            "enum": ["consent", "contract", "legal_obligation", "vital_interests"]
          }
        }
      },
      "LGPDConsentInput": {
        "type": "object",
        "required": ["data_processing"],
        "properties": {
          "data_processing": {
            "type": "boolean",
            "enum": [true]
          },
          "marketing_communications": {
            "type": "boolean"
          },
          "data_sharing_third_parties": {
            "type": "boolean"
          }
        }
      },
      "EmergencyContact": {
        "type": "object",
        "required": ["name", "relationship", "phone"],
        "properties": {
          "name": {
            "type": "string"
          },
          "relationship": {
            "type": "string"
          },
          "phone": {
            "$ref": "#/components/schemas/BrazilianPhone"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "EmergencyContactInput": {
        "type": "object",
        "required": ["name", "relationship", "phone"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2
          },
          "relationship": {
            "type": "string",
            "minLength": 2
          },
          "phone": {
            "$ref": "#/components/schemas/BrazilianPhoneInput"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "MedicalHistory": {
        "type": "object",
        "properties": {
          "condition": {
            "type": "string"
          },
          "diagnosis_date": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": ["active", "resolved", "chronic"]
          },
          "notes": {
            "type": "string"
          }
        }
      },
      "Medication": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "dosage": {
            "type": "string"
          },
          "frequency": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "InsuranceInfo": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string"
          },
          "policy_number": {
            "type": "string"
          },
          "coverage_type": {
            "type": "string"
          },
          "valid_until": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "BulkOperationRequest": {
        "type": "object",
        "required": ["operation_type", "patient_ids"],
        "properties": {
          "operation_type": {
            "type": "string",
            "enum": ["update", "delete", "export", "send_communication"]
          },
          "patient_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "maxItems": 1000
          },
          "operation_data": {
            "type": "object",
            "description": "Data specific to the operation type"
          }
        }
      },
      "BulkOperationResponse": {
        "type": "object",
        "required": ["operation_id", "status"],
        "properties": {
          "operation_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "failed"]
          },
          "progress": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "completed": {
                "type": "integer"
              },
              "failed": {
                "type": "integer"
              }
            }
          }
        }
      },
      "PatientSearchResponse": {
        "type": "object",
        "required": ["results", "total"],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientSearchResult"
            }
          },
          "total": {
            "type": "integer"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatientSearchResult": {
        "type": "object",
        "required": ["id", "full_name", "match_score"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "full_name": {
            "type": "string"
          },
          "cpf": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "match_score": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          "match_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DocumentUploadRequest": {
        "type": "object",
        "required": ["file", "document_type"],
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "document_type": {
            "type": "string",
            "enum": ["identification", "medical_record", "insurance", "consent_form", "photo", "other"]
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DocumentResponse": {
        "type": "object",
        "required": ["document_id", "file_name", "document_type", "upload_date"],
        "properties": {
          "document_id": {
            "type": "string",
            "format": "uuid"
          },
          "file_name": {
            "type": "string"
          },
          "file_size": {
            "type": "integer"
          },
          "file_type": {
            "type": "string"
          },
          "document_type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "upload_date": {
            "type": "string",
            "format": "date-time"
          },
          "uploaded_by": {
            "type": "string"
          }
        }
      },
      "ExportRequest": {
        "type": "object",
        "required": ["format", "patient_ids"],
        "properties": {
          "format": {
            "type": "string",
            "enum": ["csv", "excel", "pdf"]
          },
          "patient_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specific fields to include in export"
          },
          "include_sensitive": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ExportResponse": {
        "type": "object",
        "required": ["export_id", "status"],
        "properties": {
          "export_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "processing", "completed", "failed"]
          },
          "download_url": {
            "type": "string",
            "format": "uri"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PaginationInfo": {
        "type": "object",
        "required": ["page", "per_page", "total_count", "total_pages"],
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1
          },
          "per_page": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "has_next": {
            "type": "boolean"
          },
          "has_previous": {
            "type": "boolean"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object"
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "required": ["error", "message", "validation_errors"],
        "properties": {
          "error": {
            "type": "string",
            "enum": ["validation_failed"]
          },
          "message": {
            "type": "string"
          },
          "validation_errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}