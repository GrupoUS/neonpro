import { NextRequest, NextResponse } from 'next/server'; import { z } from
'zod'; import { createClient } from '@/lib/supabase/server';
{{#if patientData}}
  import { validateLGPDCompliance, auditDataAccess } from '@/lib/compliance';
{{/if}}

// LGPD-compliant schema validation const
{{camelCase name}}Schema = z.object({
{{#if patientData}}
  patientId: z.string().uuid('Invalid patient ID format'), consentRequired:
  z.boolean().default(true),
{{/if}}
// Add your schema fields here });

{{#eq method "GET"}}
  /** *
  {{upperCase method}}
  /api/{{kebabCase name}}
  *
  {{#if patientData}}⚠️ LGPD: Handles patient data - requires consent validation{{/if}}
  */ export async function GET(request: NextRequest) { try { const supabase =
  createClient(); const { searchParams } = new URL(request.url);

  {{#if patientData}}
    // LGPD compliance validation const patientId =
    searchParams.get('patientId'); if (patientId) { await
    validateLGPDCompliance(request, { patientId, purpose: '{{name}}
    data access' }); }
  {{/if}}

  // Your implementation here const data = { message: '{{titleCase name}}
  endpoint', timestamp: new Date().toISOString() };

  {{#if patientData}}
    // Audit trail for patient data access if (patientId) { await
    auditDataAccess({ patientId, action: 'data_access', endpoint: '/api/{{kebabCase
      name
    }}', userId: 'system' // Replace with actual user ID from session }); }
  {{/if}}

  return NextResponse.json(data); } catch (error) { console.error('{{titleCase
    name
  }}
  API error:', error); if (error instanceof z.ZodError) { return
  NextResponse.json( { error: 'Validation failed', details: error.errors }, {
  status: 400 } ); } return NextResponse.json( { error: 'Internal server error'
  }, { status: 500 } ); } }
{{/eq}}

{{#eq method "POST"}}
  /** *
  {{upperCase method}}
  /api/{{kebabCase name}}
  *
  {{#if patientData}}⚠️ LGPD: Handles patient data - requires consent validation{{/if}}
  */ export async function POST(request: NextRequest) { try { const supabase =
  createClient(); const body = await request.json(); // Validate input data
  const validatedData =
  {{camelCase name}}Schema.parse(body);

  {{#if patientData}}
    // LGPD compliance validation await validateLGPDCompliance(request, {
    patientId: validatedData.patientId, purpose: '{{name}}
    data processing', consentRequired: validatedData.consentRequired });
  {{/if}}

  // Your implementation here const result = { id: crypto.randomUUID(),
  ...validatedData, createdAt: new Date().toISOString() };

  {{#if patientData}}
    // Audit trail for patient data processing await auditDataAccess({
    patientId: validatedData.patientId, action: 'data_create', endpoint: '/api/{{kebabCase
      name
    }}', userId: 'system', // Replace with actual user ID from session data:
    result });
  {{/if}}

  return NextResponse.json(result, { status: 201 }); } catch (error) {
  console.error('{{titleCase name}}
  API error:', error); if (error instanceof z.ZodError) { return
  NextResponse.json( { error: 'Validation failed', details: error.errors }, {
  status: 400 } ); } return NextResponse.json( { error: 'Internal server error'
  }, { status: 500 } ); } }
{{/eq}}

{{#eq method "PUT"}}
  /** *
  {{upperCase method}}
  /api/{{kebabCase name}}
  *
  {{#if patientData}}⚠️ LGPD: Handles patient data - requires consent validation{{/if}}
  */ export async function PUT(request: NextRequest) { try { const supabase =
  createClient(); const body = await request.json(); // Validate input data
  const validatedData =
  {{camelCase name}}Schema.parse(body);

  {{#if patientData}}
    // LGPD compliance validation await validateLGPDCompliance(request, {
    patientId: validatedData.patientId, purpose: '{{name}}
    data update', consentRequired: validatedData.consentRequired });
  {{/if}}

  // Your implementation here const result = { ...validatedData, updatedAt: new
  Date().toISOString() };

  {{#if patientData}}
    // Audit trail for patient data update await auditDataAccess({ patientId:
    validatedData.patientId, action: 'data_update', endpoint: '/api/{{kebabCase
      name
    }}', userId: 'system', // Replace with actual user ID from session data:
    result });
  {{/if}}

  return NextResponse.json(result); } catch (error) { console.error('{{titleCase
    name
  }}
  API error:', error); if (error instanceof z.ZodError) { return
  NextResponse.json( { error: 'Validation failed', details: error.errors }, {
  status: 400 } ); } return NextResponse.json( { error: 'Internal server error'
  }, { status: 500 } ); } }
{{/eq}}

{{#eq method "DELETE"}}
  /** *
  {{upperCase method}}
  /api/{{kebabCase name}}
  *
  {{#if patientData}}⚠️ LGPD: Handles patient data deletion - requires special
    consent{{/if}}
  */ export async function DELETE(request: NextRequest) { try { const supabase =
  createClient(); const { searchParams } = new URL(request.url);

  {{#if patientData}}
    // LGPD compliance validation for data deletion const patientId =
    searchParams.get('patientId'); if (patientId) { await
    validateLGPDCompliance(request, { patientId, purpose: '{{name}}
    data deletion', consentRequired: true }); }
  {{/if}}

  // Your implementation here const result = { message: 'Data deleted
  successfully', deletedAt: new Date().toISOString() };

  {{#if patientData}}
    // Audit trail for patient data deletion if (patientId) { await
    auditDataAccess({ patientId, action: 'data_delete', endpoint: '/api/{{kebabCase
      name
    }}', userId: 'system' // Replace with actual user ID from session }); }
  {{/if}}

  return NextResponse.json(result); } catch (error) { console.error('{{titleCase
    name
  }}
  API error:', error); return NextResponse.json( { error: 'Internal server
  error' }, { status: 500 } ); } }
{{/eq}}