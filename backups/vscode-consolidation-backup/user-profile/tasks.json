{
  "version": "2.0.0",
  "options": {
    "env": {
      "VIBECODE_SYSTEM": "VIBECODE V6.0 - Global Task Orchestrator",
      "INSTRUCTIONS_AUTOMATION": "enabled"
    }
  },
  "presentation": {
    "echo": true,
    "reveal": "always",
    "focus": false,
    "panel": "shared",
    "showReuseMessage": true,
    "clear": false
  },
  "tasks": [
    // ==============================================
    // üéØ QUALITY & FORMATTING TASKS (KISS Principle)
    // ==============================================
    {
      "label": "üéØ VIBECODE: Format Code",
      "type": "shell",
      "command": "pnpm",
      "args": ["format"],
      "group": "build",
      "detail": "Format all code using Biome + Ultracite formatter",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": []
    },
    {
      "label": "üîç VIBECODE: Lint Code",
      "type": "shell",
      "command": "pnpm",
      "args": ["lint:biome"],
      "group": "build",
      "detail": "Lint all code using Biome + Ultracite linter",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": []
    },
    {
      "label": "üîß VIBECODE: Auto-fix Issues",
      "type": "shell",
      "command": "pnpm",
      "args": ["check:fix"],
      "group": "build",
      "detail": "Auto-fix all fixable issues using Biome + Ultracite",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": []
    },
    {
      "label": "‚úÖ VIBECODE: Type Check",
      "type": "shell",
      "command": "pnpm",
      "args": ["type-check"],
      "group": "build",
      "detail": "Run TypeScript type checking across all packages",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": ["$tsc"]
    },

    // ==============================================
    // üß™ TESTING TASKS (Vitest + Playwright Stack)
    // ==============================================
    {
      "label": "üß™ VITEST: Run Unit Tests",
      "type": "shell",
      "command": "pnpm",
      "args": ["test:unit"],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "detail": "Run all unit tests using Vitest",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üé≠ PLAYWRIGHT: Run E2E Tests",
      "type": "shell",
      "command": "pnpm",
      "args": ["test:e2e"],
      "group": "test",
      "detail": "Run all E2E tests using Playwright",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üß™ VITEST: Watch Mode",
      "type": "shell",
      "command": "pnpm",
      "args": ["test:unit", "--watch"],
      "group": "test",
      "detail": "Run Vitest in watch mode for continuous testing",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "isBackground": true,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üìä VITEST: Coverage Report",
      "type": "shell",
      "command": "pnpm",
      "args": ["test:unit", "--coverage"],
      "group": "test",
      "detail": "Generate Vitest coverage report",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üé≠ PLAYWRIGHT: UI Mode",
      "type": "shell",
      "command": "pnpm",
      "args": ["exec", "playwright", "test", "--ui"],
      "group": "test",
      "detail": "Run Playwright in UI mode for visual testing",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üé≠ PLAYWRIGHT: Debug Mode",
      "type": "shell",
      "command": "pnpm",
      "args": ["test:debug"],
      "group": "test",
      "detail": "Run Playwright tests in debug mode (step-by-step)",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ==============================================
    // üöÄ BUILD & DEVELOPMENT TASKS
    // ==============================================
    {
      "label": "üöÄ DEV: Start Development Server",
      "type": "shell",
      "command": "pnpm",
      "args": ["dev"],
      "group": "build",
      "detail": "Start development server using Turborepo",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "isBackground": true,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": {
        "pattern": {
          "regexp": "."
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": "- Local:",
          "endsPattern": "Ready in"
        }
      }
    },
    {
      "label": "üèóÔ∏è BUILD: Production Build",
      "type": "shell",
      "command": "pnpm",
      "args": ["build"],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "detail": "Build all packages for production using Turborepo",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": ["$tsc", "$biome"]
    },
    {
      "label": "üßπ CLEAN: Clean All",
      "type": "shell",
      "command": "pnpm",
      "args": ["clean"],
      "group": "build",
      "detail": "Clean all build artifacts and caches",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ==============================================
    // üè• HEALTHCARE COMPLIANCE TASKS (YAGNI - Only Essential)
    // ==============================================
    {
      "label": "üè• COMPLIANCE: LGPD Check",
      "type": "shell",
      "command": "pnpm",
      "args": ["compliance:lgpd"],
      "group": "test",
      "detail": "Run LGPD compliance validation",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üè• COMPLIANCE: ANVISA Check",
      "type": "shell",
      "command": "pnpm",
      "args": ["compliance:anvisa"],
      "group": "test",
      "detail": "Run ANVISA compliance validation",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üõ°Ô∏è SECURITY: Security Audit",
      "type": "shell",
      "command": "pnpm",
      "args": ["security:audit"],
      "group": "test",
      "detail": "Run comprehensive security audit",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ==============================================
    // üèÜ COMPREHENSIVE VALIDATION WORKFLOWS (CoT Reasoning)
    // ==============================================
    {
      "label": "üèÜ VIBECODE: Complete Quality Validation",
      "dependsOrder": "sequence",
      "dependsOn": [
        "üéØ VIBECODE: Format Code",
        "üîç VIBECODE: Lint Code", 
        "üîß VIBECODE: Auto-fix Issues",
        "‚úÖ VIBECODE: Type Check",
        "üß™ VITEST: Run Unit Tests"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "detail": "Complete quality validation pipeline - format, lint, fix, type check, and test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üöÄ VIBECODE: Full Test Suite",
      "dependsOrder": "parallel",
      "dependsOn": [
        "üß™ VITEST: Run Unit Tests",
        "üé≠ PLAYWRIGHT: Run E2E Tests"
      ],
      "group": "test",
      "detail": "Run complete test suite (Unit + E2E)",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üè• VIBECODE: Healthcare Validation",
      "dependsOrder": "sequence",
      "dependsOn": [
        "üèÜ VIBECODE: Complete Quality Validation",
        "üè• COMPLIANCE: LGPD Check",
        "üè• COMPLIANCE: ANVISA Check",
        "üõ°Ô∏è SECURITY: Security Audit"
      ],
      "group": "test",
      "detail": "Complete healthcare compliance validation",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ==============================================
    // üîß MAINTENANCE & UTILITY TASKS (Essential Only)
    // ==============================================
    {
      "label": "üì¶ PNPM: Install Dependencies",
      "type": "shell",
      "command": "pnpm",
      "args": ["install"],
      "group": "build",
      "detail": "Install all project dependencies using PNPM",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üì¶ PNPM: Update Dependencies",
      "type": "shell",
      "command": "pnpm",
      "args": ["update", "--latest"],
      "group": "build",
      "detail": "Update all dependencies to latest versions",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üßπ PNPM: Prune & Clean",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "Write-Host 'üßπ Cleaning PNPM store and removing unused dependencies...' -ForegroundColor Yellow; pnpm store prune; pnpm prune; Write-Host '‚úÖ PNPM cleanup completed!' -ForegroundColor Green"
      ],
      "group": "build",
      "detail": "Clean PNPM store and remove unused dependencies",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ==============================================
    // üìä REPORTING & DIAGNOSTICS (Optimized)
    // ==============================================
    {
      "label": "üìä REPORT: Generate Quality Report",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "$timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'; Write-Host ''; Write-Host 'üèÜ NEONPRO QUALITY VALIDATION COMPLETE' -ForegroundColor Green; Write-Host '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' -ForegroundColor Green; Write-Host ''; Write-Host '‚úÖ Formatting (Biome + Ultracite): All code formatted consistently' -ForegroundColor Cyan; Write-Host '‚úÖ Linting (Biome + Ultracite): No linting errors detected' -ForegroundColor Cyan; Write-Host '‚úÖ Unit Tests (Vitest): All tests passing' -ForegroundColor Cyan; Write-Host '‚úÖ E2E Tests (Playwright): Healthcare workflows validated' -ForegroundColor Cyan; Write-Host '‚úÖ Type Checking (TypeScript): No type errors' -ForegroundColor Cyan; Write-Host ''; Write-Host \"‚è∞ Validation completed at: $timestamp\" -ForegroundColor Yellow; Write-Host ''; Write-Host 'üè• Healthcare compliance: LGPD + ANVISA + CFM ready!' -ForegroundColor Green; Write-Host 'üöÄ Ready for production deployment!' -ForegroundColor Green; Write-Host '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' -ForegroundColor Green; Write-Host ''"
      ],
      "group": "build",
      "detail": "Generate comprehensive quality validation report",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": false
      },
      "problemMatcher": []
    },
    {
      "label": "üîç DIAGNOSTIC: Project Health Check",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "Write-Host 'üîç Running NeonPro Project Health Check...' -ForegroundColor Yellow; Write-Host ''; Write-Host 'üì¶ Package Manager:' -ForegroundColor Cyan; if (Test-Path 'pnpm-lock.yaml') { Write-Host '  ‚úÖ PNPM (pnpm-lock.yaml found)' -ForegroundColor Green } else { Write-Host '  ‚ùå PNPM lock file missing' -ForegroundColor Red }; if (Test-Path 'package-lock.json') { Write-Host '  ‚ö†Ô∏è NPM lock file detected (should be removed)' -ForegroundColor Yellow } else { Write-Host '  ‚úÖ No conflicting NPM lock files' -ForegroundColor Green }; Write-Host ''; Write-Host 'üß™ Testing Stack:' -ForegroundColor Cyan; if (Test-Path 'vitest.config.ts') { Write-Host '  ‚úÖ Vitest configured' -ForegroundColor Green } else { Write-Host '  ‚ùå Vitest config missing' -ForegroundColor Red }; if (Test-Path 'playwright.config.ts') { Write-Host '  ‚úÖ Playwright configured' -ForegroundColor Green } else { Write-Host '  ‚ùå Playwright config missing' -ForegroundColor Red }; Write-Host ''; Write-Host 'üéØ Code Quality:' -ForegroundColor Cyan; if (Test-Path 'biome.jsonc') { Write-Host '  ‚úÖ Biome + Ultracite configured' -ForegroundColor Green } else { Write-Host '  ‚ùå Biome config missing' -ForegroundColor Red }; Write-Host ''; Write-Host 'üìä Health check completed!' -ForegroundColor Green"
      ],
      "group": "test",
      "detail": "Comprehensive project health and configuration check",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "ü§ñ COPILOT: Reload Chatmodes",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "Write-Host 'ü§ñ Reloading GitHub Copilot Chatmodes...' -ForegroundColor Yellow; Write-Host ''; Write-Host 'üìÅ Checking chatmodes directory:' -ForegroundColor Cyan; if (Test-Path '.github/chatmodes') { Write-Host '  ‚úÖ .github/chatmodes directory found' -ForegroundColor Green; $chatmodes = Get-ChildItem '.github/chatmodes/*.chatmode.md' | Measure-Object; Write-Host \"  üìù Found $($chatmodes.Count) chatmode files\" -ForegroundColor Green; Get-ChildItem '.github/chatmodes/*.chatmode.md' | ForEach-Object { Write-Host \"    - $($_.Name)\" -ForegroundColor White } } else { Write-Host '  ‚ùå .github/chatmodes directory not found' -ForegroundColor Red }; Write-Host ''; Write-Host '‚öôÔ∏è Copilot Configuration:' -ForegroundColor Cyan; Write-Host '  ‚úÖ Instruction files enabled in workspace' -ForegroundColor Green; Write-Host '  ‚úÖ Chatmode file association configured' -ForegroundColor Green; Write-Host ''; Write-Host 'üîÑ Recommendation: Reload VS Code window to refresh chatmode detection' -ForegroundColor Yellow; Write-Host '   Use Ctrl+Shift+P -> \"Developer: Reload Window\"' -ForegroundColor White; Write-Host ''; Write-Host '‚úÖ Chatmode reload check completed!' -ForegroundColor Green"
      ],
      "group": "build",
      "detail": "Check and reload GitHub Copilot chatmodes configuration",
      "options": {
        "cwd": "${input:workspaceSelection}"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "contextInput",
      "description": "Digite o contexto do seu trabalho (ex: security auth, nextjs react)",
      "default": "nextjs typescript healthcare",
      "type": "promptString"
    },
    {
      "id": "instructionMode",
      "description": "Escolha o modo de instru√ß√µes",
      "type": "pickString",
      "options": [
        {
          "label": "üéØ Base Only (3 instru√ß√µes)",
          "value": "base"
        },
        {
          "label": "üîí Security Context (4 instru√ß√µes)",
          "value": "security"
        },
        {
          "label": "üîß Tech Standards (4 instru√ß√µes)",
          "value": "tech"
        },
        {
          "label": "üöÄ Complete Context (5 instru√ß√µes)",
          "value": "complete"
        }
      ],
      "default": "complete"
    },
    {
      "id": "workspaceSelection",
      "description": "Selecione o workspace para opera√ß√£o",
      "type": "pickString",
      "options": [
        {
          "label": "üè• NeonPro Healthcare (D:\\neonpro)",
          "value": "D:\\neonpro"
        },
        {
          "label": "üé≠ Playwright Testing (D:\\neonpro\\tools\\testing)",
          "value": "D:\\neonpro\\tools\\testing"
        },
        {
          "label": "üéØ Current Workspace (${workspaceFolder})",
          "value": "${workspaceFolder}"
        }
      ],
      "default": "D:\\neonpro"
    }
  ]
}