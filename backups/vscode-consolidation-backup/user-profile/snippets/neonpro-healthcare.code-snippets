{
  // ==============================================
  // 🏥 NEONPRO HEALTHCARE COMPLIANCE SNIPPETS
  // ==============================================
  
  "Healthcare Test Suite": {
    "prefix": "test-healthcare",
    "body": [
      "import { describe, it, expect, vi, beforeEach } from 'vitest'",
      "import { renderWithHealthcareProvider, healthcareTestData } from '@/test/utils/healthcare-test-utils'",
      "",
      "describe('${1:Component/Function} - Healthcare Compliance', () => {",
      "  beforeEach(() => {",
      "    vi.clearAllMocks()",
      "  })",
      "",
      "  describe('LGPD Compliance', () => {",
      "    it('should require patient consent before processing data', async () => {",
      "      // Test LGPD compliance",
      "      ${2:// Add your test implementation}",
      "    })",
      "  })",
      "",
      "  describe('ANVISA Compliance', () => {",
      "    it('should validate medical procedure authorization', async () => {",
      "      // Test ANVISA compliance",
      "      ${3:// Add your test implementation}",
      "    })",
      "  })",
      "",
      "  describe('CFM Requirements', () => {",
      "    it('should verify medical professional credentials', async () => {",
      "      // Test CFM compliance",
      "      ${4:// Add your test implementation}",
      "    })",
      "  })",
      "})"
    ],
    "description": "Create a comprehensive healthcare compliance test suite"
  },

  "Patient Data Validation": {
    "prefix": "validate-patient",
    "body": [
      "const validatePatientData = (patientData: PatientData): ValidationResult => {",
      "  const errors: string[] = []",
      "",
      "  // CPF validation",
      "  if (!validateCPF(patientData.cpf)) {",
      "    errors.push('Invalid CPF format')",
      "  }",
      "",
      "  // LGPD consent validation", 
      "  if (!patientData.lgpdConsent?.granted) {",
      "    errors.push('LGPD consent is required')",
      "  }",
      "",
      "  // Required fields validation",
      "  if (!patientData.name?.trim()) {",
      "    errors.push('Patient name is required')",
      "  }",
      "",
      "  if (!patientData.email?.trim()) {",
      "    errors.push('Patient email is required')",
      "  }",
      "",
      "  return {",
      "    isValid: errors.length === 0,",
      "    errors,",
      "    patientData: errors.length === 0 ? patientData : null",
      "  }",
      "}"
    ],
    "description": "Create patient data validation function with LGPD compliance"
  },

  "Medical Record Component": {
    "prefix": "comp-medical-record",
    "body": [
      "interface ${1:MedicalRecord}Props {",
      "  patientId: string",
      "  doctorId: string",
      "  treatmentType: string",
      "  onSave?: (record: MedicalRecord) => void",
      "  onCancel?: () => void",
      "}",
      "",
      "export function ${1:MedicalRecord}({",
      "  patientId,",
      "  doctorId,",
      "  treatmentType,",
      "  onSave,",
      "  onCancel",
      "}: ${1:MedicalRecord}Props) {",
      "  const [recordData, setRecordData] = useState<Partial<MedicalRecord>>({})",
      "",
      "  const handleSave = async () => {",
      "    // Validate medical record data",
      "    // Ensure ANVISA compliance for procedures",
      "    // Record audit trail for LGPD compliance",
      "    // Apply digital signature for CFM compliance",
      "    ",
      "    ${2:// Implementation here}",
      "  }",
      "",
      "  return (",
      "    <div className=\"medical-record-form\">",
      "      {/* Medical record form implementation */}",
      "      ${3:// Add your JSX here}",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a medical record component with healthcare compliance"
  },

  "LGPD Consent Hook": {
    "prefix": "hook-lgpd",
    "body": [
      "export function useLGPDConsent(patientId: string) {",
      "  const [consent, setConsent] = useState<LGPDConsent | null>(null)",
      "  const [loading, setLoading] = useState(false)",
      "",
      "  const recordConsent = async (purposes: string[]) => {",
      "    setLoading(true)",
      "    try {",
      "      const consentRecord = await supabase",
      "        .from('lgpd_consents')",
      "        .insert({",
      "          patient_id: patientId,",
      "          purposes,",
      "          granted_at: new Date().toISOString(),",
      "          ip_address: await getClientIP(),",
      "          user_agent: navigator.userAgent",
      "        })",
      "        .select()",
      "        .single()",
      "",
      "      setConsent(consentRecord.data)",
      "      return consentRecord.data",
      "    } catch (error) {",
      "      console.error('Error recording LGPD consent:', error)",
      "      throw error",
      "    } finally {",
      "      setLoading(false)",
      "    }",
      "  }",
      "",
      "  const withdrawConsent = async (consentId: string) => {",
      "    // Implementation for consent withdrawal",
      "    ${1:// Add withdrawal logic}",
      "  }",
      "",
      "  return {",
      "    consent,",
      "    loading,",
      "    recordConsent,",
      "    withdrawConsent,",
      "  }",
      "}"
    ],
    "description": "Create LGPD consent management hook"
  },

  "ANVISA Compliance Check": {
    "prefix": "anvisa-check",
    "body": [
      "const validateANVISACompliance = async (productOrProcedure: {",
      "  type: 'product' | 'procedure'",
      "  code: string",
      "  name: string",
      "}) => {",
      "  try {",
      "    // Check ANVISA registration database",
      "    const response = await fetch('/api/anvisa/validate', {",
      "      method: 'POST',",
      "      headers: { 'Content-Type': 'application/json' },",
      "      body: JSON.stringify(productOrProcedure)",
      "    })",
      "",
      "    const validation = await response.json()",
      "",
      "    if (!validation.isValid) {",
      "      throw new Error(`ANVISA validation failed: ${validation.reason}`)",
      "    }",
      "",
      "    // Log compliance check for audit",
      "    await auditLogger.log({",
      "      action: 'anvisa_compliance_check',",
      "      resource: productOrProcedure.code,",
      "      result: 'valid',",
      "      timestamp: new Date().toISOString()",
      "    })",
      "",
      "    return validation",
      "  } catch (error) {",
      "    console.error('ANVISA compliance check failed:', error)",
      "    throw error",
      "  }",
      "}"
    ],
    "description": "Create ANVISA compliance validation function"
  },

  "CFM Digital Signature": {
    "prefix": "cfm-signature",
    "body": [
      "const applyDigitalSignature = async (document: MedicalDocument, doctorId: string) => {",
      "  try {",
      "    // Validate doctor's CFM credentials",
      "    const doctor = await validateCFMCredentials(doctorId)",
      "    if (!doctor.isValid) {",
      "      throw new Error('Invalid CFM credentials')",
      "    }",
      "",
      "    // Generate digital signature",
      "    const signature = await crypto.subtle.sign(",
      "      'RSASSA-PKCS1-v1_5',",
      "      doctor.privateKey,",
      "      new TextEncoder().encode(JSON.stringify(document))",
      "    )",
      "",
      "    // Create signature record",
      "    const signatureRecord = {",
      "      documentId: document.id,",
      "      doctorId,",
      "      crmNumber: doctor.crmNumber,",
      "      signature: Array.from(new Uint8Array(signature)),",
      "      timestamp: new Date().toISOString(),",
      "      algorithm: 'RSASSA-PKCS1-v1_5'",
      "    }",
      "",
      "    // Store signature in database",
      "    await supabase",
      "      .from('digital_signatures')",
      "      .insert(signatureRecord)",
      "",
      "    return signatureRecord",
      "  } catch (error) {",
      "    console.error('Digital signature failed:', error)",
      "    throw error",
      "  }",
      "}"
    ],
    "description": "Create CFM digital signature function"
  },

  "Healthcare API Route": {
    "prefix": "api-healthcare",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server'",
      "import { createClient } from '@/lib/supabase/server'",
      "import { validateHealthcareAccess } from '@/lib/auth/healthcare'",
      "",
      "export async function ${1:GET}(request: NextRequest) {",
      "  try {",
      "    // Validate authentication and healthcare access",
      "    const user = await validateHealthcareAccess(request)",
      "    if (!user) {",
      "      return NextResponse.json(",
      "        { error: 'Unauthorized access to healthcare data' },",
      "        { status: 401 }",
      "      )",
      "    }",
      "",
      "    // Create Supabase client with RLS",
      "    const supabase = createClient()",
      "",
      "    // Healthcare operation with audit logging",
      "    ${2:// Your healthcare API logic here}",
      "",
      "    // Log access for LGPD compliance",
      "    await auditLogger.logAccess({",
      "      userId: user.id,",
      "      action: '${3:api_access}',",
      "      resource: '${4:resource_name}',",
      "      ip: request.headers.get('x-forwarded-for') || 'unknown',",
      "      userAgent: request.headers.get('user-agent') || 'unknown'",
      "    })",
      "",
      "    return NextResponse.json({ success: true, data: ${5:result} })",
      "  } catch (error) {",
      "    console.error('Healthcare API error:', error)",
      "    return NextResponse.json(",
      "      { error: 'Internal server error' },",
      "      { status: 500 }",
      "    )",
      "  }",
      "}"
    ],
    "description": "Create healthcare-compliant API route"
  }
}