{
	// ================================
	// üè• HEALTHCARE COMPLIANCE SNIPPETS
	// ================================
	"LGPD Compliant Component": {
		"scope": "typescriptreact",
		"prefix": ["lgpd", "lgpd-component"],
		"description": "LGPD-compliant React component with data protection and audit logging",
		"body": [
			"import { type FC, type ReactNode, useCallback } from 'react';",
			"import { useLGPDAudit } from '@neonpro/compliance';",
			"",
			"interface ${1:ComponentName}Props {",
			"\tchildren?: ReactNode;",
			"\tpatientData?: {",
			"\t\tid: string;",
			"\t\tname: string;",
			"\t\t// No CPF, medical records, or sensitive data in props",
			"\t};",
			"\tonDataAccess?: (auditLog: LGPDAuditLog) => void;",
			"\t$2",
			"}",
			"",
			"/**",
			" * ${1:ComponentName} - LGPD Article 7 compliant component",
			" * Implements data minimization and purpose limitation principles",
			" * @param props - Component props with LGPD compliance",
			" */",
			"export const ${1:ComponentName}: FC<${1:ComponentName}Props> = ({",
			"\tchildren,",
			"\tpatientData,",
			"\tonDataAccess,",
			"\t$3",
			"}) => {",
			"\tconst { logDataAccess, logDataProcessing } = useLGPDAudit();",
			"",
			"\t// LGPD Article 6: Data processing lawful basis",
			"\tconst handleDataAccess = useCallback(async () => {",
			"\t\tif (patientData) {",
			"\t\t\t// Log data access for LGPD compliance",
			"\t\t\tconst auditLog = await logDataAccess({",
			"\t\t\t\tdataSubject: patientData.id,",
			"\t\t\t\tpurpose: '${4:healthcare_consultation}',",
			"\t\t\t\tlegalBasis: 'vital_interests', // LGPD Article 7, II",
			"\t\t\t\tprocessor: 'neonpro_system',",
			"\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t});",
			"",
			"\t\t\tonDataAccess?.(auditLog);",
			"\t\t}",
			"\t}, [patientData, onDataAccess, logDataAccess]);",
			"",
			"\treturn (",
			"\t\t<div",
			"\t\t\trole=\"region\"",
			"\t\t\taria-label=\"${5:Dados protegidos por LGPD}\"",
			"\t\t\tdata-compliance=\"lgpd\"",
			"\t\t\tdata-purpose=\"${4:healthcare_consultation}\"",
			"\t\t>",
			"\t\t\t{/* LGPD Notice */}",
			"\t\t\t<div className=\"lgpd-notice\" role=\"note\">",
			"\t\t\t\t<small>",
			"\t\t\t\t\tüîí Dados protegidos pela LGPD - Lei 13.709/2018",
			"\t\t\t\t</small>",
			"\t\t\t</div>",
			"",
			"\t\t\t{children}",
			"\t\t\t$0",
			"\t\t</div>",
			"\t);",
			"};",
			"",
			"${1:ComponentName}.displayName = '${1:ComponentName}';"
		]
	},

	"ANVISA Compliant Form": {
		"scope": "typescriptreact",
		"prefix": ["anvisa", "anvisa-form"],
		"description": "ANVISA-compliant medical form with regulatory validation and audit trails",
		"body": [
			"import { type FC, type FormEvent } from 'react';",
			"import { useForm } from 'react-hook-form';",
			"import { zodResolver } from '@hookform/resolvers/zod';",
			"import { z } from 'zod';",
			"import { useANVISAAudit } from '@neonpro/compliance';",
			"",
			"// ANVISA RDC 44/2009 - Medical record validation",
			"const ${1:medicalFormSchema} = z.object({",
			"\tpatientId: z.string().min(1, 'ID do paciente obrigat√≥rio'),",
			"\tprocedureCode: z.string().regex(/^[A-Z0-9]{5,10}$/, 'C√≥digo ANVISA inv√°lido'),",
			"\tmedicalRecord: z.string().min(10, 'Prontu√°rio m√©dico obrigat√≥rio'),",
			"\tphysicianCRM: z.string().regex(/^[0-9]{4,6}\/[A-Z]{2}$/, 'CRM inv√°lido'),",
			"\tobservations: z.string().max(1000, 'M√°ximo 1000 caracteres'),",
			"\t$2",
			"});",
			"",
			"type ${3:MedicalFormData} = z.infer<typeof ${1:medicalFormSchema}>;",
			"",
			"interface ${4:ANVISAForm}Props {",
			"\tonSubmit: (data: ${3:MedicalFormData}) => Promise<void>;",
			"\tinitialData?: Partial<${3:MedicalFormData}>;",
			"\treadOnly?: boolean;",
			"}",
			"",
			"/**",
			" * ${4:ANVISAForm} - RDC 44/2009 compliant medical form",
			" * Implements ANVISA regulations for medical records",
			" * @param props - Form props with ANVISA compliance",
			" */",
			"export const ${4:ANVISAForm}: FC<${4:ANVISAForm}Props> = ({",
			"\tonSubmit,",
			"\tinitialData,",
			"\treadOnly = false,",
			"}) => {",
			"\tconst { logMedicalRecord, validateCompliance } = useANVISAAudit();",
			"",
			"\tconst {",
			"\t\tregister,",
			"\t\thandleSubmit,",
			"\t\tformState: { errors, isSubmitting },",
			"\t\twatch,",
			"\t} = useForm<${3:MedicalFormData}>({",
			"\t\tresolver: zodResolver(${1:medicalFormSchema}),",
			"\t\tdefaultValues: initialData,",
			"\t});",
			"",
			"\t// ANVISA compliance validation",
			"\tconst handleFormSubmit = async (data: ${3:MedicalFormData}) => {",
			"\t\ttry {",
			"\t\t\t// Validate ANVISA compliance before submission",
			"\t\t\tconst complianceCheck = await validateCompliance(data);",
			"\t\t\t",
			"\t\t\tif (!complianceCheck.isCompliant) {",
			"\t\t\t\tthrow new Error(`ANVISA Compliance Error: ${complianceCheck.violations.join(', ')}`);",
			"\t\t\t}",
			"",
			"\t\t\t// Log medical record access for audit",
			"\t\t\tawait logMedicalRecord({",
			"\t\t\t\tpatientId: data.patientId,",
			"\t\t\t\tphysicianCRM: data.physicianCRM,",
			"\t\t\t\taction: 'create_record',",
			"\t\t\t\tregulatoryBasis: 'RDC_44_2009',",
			"\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t});",
			"",
			"\t\t\tawait onSubmit(data);",
			"\t\t} catch (error) {",
			"\t\t\tconsole.error('ANVISA Form Error:', error);",
			"\t\t\t// Show user-friendly error without sensitive data",
			"\t\t\talert('Erro de conformidade ANVISA. Verifique os dados inseridos.');",
			"\t\t}",
			"\t};",
			"",
			"\treturn (",
			"\t\t<form",
			"\t\t\tonSubmit={handleSubmit(handleFormSubmit)}",
			"\t\t\tnoValidate",
			"\t\t\tdata-compliance=\"anvisa-rdc-44\"",
			"\t\t\taria-label=\"Formul√°rio m√©dico ANVISA\"",
			"\t\t>",
			"\t\t\t<fieldset disabled={readOnly || isSubmitting}>",
			"\t\t\t\t<legend>Dados M√©dicos - ANVISA RDC 44/2009</legend>",
			"",
			"\t\t\t\t{/* Patient ID Field */}",
			"\t\t\t\t<div className=\"medical-field\">",
			"\t\t\t\t\t<label htmlFor=\"patientId\" className=\"medical-label\">",
			"\t\t\t\t\t\tID do Paciente <span aria-hidden=\"true\">*</span>",
			"\t\t\t\t\t</label>",
			"\t\t\t\t\t<input",
			"\t\t\t\t\t\tid=\"patientId\"",
			"\t\t\t\t\t\ttype=\"text\"",
			"\t\t\t\t\t\t{...register('patientId')}",
			"\t\t\t\t\t\taria-invalid={errors.patientId ? 'true' : 'false'}",
			"\t\t\t\t\t\taria-describedby=\"patientId-error\"",
			"\t\t\t\t\t\treadOnly={readOnly}",
			"\t\t\t\t\t\trequired",
			"\t\t\t\t\t/>",
			"\t\t\t\t\t{errors.patientId && (",
			"\t\t\t\t\t\t<div id=\"patientId-error\" role=\"alert\" className=\"field-error\">",
			"\t\t\t\t\t\t\t{errors.patientId.message}",
			"\t\t\t\t\t\t</div>",
			"\t\t\t\t\t)}",
			"\t\t\t\t</div>",
			"",
			"\t\t\t\t{/* Procedure Code Field */}",
			"\t\t\t\t<div className=\"medical-field\">",
			"\t\t\t\t\t<label htmlFor=\"procedureCode\" className=\"medical-label\">",
			"\t\t\t\t\t\tC√≥digo do Procedimento ANVISA <span aria-hidden=\"true\">*</span>",
			"\t\t\t\t\t</label>",
			"\t\t\t\t\t<input",
			"\t\t\t\t\t\tid=\"procedureCode\"",
			"\t\t\t\t\t\ttype=\"text\"",
			"\t\t\t\t\t\t{...register('procedureCode')}",
			"\t\t\t\t\t\taria-invalid={errors.procedureCode ? 'true' : 'false'}",
			"\t\t\t\t\t\taria-describedby=\"procedureCode-error\"",
			"\t\t\t\t\t\tplaceholder=\"Ex: ABC123\"",
			"\t\t\t\t\t\treadOnly={readOnly}",
			"\t\t\t\t\t\trequired",
			"\t\t\t\t\t/>",
			"\t\t\t\t\t{errors.procedureCode && (",
			"\t\t\t\t\t\t<div id=\"procedureCode-error\" role=\"alert\" className=\"field-error\">",
			"\t\t\t\t\t\t\t{errors.procedureCode.message}",
			"\t\t\t\t\t\t</div>",
			"\t\t\t\t\t)}",
			"\t\t\t\t</div>",
			"",
			"\t\t\t\t{/* Physician CRM Field */}",
			"\t\t\t\t<div className=\"medical-field\">",
			"\t\t\t\t\t<label htmlFor=\"physicianCRM\" className=\"medical-label\">",
			"\t\t\t\t\t\tCRM do M√©dico <span aria-hidden=\"true\">*</span>",
			"\t\t\t\t\t</label>",
			"\t\t\t\t\t<input",
			"\t\t\t\t\t\tid=\"physicianCRM\"",
			"\t\t\t\t\t\ttype=\"text\"",
			"\t\t\t\t\t\t{...register('physicianCRM')}",
			"\t\t\t\t\t\taria-invalid={errors.physicianCRM ? 'true' : 'false'}",
			"\t\t\t\t\t\taria-describedby=\"physicianCRM-error\"",
			"\t\t\t\t\t\tplaceholder=\"Ex: 123456/SP\"",
			"\t\t\t\t\t\treadOnly={readOnly}",
			"\t\t\t\t\t\trequired",
			"\t\t\t\t\t/>",
			"\t\t\t\t\t{errors.physicianCRM && (",
			"\t\t\t\t\t\t<div id=\"physicianCRM-error\" role=\"alert\" className=\"field-error\">",
			"\t\t\t\t\t\t\t{errors.physicianCRM.message}",
			"\t\t\t\t\t\t</div>",
			"\t\t\t\t\t)}",
			"\t\t\t\t</div>",
			"",
			"\t\t\t\t{/* Submit Button */}",
			"\t\t\t\t<button",
			"\t\t\t\t\ttype=\"submit\"",
			"\t\t\t\t\tdisabled={readOnly || isSubmitting}",
			"\t\t\t\t\taria-label=\"Salvar registro m√©dico\"",
			"\t\t\t\t\tclassName=\"medical-submit\"",
			"\t\t\t\t>",
			"\t\t\t\t\t{isSubmitting ? 'Salvando...' : 'Salvar Registro'}",
			"\t\t\t\t</button>",
			"\t\t\t</fieldset>",
			"",
			"\t\t\t{/* ANVISA Compliance Notice */}",
			"\t\t\t<div className=\"compliance-notice\" role=\"note\">",
			"\t\t\t\t<small>",
			"\t\t\t\t\tüìã Formul√°rio em conformidade com ANVISA RDC 44/2009",
			"\t\t\t\t\t<br />",
			"\t\t\t\t\tTodos os dados s√£o auditados conforme regulamenta√ß√£o.",
			"\t\t\t\t</small>",
			"\t\t\t</div>",
			"\t\t</form>",
			"\t);",
			"};"
		]
	},

	"CFM Standards Component": {
		"scope": "typescriptreact",
		"prefix": ["cfm", "cfm-component"],
		"description": "CFM (Conselho Federal de Medicina) compliant component with medical ethics standards",
		"body": [
			"import { type FC, useState, useCallback } from 'react';",
			"import { useCFMCompliance } from '@neonpro/compliance';",
			"",
			"interface ${1:CFMComponent}Props {",
			"\tmedicalData: {",
			"\t\tphysicianCRM: string;",
			"\t\tpatientConsent: boolean;",
			"\t\tprocedureType: 'consultation' | 'procedure' | 'diagnosis';",
			"\t};",
			"\tonEthicsViolation?: (violation: CFMEthicsViolation) => void;",
			"\t$2",
			"}",
			"",
			"/**",
			" * ${1:CFMComponent} - CFM Resolution compliance component",
			" * Implements Brazilian medical ethics standards and professional conduct",
			" * @param props - Component props with CFM compliance",
			" */",
			"export const ${1:CFMComponent}: FC<${1:CFMComponent}Props> = ({",
			"\tmedicalData,",
			"\tonEthicsViolation,",
			"\t$3",
			"}) => {",
			"\tconst { validateMedicalEthics, logProfessionalConduct } = useCFMCompliance();",
			"\tconst [ethicsValidated, setEthicsValidated] = useState(false);",
			"",
			"\t// CFM Resolution 1.974/2011 - Medical ethics validation",
			"\tconst handleEthicsValidation = useCallback(async () => {",
			"\t\ttry {",
			"\t\t\tconst ethicsCheck = await validateMedicalEthics({",
			"\t\t\t\tphysicianCRM: medicalData.physicianCRM,",
			"\t\t\t\tpatientConsent: medicalData.patientConsent,",
			"\t\t\t\tprocedureType: medicalData.procedureType,",
			"\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t});",
			"",
			"\t\t\tif (!ethicsCheck.isCompliant) {",
			"\t\t\t\t// Log ethics violation for CFM review",
			"\t\t\t\tconst violation: CFMEthicsViolation = {",
			"\t\t\t\t\ttype: 'consent_violation',",
			"\t\t\t\t\tresolution: 'CFM_1974_2011',",
			"\t\t\t\t\tdescription: ethicsCheck.violations.join('; '),",
			"\t\t\t\t\tseverity: 'high',",
			"\t\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t\t};",
			"",
			"\t\t\t\tonEthicsViolation?.(violation);",
			"\t\t\t\treturn;",
			"\t\t\t}",
			"",
			"\t\t\t// Log professional conduct for audit",
			"\t\t\tawait logProfessionalConduct({",
			"\t\t\t\tphysicianCRM: medicalData.physicianCRM,",
			"\t\t\t\taction: 'ethics_validation_passed',",
			"\t\t\t\tresolution: 'CFM_1974_2011',",
			"\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t});",
			"",
			"\t\t\tsetEthicsValidated(true);",
			"\t\t} catch (error) {",
			"\t\t\tconsole.error('CFM Ethics Validation Error:', error);",
			"\t\t}",
			"\t}, [medicalData, validateMedicalEthics, logProfessionalConduct, onEthicsViolation]);",
			"",
			"\t// CFM Resolution 2.314/2022 - Patient consent requirements",
			"\tconst handlePatientConsent = useCallback(() => {",
			"\t\tif (!medicalData.patientConsent) {",
			"\t\t\talert('Consentimento do paciente obrigat√≥rio conforme Resolu√ß√£o CFM 2.314/2022');",
			"\t\t\treturn false;",
			"\t\t}",
			"\t\treturn true;",
			"\t}, [medicalData.patientConsent]);",
			"",
			"\treturn (",
			"\t\t<div",
			"\t\t\trole=\"region\"",
			"\t\t\taria-label=\"√Årea m√©dica regulamentada pelo CFM\"",
			"\t\t\tdata-compliance=\"cfm\"",
			"\t\t\tdata-resolution=\"CFM-1974-2011\"",
			"\t\t>",
			"\t\t\t{/* CFM Ethics Header */}",
			"\t\t\t<header className=\"cfm-ethics-header\">",
			"\t\t\t\t<h3>√Årea M√©dica Regulamentada</h3>",
			"\t\t\t\t<div className=\"ethics-status\">",
			"\t\t\t\t\t{ethicsValidated ? (",
			"\t\t\t\t\t\t<span className=\"ethics-validated\" role=\"status\">",
			"\t\t\t\t\t\t\t‚úÖ √âtica m√©dica validada",
			"\t\t\t\t\t\t</span>",
			"\t\t\t\t\t) : (",
			"\t\t\t\t\t\t<button",
			"\t\t\t\t\t\t\ttype=\"button\"",
			"\t\t\t\t\t\t\tonClick={handleEthicsValidation}",
			"\t\t\t\t\t\t\taria-label=\"Validar √©tica m√©dica\"",
			"\t\t\t\t\t\t\tclassName=\"validate-ethics-btn\"",
			"\t\t\t\t\t\t>",
			"\t\t\t\t\t\t\tüè• Validar √âtica M√©dica",
			"\t\t\t\t\t\t</button>",
			"\t\t\t\t\t)}",
			"\t\t\t\t</div>",
			"\t\t\t</header>",
			"",
			"\t\t\t{/* Patient Consent Section */}",
			"\t\t\t<section className=\"patient-consent-section\">",
			"\t\t\t\t<h4>Consentimento do Paciente</h4>",
			"\t\t\t\t<div className=\"consent-status\">",
			"\t\t\t\t\t{medicalData.patientConsent ? (",
			"\t\t\t\t\t\t<span className=\"consent-granted\" role=\"status\">",
			"\t\t\t\t\t\t\t‚úÖ Consentimento obtido (CFM 2.314/2022)",
			"\t\t\t\t\t\t</span>",
			"\t\t\t\t\t) : (",
			"\t\t\t\t\t\t<span className=\"consent-required\" role=\"alert\">",
			"\t\t\t\t\t\t\t‚ö†Ô∏è Consentimento obrigat√≥rio",
			"\t\t\t\t\t\t</span>",
			"\t\t\t\t\t)}",
			"\t\t\t\t</div>",
			"\t\t\t</section>",
			"",
			"\t\t\t{/* Medical Procedure Section */}",
			"\t\t\t<section className=\"medical-procedure-section\">",
			"\t\t\t\t<h4>Procedimento M√©dico</h4>",
			"\t\t\t\t<div className=\"procedure-info\">",
			"\t\t\t\t\t<span>Tipo: {medicalData.procedureType}</span>",
			"\t\t\t\t\t<span>CRM: {medicalData.physicianCRM}</span>",
			"\t\t\t\t</div>",
			"\t\t\t</section>",
			"",
			"\t\t\t{/* CFM Compliance Notice */}",
			"\t\t\t<footer className=\"cfm-compliance-footer\">",
			"\t\t\t\t<small>",
			"\t\t\t\t\tüè• Em conformidade com as Resolu√ß√µes CFM 1.974/2011 e 2.314/2022",
			"\t\t\t\t\t<br />",
			"\t\t\t\t\tConselho Federal de Medicina - √âtica e Deontologia M√©dica",
			"\t\t\t\t</small>",
			"\t\t\t</footer>",
			"\t\t\t$0",
			"\t\t</div>",
			"\t);",
			"};",
			"",
			"${1:CFMComponent}.displayName = '${1:CFMComponent}';"
		]
	},

	"Healthcare Biome Rules": {
		"scope": "json,jsonc",
		"prefix": ["health-biome", "hbiome"],
		"description": "Healthcare-specific Biome configuration with compliance and accessibility rules",
		"body": [
			"{",
			"\t\"$schema\": \"https://biomejs.dev/schemas/1.9.4/schema.json\",",
			"\t\"organizeImports\": {",
			"\t\t\"enabled\": true",
			"\t},",
			"\t\"files\": {",
			"\t\t\"include\": [",
			"\t\t\t\"**/*.ts\",",
			"\t\t\t\"**/*.tsx\",",
			"\t\t\t\"**/*.js\",",
			"\t\t\t\"**/*.jsx\"",
			"\t\t],",
			"\t\t\"ignore\": [",
			"\t\t\t\"node_modules/**\",",
			"\t\t\t\"dist/**\",",
			"\t\t\t\".next/**\",",
			"\t\t\t\"coverage/**\",",
			"\t\t\t\"**/sensitive-data/**\"",
			"\t\t]",
			"\t},",
			"\t\"linter\": {",
			"\t\t\"enabled\": true,",
			"\t\t\"rules\": {",
			"\t\t\t\"recommended\": true,",
			"\t\t\t\"a11y\": {",
			"\t\t\t\t\"recommended\": true,",
			"\t\t\t\t\"noAccessKey\": \"error\",",
			"\t\t\t\t\"noAriaHiddenOnFocusable\": \"error\",",
			"\t\t\t\t\"noAutofocus\": \"error\",",
			"\t\t\t\t\"useAltText\": \"error\",",
			"\t\t\t\t\"useAnchorContent\": \"error\",",
			"\t\t\t\t\"useAriaActivedescendantWithTabindex\": \"error\",",
			"\t\t\t\t\"useAriaPropsForRole\": \"error\",",
			"\t\t\t\t\"useValidAriaProps\": \"error\",",
			"\t\t\t\t\"useValidAriaRole\": \"error\",",
			"\t\t\t\t\"useValidAriaValues\": \"error\"",
			"\t\t\t},",
			"\t\t\t\"security\": {",
			"\t\t\t\t\"recommended\": true,",
			"\t\t\t\t\"noDangerouslySetInnerHtml\": \"error\",",
			"\t\t\t\t\"noGlobalObjectCalls\": \"error\"",
			"\t\t\t},",
			"\t\t\t\"performance\": {",
			"\t\t\t\t\"recommended\": true,",
			"\t\t\t\t\"noAccumulatingSpread\": \"error\",",
			"\t\t\t\t\"noDelete\": \"error\"",
			"\t\t\t},",
			"\t\t\t\"style\": {",
			"\t\t\t\t\"recommended\": true,",
			"\t\t\t\t\"noVar\": \"error\",",
			"\t\t\t\t\"useConst\": \"error\",",
			"\t\t\t\t\"useTemplate\": \"error\"",
			"\t\t\t},",
			"\t\t\t\"suspicious\": {",
			"\t\t\t\t\"recommended\": true,",
			"\t\t\t\t\"noExplicitAny\": \"error\",",
			"\t\t\t\t\"noFallthroughSwitchClause\": \"error\",",
			"\t\t\t\t\"noGlobalAssign\": \"error\"",
			"\t\t\t},",
			"\t\t\t\"correctness\": {",
			"\t\t\t\t\"recommended\": true,",
			"\t\t\t\t\"noUnusedVariables\": \"error\",",
			"\t\t\t\t\"useExhaustiveDependencies\": \"error\"",
			"\t\t\t}",
			"\t\t}",
			"\t},",
			"\t\"formatter\": {",
			"\t\t\"enabled\": true,",
			"\t\t\"formatWithErrors\": false,",
			"\t\t\"indentStyle\": \"tab\",",
			"\t\t\"indentWidth\": 2,",
			"\t\t\"lineWidth\": 100,",
			"\t\t\"lineEnding\": \"lf\"",
			"\t},",
			"\t\"javascript\": {",
			"\t\t\"formatter\": {",
			"\t\t\t\"jsxQuoteStyle\": \"double\",",
			"\t\t\t\"quoteProperties\": \"asNeeded\",",
			"\t\t\t\"trailingCommas\": \"es5\",",
			"\t\t\t\"semicolons\": \"always\",",
			"\t\t\t\"arrowParentheses\": \"always\",",
			"\t\t\t\"bracketSpacing\": true,",
			"\t\t\t\"bracketSameLine\": false",
			"\t\t}",
			"\t},",
			"\t\"overrides\": [",
			"\t\t{",
			"\t\t\t\"include\": [",
			"\t\t\t\t\"**/compliance/**\",",
			"\t\t\t\t\"**/medical/**\",",
			"\t\t\t\t\"**/patient/**\"",
			"\t\t\t],",
			"\t\t\t\"linter\": {",
			"\t\t\t\t\"rules\": {",
			"\t\t\t\t\t\"security\": {",
			"\t\t\t\t\t\t\"noDangerouslySetInnerHtml\": \"error\"",
			"\t\t\t\t\t},",
			"\t\t\t\t\t\"a11y\": {",
			"\t\t\t\t\t\t\"useAltText\": \"error\",",
			"\t\t\t\t\t\t\"useAriaPropsForRole\": \"error\",",
			"\t\t\t\t\t\t\"useValidAriaProps\": \"error\"",
			"\t\t\t\t\t},",
			"\t\t\t\t\t\"suspicious\": {",
			"\t\t\t\t\t\t\"noExplicitAny\": \"error\",",
			"\t\t\t\t\t\t\"noConsoleLog\": \"warn\"",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t},",
			"\t\t{",
			"\t\t\t\"include\": [\"**/*.test.ts\", \"**/*.test.tsx\"],",
			"\t\t\t\"linter\": {",
			"\t\t\t\t\"rules\": {",
			"\t\t\t\t\t\"suspicious\": {",
			"\t\t\t\t\t\t\"noExplicitAny\": \"off\",",
			"\t\t\t\t\t\t\"noConsoleLog\": \"off\"",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t},",
			"\t\t{",
			"\t\t\t\"include\": [\"**/lgpd/**\", \"**/anvisa/**\", \"**/cfm/**\"],",
			"\t\t\t\"linter\": {",
			"\t\t\t\t\"rules\": {",
			"\t\t\t\t\t\"security\": {",
			"\t\t\t\t\t\t\"recommended\": true",
			"\t\t\t\t\t},",
			"\t\t\t\t\t\"suspicious\": {",
			"\t\t\t\t\t\t\"noExplicitAny\": \"error\",",
			"\t\t\t\t\t\t\"noConsoleLog\": \"error\"",
			"\t\t\t\t\t},",
			"\t\t\t\t\t\"correctness\": {",
			"\t\t\t\t\t\t\"noUnusedVariables\": \"error\"",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t}",
			"\t]",
			"}"
		]
	},

	"Healthcare Audit Hook": {
		"scope": "typescript,typescriptreact",
		"prefix": ["audit-hook", "haudit"],
		"description": "Healthcare audit logging hook with LGPD, ANVISA, and CFM compliance",
		"body": [
			"import { useCallback } from 'react';",
			"import { useAuditLogger } from '@neonpro/compliance';",
			"",
			"interface HealthcareAuditLog {",
			"\tid: string;",
			"\ttimestamp: string;",
			"\taction: string;",
			"\tactor: string;",
			"\tresource: string;",
			"\tcomplianceFramework: 'LGPD' | 'ANVISA' | 'CFM';",
			"\tsensitivityLevel: 'low' | 'medium' | 'high' | 'critical';",
			"\tauditTrail: AuditTrailEntry[];",
			"}",
			"",
			"interface AuditTrailEntry {",
			"\ttimestamp: string;",
			"\tevent: string;",
			"\tdetails: Record<string, unknown>;",
			"}",
			"",
			"interface UseHealthcareAuditReturn {",
			"\tlogLGPDAccess: (data: LGPDAccessLog) => Promise<void>;",
			"\tlogANVISARecord: (data: ANVISARecordLog) => Promise<void>;",
			"\tlogCFMEthics: (data: CFMEthicsLog) => Promise<void>;",
			"\tgetAuditHistory: (resourceId: string) => Promise<HealthcareAuditLog[]>;",
			"}",
			"",
			"/**",
			" * useHealthcareAudit - Comprehensive healthcare audit logging",
			" * Implements LGPD, ANVISA, and CFM compliance requirements",
			" * @returns Audit logging functions for healthcare compliance",
			" */",
			"export const useHealthcareAudit = (): UseHealthcareAuditReturn => {",
			"\tconst { createAuditLog, getAuditHistory: getHistory } = useAuditLogger();",
			"",
			"\t// LGPD Article 37 - Data processing audit",
			"\tconst logLGPDAccess = useCallback(async (data: LGPDAccessLog) => {",
			"\t\tconst auditLog: HealthcareAuditLog = {",
			"\t\t\tid: `lgpd-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,",
			"\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\taction: data.action,",
			"\t\t\tactor: data.processor,",
			"\t\t\tresource: data.dataSubject,",
			"\t\t\tcomplianceFramework: 'LGPD',",
			"\t\t\tsensitivityLevel: data.sensitivityLevel || 'high',",
			"\t\t\tauditTrail: [",
			"\t\t\t\t{",
			"\t\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t\t\tevent: 'data_access',",
			"\t\t\t\t\tdetails: {",
			"\t\t\t\t\t\tlegalBasis: data.legalBasis,",
			"\t\t\t\t\t\tpurpose: data.purpose,",
			"\t\t\t\t\t\tretentionPeriod: data.retentionPeriod,",
			"\t\t\t\t\t\tconsent: data.consent || false,",
			"\t\t\t\t\t},",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t};",
			"",
			"\t\tawait createAuditLog(auditLog);",
			"",
			"\t\t// Log to external LGPD compliance system",
			"\t\tconsole.log('LGPD Audit:', {",
			"\t\t\tid: auditLog.id,",
			"\t\t\taction: data.action,",
			"\t\t\tlegalBasis: data.legalBasis,",
			"\t\t\ttimestamp: auditLog.timestamp,",
			"\t\t});",
			"\t}, [createAuditLog]);",
			"",
			"\t// ANVISA RDC 44/2009 - Medical record audit",
			"\tconst logANVISARecord = useCallback(async (data: ANVISARecordLog) => {",
			"\t\tconst auditLog: HealthcareAuditLog = {",
			"\t\t\tid: `anvisa-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,",
			"\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\taction: data.action,",
			"\t\t\tactor: data.physicianCRM,",
			"\t\t\tresource: data.patientId,",
			"\t\t\tcomplianceFramework: 'ANVISA',",
			"\t\t\tsensitivityLevel: 'critical',",
			"\t\t\tauditTrail: [",
			"\t\t\t\t{",
			"\t\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t\t\tevent: 'medical_record_access',",
			"\t\t\t\t\tdetails: {",
			"\t\t\t\t\t\tprocedureCode: data.procedureCode,",
			"\t\t\t\t\t\tregulatoryBasis: data.regulatoryBasis,",
			"\t\t\t\t\t\tmedicalRecord: data.medicalRecord,",
			"\t\t\t\t\t},",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t};",
			"",
			"\t\tawait createAuditLog(auditLog);",
			"",
			"\t\t// Log to external ANVISA system",
			"\t\tconsole.log('ANVISA Audit:', {",
			"\t\t\tid: auditLog.id,",
			"\t\t\tphysicianCRM: data.physicianCRM,",
			"\t\t\tprocedureCode: data.procedureCode,",
			"\t\t\ttimestamp: auditLog.timestamp,",
			"\t\t});",
			"\t}, [createAuditLog]);",
			"",
			"\t// CFM Resolution audit",
			"\tconst logCFMEthics = useCallback(async (data: CFMEthicsLog) => {",
			"\t\tconst auditLog: HealthcareAuditLog = {",
			"\t\t\tid: `cfm-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,",
			"\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\taction: data.action,",
			"\t\t\tactor: data.physicianCRM,",
			"\t\t\tresource: data.patientId || 'anonymous',",
			"\t\t\tcomplianceFramework: 'CFM',",
			"\t\t\tsensitivityLevel: 'high',",
			"\t\t\tauditTrail: [",
			"\t\t\t\t{",
			"\t\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t\t\tevent: 'ethics_validation',",
			"\t\t\t\t\tdetails: {",
			"\t\t\t\t\t\tresolution: data.resolution,",
			"\t\t\t\t\t\tethicsCompliance: data.ethicsCompliance,",
			"\t\t\t\t\t\tpatientConsent: data.patientConsent,",
			"\t\t\t\t\t},",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t};",
			"",
			"\t\tawait createAuditLog(auditLog);",
			"",
			"\t\t// Log to external CFM system",
			"\t\tconsole.log('CFM Audit:', {",
			"\t\t\tid: auditLog.id,",
			"\t\t\tphysicianCRM: data.physicianCRM,",
			"\t\t\tresolution: data.resolution,",
			"\t\t\ttimestamp: auditLog.timestamp,",
			"\t\t});",
			"\t}, [createAuditLog]);",
			"",
			"\t// Get audit history for compliance reports",
			"\tconst getAuditHistory = useCallback(async (resourceId: string): Promise<HealthcareAuditLog[]> => {",
			"\t\ttry {",
			"\t\t\tconst history = await getHistory(resourceId);",
			"\t\t\treturn history;",
			"\t\t} catch (error) {",
			"\t\t\tconsole.error('Error fetching audit history:', error);",
			"\t\t\treturn [];",
			"\t\t}",
			"\t}, [getHistory]);",
			"",
			"\treturn {",
			"\t\tlogLGPDAccess,",
			"\t\tlogANVISARecord,",
			"\t\tlogCFMEthics,",
			"\t\tgetAuditHistory,",
			"\t};",
			"};"
		]
	}
}