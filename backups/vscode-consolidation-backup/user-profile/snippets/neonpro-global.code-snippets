{
	// ================================
	// ðŸŽ¯ ULTRACITE + BIOME SNIPPETS
	// ================================
	"Ultracite React Component": {
		"scope": "typescriptreact",
		"prefix": ["urc", "ultracite-component"],
		"description": "Ultracite-optimized React component with accessibility, performance, and Biome compliance",
		"body": [
			"import { type FC, type ReactNode } from 'react';",
			"",
			"interface ${1:ComponentName}Props {",
			"\tchildren?: ReactNode;",
			"\tclassName?: string;",
			"\t$2",
			"}",
			"",
			"/**",
			" * ${1:ComponentName} - Ultracite-optimized React component",
			" * @param props - Component props with full type safety",
			" * @returns JSX.Element with accessibility and performance optimizations",
			" */",
			"export const ${1:ComponentName}: FC<${1:ComponentName}Props> = ({",
			"\tchildren,",
			"\tclassName,",
			"\t$3",
			"}) => {",
			"\treturn (",
			"\t\t<div",
			"\t\t\tclassName={className}",
			"\t\t\trole=\"${4:region}\"",
			"\t\t\taria-label=\"${5:Component description}\"",
			"\t\t>",
			"\t\t\t{children}",
			"\t\t\t$0",
			"\t\t</div>",
			"\t);",
			"};",
			"",
			"${1:ComponentName}.displayName = '${1:ComponentName}';"
		]
	},

	"Ultracite Custom Hook": {
		"scope": "typescript,typescriptreact",
		"prefix": ["uch", "ultracite-hook"],
		"description": "Ultracite-optimized custom React hook with TypeScript and performance patterns",
		"body": [
			"import { useState, useCallback, useMemo } from 'react';",
			"",
			"interface ${1:HookName}Options {",
			"\t$2",
			"}",
			"",
			"interface ${1:HookName}Return {",
			"\t$3",
			"}",
			"",
			"/**",
			" * ${1:HookName} - Custom hook with performance optimizations",
			" * @param options - Hook configuration options",
			" * @returns Hook state and actions with memoization",
			" */",
			"export const ${1:HookName} = (options: ${1:HookName}Options): ${1:HookName}Return => {",
			"\tconst [$4, set$4] = useState$5();",
			"",
			"\tconst handleAction = useCallback(() => {",
			"\t\t$6",
			"\t}, [$7]);",
			"",
			"\tconst memoizedValue = useMemo(() => {",
			"\t\treturn $8;",
			"\t}, [$9]);",
			"",
			"\treturn {",
			"\t\t$4,",
			"\t\thandleAction,",
			"\t\tmemoizedValue,",
			"\t\t$0",
			"\t};",
			"};"
		]
	},

	"Biome Config Generator": {
		"scope": "json,jsonc",
		"prefix": ["biome-config", "ubiome"],
		"description": "Generate Biome configuration with Ultracite patterns and healthcare compliance",
		"body": [
			"{",
			"\t\"$schema\": \"https://biomejs.dev/schemas/1.9.4/schema.json\",",
			"\t\"organizeImports\": {",
			"\t\t\"enabled\": true",
			"\t},",
			"\t\"files\": {",
			"\t\t\"include\": [",
			"\t\t\t\"**/*.ts\",",
			"\t\t\t\"**/*.tsx\",",
			"\t\t\t\"**/*.js\",",
			"\t\t\t\"**/*.jsx\"",
			"\t\t],",
			"\t\t\"ignore\": [",
			"\t\t\t\"node_modules/**\",",
			"\t\t\t\"dist/**\",",
			"\t\t\t\".next/**\",",
			"\t\t\t\"coverage/**\"",
			"\t\t]",
			"\t},",
			"\t\"linter\": {",
			"\t\t\"enabled\": true,",
			"\t\t\"rules\": {",
			"\t\t\t\"recommended\": true,",
			"\t\t\t\"a11y\": {",
			"\t\t\t\t\"recommended\": true",
			"\t\t\t},",
			"\t\t\t\"security\": {",
			"\t\t\t\t\"recommended\": true",
			"\t\t\t},",
			"\t\t\t\"performance\": {",
			"\t\t\t\t\"recommended\": true",
			"\t\t\t}",
			"\t\t}",
			"\t},",
			"\t\"formatter\": {",
			"\t\t\"enabled\": true,",
			"\t\t\"formatWithErrors\": false,",
			"\t\t\"indentStyle\": \"tab\",",
			"\t\t\"indentWidth\": 2,",
			"\t\t\"lineWidth\": 100,",
			"\t\t\"lineEnding\": \"lf\"",
			"\t},",
			"\t\"javascript\": {",
			"\t\t\"formatter\": {",
			"\t\t\t\"jsxQuoteStyle\": \"double\",",
			"\t\t\t\"quoteProperties\": \"asNeeded\",",
			"\t\t\t\"trailingCommas\": \"es5\",",
			"\t\t\t\"semicolons\": \"always\",",
			"\t\t\t\"arrowParentheses\": \"always\",",
			"\t\t\t\"bracketSpacing\": true,",
			"\t\t\t\"bracketSameLine\": false",
			"\t\t}",
			"\t},",
			"\t\"overrides\": [",
			"\t\t{",
			"\t\t\t\"include\": [\"**/*.test.ts\", \"**/*.test.tsx\"],",
			"\t\t\t\"linter\": {",
			"\t\t\t\t\"rules\": {",
			"\t\t\t\t\t\"suspicious\": {",
			"\t\t\t\t\t\t\"noExplicitAny\": \"off\"",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t}",
			"\t]",
			"}"
		]
	},

	"Ultracite Error Boundary": {
		"scope": "typescriptreact",
		"prefix": ["ueb", "error-boundary"],
		"description": "Ultracite-optimized Error Boundary with healthcare compliance and accessibility",
		"body": [
			"import { Component, type ErrorInfo, type ReactNode } from 'react';",
			"",
			"interface ${1:ErrorBoundary}Props {",
			"\tchildren: ReactNode;",
			"\tfallback?: ReactNode;",
			"\tonError?: (error: Error, errorInfo: ErrorInfo) => void;",
			"}",
			"",
			"interface ${1:ErrorBoundary}State {",
			"\thasError: boolean;",
			"\terror?: Error;",
			"}",
			"",
			"/**",
			" * ${1:ErrorBoundary} - Healthcare-compliant error boundary",
			" * Follows LGPD data protection and accessibility standards",
			" */",
			"export class ${1:ErrorBoundary} extends Component<${1:ErrorBoundary}Props, ${1:ErrorBoundary}State> {",
			"\tconstructor(props: ${1:ErrorBoundary}Props) {",
			"\t\tsuper(props);",
			"\t\tthis.state = { hasError: false };",
			"\t}",
			"",
			"\tstatic getDerivedStateFromError(error: Error): ${1:ErrorBoundary}State {",
			"\t\treturn { hasError: true, error };",
			"\t}",
			"",
			"\tcomponentDidCatch(error: Error, errorInfo: ErrorInfo): void {",
			"\t\t// Healthcare compliance: No sensitive data in logs",
			"\t\tconsole.error('ErrorBoundary caught an error:', {",
			"\t\t\tmessage: error.message,",
			"\t\t\tstack: error.stack,",
			"\t\t\tcomponentStack: errorInfo.componentStack,",
			"\t\t});",
			"",
			"\t\t// Call external error handler if provided",
			"\t\tthis.props.onError?.(error, errorInfo);",
			"\t}",
			"",
			"\trender(): ReactNode {",
			"\t\tif (this.state.hasError) {",
			"\t\t\treturn (",
			"\t\t\t\tthis.props.fallback || (",
			"\t\t\t\t\t<div",
			"\t\t\t\t\t\trole=\"alert\"",
			"\t\t\t\t\t\taria-live=\"assertive\"",
			"\t\t\t\t\t\tclassName=\"error-boundary\"",
			"\t\t\t\t\t>",
			"\t\t\t\t\t\t<h2>Ops! Algo deu errado</h2>",
			"\t\t\t\t\t\t<p>Por favor, recarregue a pÃ¡gina ou entre em contato com o suporte.</p>",
			"\t\t\t\t\t\t<button",
			"\t\t\t\t\t\t\ttype=\"button\"",
			"\t\t\t\t\t\t\tonClick={() => window.location.reload()}",
			"\t\t\t\t\t\t\taria-label=\"Recarregar pÃ¡gina\"",
			"\t\t\t\t\t\t>",
			"\t\t\t\t\t\t\tRecarregar PÃ¡gina",
			"\t\t\t\t\t\t</button>",
			"\t\t\t\t\t</div>",
			"\t\t\t\t)",
			"\t\t\t);",
			"\t\t}",
			"",
			"\t\treturn this.props.children;",
			"\t}",
			"}"
		]
	},

	"Ultracite API Route": {
		"scope": "typescript",
		"prefix": ["uapi", "api-route"],
		"description": "Ultracite-optimized API route with healthcare compliance and error handling",
		"body": [
			"import { type NextRequest, NextResponse } from 'next/server';",
			"import { z } from 'zod';",
			"",
			"// Request validation schema",
			"const ${1:requestSchema} = z.object({",
			"\t$2",
			"});",
			"",
			"// Response type definition",
			"interface ${3:ResponseType} {",
			"\tsuccess: boolean;",
			"\tdata?: $4;",
			"\terror?: string;",
			"\ttimestamp: string;",
			"}",
			"",
			"/**",
			" * ${5:API Route Name} - Healthcare-compliant API endpoint",
			" * @param request - Next.js request object",
			" * @returns JSON response with LGPD compliance",
			" */",
			"export async function ${6:GET}(request: NextRequest): Promise<NextResponse<${3:ResponseType}>> {",
			"\ttry {",
			"\t\t// Parse and validate request data",
			"\t\tconst url = new URL(request.url);",
			"\t\tconst searchParams = Object.fromEntries(url.searchParams);",
			"",
			"\t\tconst validatedData = ${1:requestSchema}.parse(searchParams);",
			"",
			"\t\t// Healthcare compliance: Audit log (no sensitive data)",
			"\t\tconsole.log('API Request:', {",
			"\t\t\tmethod: '${6:GET}',",
			"\t\t\tpath: url.pathname,",
			"\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\tuserAgent: request.headers.get('user-agent'),",
			"\t\t});",
			"",
			"\t\t// Main business logic",
			"\t\tconst result = await $7;",
			"",
			"\t\treturn NextResponse.json(",
			"\t\t\t{",
			"\t\t\t\tsuccess: true,",
			"\t\t\t\tdata: result,",
			"\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t},",
			"\t\t\t{ status: 200 }",
			"\t\t);",
			"\t} catch (error) {",
			"\t\t// Healthcare compliance: Error logging without sensitive data",
			"\t\tconst errorMessage = error instanceof Error ? error.message : 'Unknown error';",
			"\t\t",
			"\t\tconsole.error('API Error:', {",
			"\t\t\tmethod: '${6:GET}',",
			"\t\t\terror: errorMessage,",
			"\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t});",
			"",
			"\t\treturn NextResponse.json(",
			"\t\t\t{",
			"\t\t\t\tsuccess: false,",
			"\t\t\t\terror: 'Internal server error',",
			"\t\t\t\ttimestamp: new Date().toISOString(),",
			"\t\t\t},",
			"\t\t\t{ status: 500 }",
			"\t\t);",
			"\t}",
			"}"
		]
	},

	"Ultracite Form Component": {
		"scope": "typescriptreact",
		"prefix": ["uform", "form-component"],
		"description": "Ultracite-optimized form component with validation, accessibility, and healthcare compliance",
		"body": [
			"import { type FC, type FormEvent } from 'react';",
			"import { useForm } from 'react-hook-form';",
			"import { zodResolver } from '@hookform/resolvers/zod';",
			"import { z } from 'zod';",
			"",
			"// Form validation schema",
			"const ${1:formSchema} = z.object({",
			"\t$2",
			"});",
			"",
			"type ${3:FormData} = z.infer<typeof ${1:formSchema}>;",
			"",
			"interface ${4:FormComponent}Props {",
			"\tonSubmit: (data: ${3:FormData}) => Promise<void> | void;",
			"\tloading?: boolean;",
			"\tinitialData?: Partial<${3:FormData}>;",
			"}",
			"",
			"/**",
			" * ${4:FormComponent} - Healthcare-compliant form with accessibility",
			" * @param props - Form component props",
			" * @returns Accessible form with LGPD compliance",
			" */",
			"export const ${4:FormComponent}: FC<${4:FormComponent}Props> = ({",
			"\tonSubmit,",
			"\tloading = false,",
			"\tinitialData,",
			"}) => {",
			"\tconst {",
			"\t\tregister,",
			"\t\thandleSubmit,",
			"\t\tformState: { errors, isSubmitting },",
			"\t\treset,",
			"\t} = useForm<${3:FormData}>({",
			"\t\tresolver: zodResolver(${1:formSchema}),",
			"\t\tdefaultValues: initialData,",
			"\t});",
			"",
			"\tconst handleFormSubmit = async (data: ${3:FormData}) => {",
			"\t\ttry {",
			"\t\t\tawait onSubmit(data);",
			"\t\t\treset();",
			"\t\t} catch (error) {",
			"\t\t\tconsole.error('Form submission error:', error);",
			"\t\t}",
			"\t};",
			"",
			"\treturn (",
			"\t\t<form",
			"\t\t\tonSubmit={handleSubmit(handleFormSubmit)}",
			"\t\t\tnoValidate",
			"\t\t\taria-label=\"${5:Form description}\"",
			"\t\t>",
			"\t\t\t<fieldset disabled={loading || isSubmitting}>",
			"\t\t\t\t<legend className=\"sr-only\">${5:Form description}</legend>",
			"",
			"\t\t\t\t{/* Form fields */}",
			"\t\t\t\t<div className=\"form-group\">",
			"\t\t\t\t\t<label htmlFor=\"${6:fieldName}\" className=\"form-label\">",
			"\t\t\t\t\t\t${7:Field Label}",
			"\t\t\t\t\t\t<span aria-hidden=\"true\">*</span>",
			"\t\t\t\t\t</label>",
			"\t\t\t\t\t<input",
			"\t\t\t\t\t\tid=\"${6:fieldName}\"",
			"\t\t\t\t\t\ttype=\"${8:text}\"",
			"\t\t\t\t\t\t{...register('${6:fieldName}')}",
			"\t\t\t\t\t\taria-invalid={errors.${6:fieldName} ? 'true' : 'false'}",
			"\t\t\t\t\t\taria-describedby={errors.${6:fieldName} ? '${6:fieldName}-error' : undefined}",
			"\t\t\t\t\t\tclassName=\"form-input\"",
			"\t\t\t\t\t\trequired",
			"\t\t\t\t\t/>",
			"\t\t\t\t\t{errors.${6:fieldName} && (",
			"\t\t\t\t\t\t<div",
			"\t\t\t\t\t\t\tid=\"${6:fieldName}-error\"",
			"\t\t\t\t\t\t\trole=\"alert\"",
			"\t\t\t\t\t\t\taria-live=\"polite\"",
			"\t\t\t\t\t\t\tclassName=\"form-error\"",
			"\t\t\t\t\t\t>",
			"\t\t\t\t\t\t\t{errors.${6:fieldName}?.message}",
			"\t\t\t\t\t\t</div>",
			"\t\t\t\t\t)}",
			"\t\t\t\t</div>",
			"",
			"\t\t\t\t{/* Submit button */}",
			"\t\t\t\t<button",
			"\t\t\t\t\ttype=\"submit\"",
			"\t\t\t\t\tdisabled={loading || isSubmitting}",
			"\t\t\t\t\taria-label={isSubmitting ? 'Enviando...' : '${9:Submit button text}'}",
			"\t\t\t\t\tclassName=\"form-submit\"",
			"\t\t\t\t>",
			"\t\t\t\t\t{isSubmitting ? 'Enviando...' : '${9:Submit button text}'}",
			"\t\t\t\t</button>",
			"\t\t\t</fieldset>",
			"\t\t</form>",
			"\t);",
			"};",
			"",
			"${4:FormComponent}.displayName = '${4:FormComponent}';"
		]
	},

	"Ultracite Test Suite": {
		"scope": "typescript,typescriptreact",
		"prefix": ["utest", "test-suite"],
		"description": "Ultracite-optimized test suite with Vitest, React Testing Library, and healthcare compliance",
		"body": [
			"import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';",
			"import { render, screen, fireEvent, waitFor, cleanup } from '@testing-library/react';",
			"import userEvent from '@testing-library/user-event';",
			"import { ${1:ComponentName} } from './${2:component-file}';",
			"",
			"// Healthcare compliance: Mock sensitive data",
			"const mockProps = {",
			"\t$3",
			"};",
			"",
			"describe('${1:ComponentName}', () => {",
			"\tbeforeEach(() => {",
			"\t\t// Setup test environment",
			"\t\tvi.clearAllMocks();",
			"\t});",
			"",
			"\tafterEach(() => {",
			"\t\t// Cleanup for healthcare compliance",
			"\t\tcleanup();",
			"\t});",
			"",
			"\tit('should render correctly', () => {",
			"\t\trender(<${1:ComponentName} {...mockProps} />);",
			"\t\t",
			"\t\texpect(screen.getByRole('${4:region}')).toBeInTheDocument();",
			"\t\texpect(screen.getByLabelText('${5:aria-label}')).toBeInTheDocument();",
			"\t});",
			"",
			"\tit('should be accessible', async () => {",
			"\t\trender(<${1:ComponentName} {...mockProps} />);",
			"\t\t",
			"\t\t// Accessibility testing",
			"\t\tconst element = screen.getByRole('${4:region}');",
			"\t\texpect(element).toHaveAttribute('aria-label');",
			"\t\texpect(element).not.toHaveAttribute('aria-hidden', 'true');",
			"\t});",
			"",
			"\tit('should handle user interactions', async () => {",
			"\t\tconst user = userEvent.setup();",
			"\t\tconst mockHandler = vi.fn();",
			"\t\t",
			"\t\trender(<${1:ComponentName} {...mockProps} onAction={mockHandler} />);",
			"\t\t",
			"\t\tconst button = screen.getByRole('button');",
			"\t\tawait user.click(button);",
			"\t\t",
			"\t\texpect(mockHandler).toHaveBeenCalledOnce();",
			"\t});",
			"",
			"\tit('should comply with healthcare data protection', () => {",
			"\t\trender(<${1:ComponentName} {...mockProps} />);",
			"\t\t",
			"\t\t// LGPD compliance: No sensitive data in DOM attributes",
			"\t\tconst element = screen.getByRole('${4:region}');",
			"\t\texpect(element).not.toHaveAttribute('data-patient-id');",
			"\t\texpect(element).not.toHaveAttribute('data-cpf');",
			"\t\texpect(element).not.toHaveAttribute('data-medical-record');",
			"\t});",
			"",
			"\tit('should handle errors gracefully', async () => {",
			"\t\tconst mockError = vi.fn();",
			"\t\tconsole.error = mockError;",
			"\t\t",
			"\t\tconst invalidProps = { ...mockProps, invalidProp: null };",
			"\t\t",
			"\t\trender(<${1:ComponentName} {...invalidProps} />);",
			"\t\t",
			"\t\t// Error should be logged but component should render",
			"\t\texpect(screen.getByRole('${4:region}')).toBeInTheDocument();",
			"\t});",
			"",
			"\t$0",
			"});"
		]
	}
}