{"ref":"e33c7c10-2d2e-48b7-b9b7-7c4ce8234054","syncData":{"version":1,"machineId":"3467d304-1b55-43b4-8042-6ac7f3c799d1","content":"{\"tasks\":\"{\\n  \\\"version\\\": \\\"2.0.0\\\",\\n  \\\"options\\\": {\\n    \\\"env\\\": {\\n      \\\"VIBECODE_SYSTEM\\\": \\\"VIBECODE V6.0 - Global Task Orchestrator\\\",\\n      \\\"INSTRUCTIONS_AUTOMATION\\\": \\\"enabled\\\"\\n    }\\n  },\\n  \\\"presentation\\\": {\\n    \\\"echo\\\": true,\\n    \\\"reveal\\\": \\\"always\\\",\\n    \\\"focus\\\": false,\\n    \\\"panel\\\": \\\"shared\\\",\\n    \\\"showReuseMessage\\\": true,\\n    \\\"clear\\\": false\\n  },\\n  \\\"tasks\\\": [\\n    // ==============================================\\n    // üéØ QUALITY & FORMATTING TASKS (KISS Principle)\\n    // ==============================================\\n    {\\n      \\\"label\\\": \\\"üéØ VIBECODE: Format Code\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"format\\\"],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Format all code using Biome + Ultracite formatter\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": false,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": true,\\n        \\\"clear\\\": false\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üîç VIBECODE: Lint Code\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"lint:biome\\\"],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Lint all code using Biome + Ultracite linter\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": false,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": true,\\n        \\\"clear\\\": false\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üîß VIBECODE: Auto-fix Issues\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"check:fix\\\"],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Auto-fix all fixable issues using Biome + Ultracite\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": false,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": true,\\n        \\\"clear\\\": false\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"‚úÖ VIBECODE: Type Check\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"type-check\\\"],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Run TypeScript type checking across all packages\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": false,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": true,\\n        \\\"clear\\\": false\\n      },\\n      \\\"problemMatcher\\\": [\\\"$tsc\\\"]\\n    },\\n\\n    // ==============================================\\n    // üß™ TESTING TASKS (Vitest + Playwright Stack)\\n    // ==============================================\\n    {\\n      \\\"label\\\": \\\"üß™ VITEST: Run Unit Tests\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"test:unit\\\"],\\n      \\\"group\\\": {\\n        \\\"kind\\\": \\\"test\\\",\\n        \\\"isDefault\\\": true\\n      },\\n      \\\"detail\\\": \\\"Run all unit tests using Vitest\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üé≠ PLAYWRIGHT: Run E2E Tests\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"test:e2e\\\"],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Run all E2E tests using Playwright\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üß™ VITEST: Watch Mode\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"test:unit\\\", \\\"--watch\\\"],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Run Vitest in watch mode for continuous testing\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"isBackground\\\": true,\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üìä VITEST: Coverage Report\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"test:unit\\\", \\\"--coverage\\\"],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Generate Vitest coverage report\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üé≠ PLAYWRIGHT: UI Mode\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"exec\\\", \\\"playwright\\\", \\\"test\\\", \\\"--ui\\\"],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Run Playwright in UI mode for visual testing\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üé≠ PLAYWRIGHT: Debug Mode\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"test:debug\\\"],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Run Playwright tests in debug mode (step-by-step)\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n\\n    // ==============================================\\n    // üöÄ BUILD & DEVELOPMENT TASKS\\n    // ==============================================\\n    {\\n      \\\"label\\\": \\\"üöÄ DEV: Start Development Server\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"dev\\\"],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Start development server using Turborepo\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"isBackground\\\": true,\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": {\\n        \\\"pattern\\\": {\\n          \\\"regexp\\\": \\\".\\\"\\n        },\\n        \\\"background\\\": {\\n          \\\"activeOnStart\\\": true,\\n          \\\"beginsPattern\\\": \\\"- Local:\\\",\\n          \\\"endsPattern\\\": \\\"Ready in\\\"\\n        }\\n      }\\n    },\\n    {\\n      \\\"label\\\": \\\"üèóÔ∏è BUILD: Production Build\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"build\\\"],\\n      \\\"group\\\": {\\n        \\\"kind\\\": \\\"build\\\",\\n        \\\"isDefault\\\": false\\n      },\\n      \\\"detail\\\": \\\"Build all packages for production using Turborepo\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": [\\\"$tsc\\\", \\\"$biome\\\"]\\n    },\\n    {\\n      \\\"label\\\": \\\"üßπ CLEAN: Clean All\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"clean\\\"],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Clean all build artifacts and caches\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n\\n    // ==============================================\\n    // üè• HEALTHCARE COMPLIANCE TASKS (YAGNI - Only Essential)\\n    // ==============================================\\n    {\\n      \\\"label\\\": \\\"üè• COMPLIANCE: LGPD Check\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"compliance:lgpd\\\"],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Run LGPD compliance validation\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üè• COMPLIANCE: ANVISA Check\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"compliance:anvisa\\\"],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Run ANVISA compliance validation\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üõ°Ô∏è SECURITY: Security Audit\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"security:audit\\\"],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Run comprehensive security audit\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n\\n    // ==============================================\\n    // üèÜ COMPREHENSIVE VALIDATION WORKFLOWS (CoT Reasoning)\\n    // ==============================================\\n    {\\n      \\\"label\\\": \\\"üèÜ VIBECODE: Complete Quality Validation\\\",\\n      \\\"dependsOrder\\\": \\\"sequence\\\",\\n      \\\"dependsOn\\\": [\\n        \\\"üéØ VIBECODE: Format Code\\\",\\n        \\\"üîç VIBECODE: Lint Code\\\", \\n        \\\"üîß VIBECODE: Auto-fix Issues\\\",\\n        \\\"‚úÖ VIBECODE: Type Check\\\",\\n        \\\"üß™ VITEST: Run Unit Tests\\\"\\n      ],\\n      \\\"group\\\": {\\n        \\\"kind\\\": \\\"build\\\",\\n        \\\"isDefault\\\": true\\n      },\\n      \\\"detail\\\": \\\"Complete quality validation pipeline - format, lint, fix, type check, and test\\\",\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üöÄ VIBECODE: Full Test Suite\\\",\\n      \\\"dependsOrder\\\": \\\"parallel\\\",\\n      \\\"dependsOn\\\": [\\n        \\\"üß™ VITEST: Run Unit Tests\\\",\\n        \\\"üé≠ PLAYWRIGHT: Run E2E Tests\\\"\\n      ],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Run complete test suite (Unit + E2E)\\\",\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üè• VIBECODE: Healthcare Validation\\\",\\n      \\\"dependsOrder\\\": \\\"sequence\\\",\\n      \\\"dependsOn\\\": [\\n        \\\"üèÜ VIBECODE: Complete Quality Validation\\\",\\n        \\\"üè• COMPLIANCE: LGPD Check\\\",\\n        \\\"üè• COMPLIANCE: ANVISA Check\\\",\\n        \\\"üõ°Ô∏è SECURITY: Security Audit\\\"\\n      ],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Complete healthcare compliance validation\\\",\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n\\n    // ==============================================\\n    // üîß MAINTENANCE & UTILITY TASKS (Essential Only)\\n    // ==============================================\\n    {\\n      \\\"label\\\": \\\"üì¶ PNPM: Install Dependencies\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"install\\\"],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Install all project dependencies using PNPM\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üì¶ PNPM: Update Dependencies\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"pnpm\\\",\\n      \\\"args\\\": [\\\"update\\\", \\\"--latest\\\"],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Update all dependencies to latest versions\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"dedicated\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üßπ PNPM: Prune & Clean\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"powershell\\\",\\n      \\\"args\\\": [\\n        \\\"-Command\\\",\\n        \\\"Write-Host 'üßπ Cleaning PNPM store and removing unused dependencies...' -ForegroundColor Yellow; pnpm store prune; pnpm prune; Write-Host '‚úÖ PNPM cleanup completed!' -ForegroundColor Green\\\"\\n      ],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Clean PNPM store and remove unused dependencies\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n\\n    // ==============================================\\n    // üìä REPORTING & DIAGNOSTICS (Optimized)\\n    // ==============================================\\n    {\\n      \\\"label\\\": \\\"üìä REPORT: Generate Quality Report\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"powershell\\\",\\n      \\\"args\\\": [\\n        \\\"-Command\\\",\\n        \\\"$timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'; Write-Host ''; Write-Host 'üèÜ NEONPRO QUALITY VALIDATION COMPLETE' -ForegroundColor Green; Write-Host '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' -ForegroundColor Green; Write-Host ''; Write-Host '‚úÖ Formatting (Biome + Ultracite): All code formatted consistently' -ForegroundColor Cyan; Write-Host '‚úÖ Linting (Biome + Ultracite): No linting errors detected' -ForegroundColor Cyan; Write-Host '‚úÖ Unit Tests (Vitest): All tests passing' -ForegroundColor Cyan; Write-Host '‚úÖ E2E Tests (Playwright): Healthcare workflows validated' -ForegroundColor Cyan; Write-Host '‚úÖ Type Checking (TypeScript): No type errors' -ForegroundColor Cyan; Write-Host ''; Write-Host \\\\\\\"‚è∞ Validation completed at: $timestamp\\\\\\\" -ForegroundColor Yellow; Write-Host ''; Write-Host 'üè• Healthcare compliance: LGPD + ANVISA + CFM ready!' -ForegroundColor Green; Write-Host 'üöÄ Ready for production deployment!' -ForegroundColor Green; Write-Host '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' -ForegroundColor Green; Write-Host ''\\\"\\n      ],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Generate comprehensive quality validation report\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": false\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"üîç DIAGNOSTIC: Project Health Check\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"powershell\\\",\\n      \\\"args\\\": [\\n        \\\"-Command\\\",\\n        \\\"Write-Host 'üîç Running NeonPro Project Health Check...' -ForegroundColor Yellow; Write-Host ''; Write-Host 'üì¶ Package Manager:' -ForegroundColor Cyan; if (Test-Path 'pnpm-lock.yaml') { Write-Host '  ‚úÖ PNPM (pnpm-lock.yaml found)' -ForegroundColor Green } else { Write-Host '  ‚ùå PNPM lock file missing' -ForegroundColor Red }; if (Test-Path 'package-lock.json') { Write-Host '  ‚ö†Ô∏è NPM lock file detected (should be removed)' -ForegroundColor Yellow } else { Write-Host '  ‚úÖ No conflicting NPM lock files' -ForegroundColor Green }; Write-Host ''; Write-Host 'üß™ Testing Stack:' -ForegroundColor Cyan; if (Test-Path 'vitest.config.ts') { Write-Host '  ‚úÖ Vitest configured' -ForegroundColor Green } else { Write-Host '  ‚ùå Vitest config missing' -ForegroundColor Red }; if (Test-Path 'playwright.config.ts') { Write-Host '  ‚úÖ Playwright configured' -ForegroundColor Green } else { Write-Host '  ‚ùå Playwright config missing' -ForegroundColor Red }; Write-Host ''; Write-Host 'üéØ Code Quality:' -ForegroundColor Cyan; if (Test-Path 'biome.jsonc') { Write-Host '  ‚úÖ Biome + Ultracite configured' -ForegroundColor Green } else { Write-Host '  ‚ùå Biome config missing' -ForegroundColor Red }; Write-Host ''; Write-Host 'üìä Health check completed!' -ForegroundColor Green\\\"\\n      ],\\n      \\\"group\\\": \\\"test\\\",\\n      \\\"detail\\\": \\\"Comprehensive project health and configuration check\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    },\\n    {\\n      \\\"label\\\": \\\"ü§ñ COPILOT: Reload Chatmodes\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"powershell\\\",\\n      \\\"args\\\": [\\n        \\\"-Command\\\",\\n        \\\"Write-Host 'ü§ñ Reloading GitHub Copilot Chatmodes...' -ForegroundColor Yellow; Write-Host ''; Write-Host 'üìÅ Checking chatmodes directory:' -ForegroundColor Cyan; if (Test-Path '.github/chatmodes') { Write-Host '  ‚úÖ .github/chatmodes directory found' -ForegroundColor Green; $chatmodes = Get-ChildItem '.github/chatmodes/*.chatmode.md' | Measure-Object; Write-Host \\\\\\\"  üìù Found $($chatmodes.Count) chatmode files\\\\\\\" -ForegroundColor Green; Get-ChildItem '.github/chatmodes/*.chatmode.md' | ForEach-Object { Write-Host \\\\\\\"    - $($_.Name)\\\\\\\" -ForegroundColor White } } else { Write-Host '  ‚ùå .github/chatmodes directory not found' -ForegroundColor Red }; Write-Host ''; Write-Host '‚öôÔ∏è Copilot Configuration:' -ForegroundColor Cyan; Write-Host '  ‚úÖ Instruction files enabled in workspace' -ForegroundColor Green; Write-Host '  ‚úÖ Chatmode file association configured' -ForegroundColor Green; Write-Host ''; Write-Host 'üîÑ Recommendation: Reload VS Code window to refresh chatmode detection' -ForegroundColor Yellow; Write-Host '   Use Ctrl+Shift+P -> \\\\\\\"Developer: Reload Window\\\\\\\"' -ForegroundColor White; Write-Host ''; Write-Host '‚úÖ Chatmode reload check completed!' -ForegroundColor Green\\\"\\n      ],\\n      \\\"group\\\": \\\"build\\\",\\n      \\\"detail\\\": \\\"Check and reload GitHub Copilot chatmodes configuration\\\",\\n      \\\"options\\\": {\\n        \\\"cwd\\\": \\\"${input:workspaceSelection}\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"echo\\\": true,\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"focus\\\": true,\\n        \\\"panel\\\": \\\"shared\\\",\\n        \\\"showReuseMessage\\\": false,\\n        \\\"clear\\\": true\\n      },\\n      \\\"problemMatcher\\\": []\\n    }\\n  ],\\n  \\\"inputs\\\": [\\n    {\\n      \\\"id\\\": \\\"contextInput\\\",\\n      \\\"description\\\": \\\"Digite o contexto do seu trabalho (ex: security auth, nextjs react)\\\",\\n      \\\"default\\\": \\\"nextjs typescript healthcare\\\",\\n      \\\"type\\\": \\\"promptString\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"instructionMode\\\",\\n      \\\"description\\\": \\\"Escolha o modo de instru√ß√µes\\\",\\n      \\\"type\\\": \\\"pickString\\\",\\n      \\\"options\\\": [\\n        {\\n          \\\"label\\\": \\\"üéØ Base Only (3 instru√ß√µes)\\\",\\n          \\\"value\\\": \\\"base\\\"\\n        },\\n        {\\n          \\\"label\\\": \\\"üîí Security Context (4 instru√ß√µes)\\\",\\n          \\\"value\\\": \\\"security\\\"\\n        },\\n        {\\n          \\\"label\\\": \\\"üîß Tech Standards (4 instru√ß√µes)\\\",\\n          \\\"value\\\": \\\"tech\\\"\\n        },\\n        {\\n          \\\"label\\\": \\\"üöÄ Complete Context (5 instru√ß√µes)\\\",\\n          \\\"value\\\": \\\"complete\\\"\\n        }\\n      ],\\n      \\\"default\\\": \\\"complete\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"workspaceSelection\\\",\\n      \\\"description\\\": \\\"Selecione o workspace para opera√ß√£o\\\",\\n      \\\"type\\\": \\\"pickString\\\",\\n      \\\"options\\\": [\\n        {\\n          \\\"label\\\": \\\"üè• NeonPro Healthcare (D:\\\\\\\\neonpro)\\\",\\n          \\\"value\\\": \\\"D:\\\\\\\\neonpro\\\"\\n        },\\n        {\\n          \\\"label\\\": \\\"üé≠ Playwright Testing (D:\\\\\\\\neonpro\\\\\\\\tools\\\\\\\\testing)\\\",\\n          \\\"value\\\": \\\"D:\\\\\\\\neonpro\\\\\\\\tools\\\\\\\\testing\\\"\\n        },\\n        {\\n          \\\"label\\\": \\\"üéØ Current Workspace (${workspaceFolder})\\\",\\n          \\\"value\\\": \\\"${workspaceFolder}\\\"\\n        }\\n      ],\\n      \\\"default\\\": \\\"D:\\\\\\\\neonpro\\\"\\n    }\\n  ]\\n}\"}"}}