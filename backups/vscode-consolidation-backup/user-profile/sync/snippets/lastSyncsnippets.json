{"ref":"89608257-232e-45db-aa5f-dbbfe20a9186","syncData":{"version":1,"machineId":"3467d304-1b55-43b4-8042-6ac7f3c799d1","content":"{\"neonpro.code-snippets\":\"{\\n  \\\"NeonPro Server Component\\\": {\\n    \\\"prefix\\\": \\\"neon-server\\\",\\n    \\\"body\\\": [\\n      \\\"import { createClient } from '@/app/utils/supabase/server'\\\",\\n      \\\"import { redirect } from 'next/navigation'\\\",\\n      \\\"import DashboardLayout from '@/components/layouts/dashboard-layout'\\\",\\n      \\\"\\\",\\n      \\\"export default async function ${1:ComponentName}() {\\\",\\n      \\\"  const supabase = await createClient()\\\",\\n      \\\"  const { data: { session } } = await supabase.auth.getSession()\\\",\\n      \\\"\\\",\\n      \\\"  if (!session) {\\\",\\n      \\\"    redirect('/login')\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  const { data: { user } } = await supabase.auth.getUser()\\\",\\n      \\\"\\\",\\n      \\\"  const breadcrumbs = [\\\",\\n      \\\"    { title: 'Dashboard', href: '/dashboard' },\\\",\\n      \\\"    { title: '${2:Page Title}' }\\\",\\n      \\\"  ]\\\",\\n      \\\"\\\",\\n      \\\"  return (\\\",\\n      \\\"    <DashboardLayout user={user} breadcrumbs={breadcrumbs}>\\\",\\n      \\\"      <div className=\\\\\\\"space-y-6\\\\\\\">\\\",\\n      \\\"        <div className=\\\\\\\"flex items-center justify-between\\\\\\\">\\\",\\n      \\\"          <h1 className=\\\\\\\"text-3xl font-bold tracking-tight\\\\\\\">${2:Page Title}</h1>\\\",\\n      \\\"        </div>\\\",\\n      \\\"        ${4:// Page content}\\\",\\n      \\\"      </div>\\\",\\n      \\\"    </DashboardLayout>\\\",\\n      \\\"  )\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"NeonPro Server Component with authentication and dashboard layout\\\"\\n  },\\n  \\n  \\\"NeonPro Client Component\\\": {\\n    \\\"prefix\\\": \\\"neon-client\\\",\\n    \\\"body\\\": [\\n      \\\"\\\\\\\"use client\\\\\\\"\\\",\\n      \\\"\\\",\\n      \\\"import { useState } from 'react'\\\",\\n      \\\"import { createClient } from '@/app/utils/supabase/client'\\\",\\n      \\\"import { Button } from '@/components/ui/button'\\\",\\n      \\\"import { toast } from 'sonner'\\\",\\n      \\\"\\\",\\n      \\\"export default function ${1:ComponentName}() {\\\",\\n      \\\"  const [isLoading, setIsLoading] = useState(false)\\\",\\n      \\\"  const supabase = createClient()\\\",\\n      \\\"\\\",\\n      \\\"  const handleAction = async () => {\\\",\\n      \\\"    try {\\\",\\n      \\\"      setIsLoading(true)\\\",\\n      \\\"      ${2:// Client-side logic}\\\",\\n      \\\"      toast.success('${3:Success message}')\\\",\\n      \\\"    } catch (error) {\\\",\\n      \\\"      console.error('Error:', error)\\\",\\n      \\\"      toast.error('${4:Error message}')\\\",\\n      \\\"    } finally {\\\",\\n      \\\"      setIsLoading(false)\\\",\\n      \\\"    }\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  return (\\\",\\n      \\\"    <div className=\\\\\\\"${5:space-y-4}\\\\\\\">\\\",\\n      \\\"      ${6:// Component content}\\\",\\n      \\\"    </div>\\\",\\n      \\\"  )\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"NeonPro Client Component with error handling\\\"\\n  },\\n\\n  \\\"NeonPro Form Component\\\": {\\n    \\\"prefix\\\": \\\"neon-form\\\",\\n    \\\"body\\\": [\\n      \\\"\\\\\\\"use client\\\\\\\"\\\",\\n      \\\"\\\",\\n      \\\"import { useForm } from 'react-hook-form'\\\",\\n      \\\"import { zodResolver } from '@hookform/resolvers/zod'\\\",\\n      \\\"import { z } from 'zod'\\\",\\n      \\\"import { Button } from '@/components/ui/button'\\\",\\n      \\\"import {\\\",\\n      \\\"  Form,\\\",\\n      \\\"  FormControl,\\\",\\n      \\\"  FormField,\\\",\\n      \\\"  FormItem,\\\",\\n      \\\"  FormLabel,\\\",\\n      \\\"  FormMessage,\\\",\\n      \\\"} from '@/components/ui/form'\\\",\\n      \\\"import { Input } from '@/components/ui/input'\\\",\\n      \\\"import { toast } from 'sonner'\\\",\\n      \\\"\\\",\\n      \\\"const formSchema = z.object({\\\",\\n      \\\"  ${1:fieldName}: z.string().min(1, '${2:Field is required}'),\\\",\\n      \\\"})\\\",\\n      \\\"\\\",\\n      \\\"type FormData = z.infer<typeof formSchema>\\\",\\n      \\\"\\\",\\n      \\\"export default function ${3:FormName}() {\\\",\\n      \\\"  const form = useForm<FormData>({\\\",\\n      \\\"    resolver: zodResolver(formSchema),\\\",\\n      \\\"    defaultValues: {\\\",\\n      \\\"      ${1:fieldName}: '',\\\",\\n      \\\"    },\\\",\\n      \\\"  })\\\",\\n      \\\"\\\",\\n      \\\"  const onSubmit = async (data: FormData) => {\\\",\\n      \\\"    try {\\\",\\n      \\\"      ${4:// Handle form submission}\\\",\\n      \\\"      toast.success('${5:Success message}')\\\",\\n      \\\"      form.reset()\\\",\\n      \\\"    } catch (error) {\\\",\\n      \\\"      console.error('Form error:', error)\\\",\\n      \\\"      toast.error('${6:Error message}')\\\",\\n      \\\"    }\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  return (\\\",\\n      \\\"    <Form {...form}>\\\",\\n      \\\"      <form onSubmit={form.handleSubmit(onSubmit)} className=\\\\\\\"space-y-6\\\\\\\">\\\",\\n      \\\"        <FormField\\\",\\n      \\\"          control={form.control}\\\",\\n      \\\"          name=\\\\\\\"${1:fieldName}\\\\\\\"\\\",\\n      \\\"          render={({ field }) => (\\\",\\n      \\\"            <FormItem>\\\",\\n      \\\"              <FormLabel>${7:Field Label}</FormLabel>\\\",\\n      \\\"              <FormControl>\\\",\\n      \\\"                <Input placeholder=\\\\\\\"${8:Enter value}\\\\\\\" {...field} />\\\",\\n      \\\"              </FormControl>\\\",\\n      \\\"              <FormMessage />\\\",\\n      \\\"            </FormItem>\\\",\\n      \\\"          )}\\\",\\n      \\\"        />\\\",\\n      \\\"        <Button type=\\\\\\\"submit\\\\\\\" disabled={form.formState.isSubmitting}>\\\",\\n      \\\"          {form.formState.isSubmitting ? 'Submitting...' : '${9:Submit}'}\\\",\\n      \\\"        </Button>\\\",\\n      \\\"      </form>\\\",\\n      \\\"    </Form>\\\",\\n      \\\"  )\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"NeonPro Form Component with validation\\\"\\n  },\\n\\n  \\\"NeonPro API Route\\\": {\\n    \\\"prefix\\\": \\\"neon-api\\\",\\n    \\\"body\\\": [\\n      \\\"import { createClient } from '@/app/utils/supabase/server'\\\",\\n      \\\"import { NextRequest, NextResponse } from 'next/server'\\\",\\n      \\\"import { z } from 'zod'\\\",\\n      \\\"\\\",\\n      \\\"const requestSchema = z.object({\\\",\\n      \\\"  ${1:fieldName}: z.string(),\\\",\\n      \\\"})\\\",\\n      \\\"\\\",\\n      \\\"export async function ${2:POST}(request: NextRequest) {\\\",\\n      \\\"  try {\\\",\\n      \\\"    const supabase = await createClient()\\\",\\n      \\\"    const { data: { session } } = await supabase.auth.getSession()\\\",\\n      \\\"\\\",\\n      \\\"    if (!session) {\\\",\\n      \\\"      return NextResponse.json(\\\",\\n      \\\"        { error: 'Unauthorized' },\\\",\\n      \\\"        { status: 401 }\\\",\\n      \\\"      )\\\",\\n      \\\"    }\\\",\\n      \\\"\\\",\\n      \\\"    const body = await request.json()\\\",\\n      \\\"    const validatedData = requestSchema.parse(body)\\\",\\n      \\\"\\\",\\n      \\\"    ${3:// API logic here}\\\",\\n      \\\"\\\",\\n      \\\"    return NextResponse.json({ success: true, data: ${4:result} })\\\",\\n      \\\"  } catch (error) {\\\",\\n      \\\"    console.error('API Error:', error)\\\",\\n      \\\"    \\\",\\n      \\\"    if (error instanceof z.ZodError) {\\\",\\n      \\\"      return NextResponse.json(\\\",\\n      \\\"        { error: 'Invalid request data', details: error.errors },\\\",\\n      \\\"        { status: 400 }\\\",\\n      \\\"      )\\\",\\n      \\\"    }\\\",\\n      \\\"\\\",\\n      \\\"    return NextResponse.json(\\\",\\n      \\\"      { error: 'Internal server error' },\\\",\\n      \\\"      { status: 500 }\\\",\\n      \\\"    )\\\",\\n      \\\"  }\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"NeonPro API Route with authentication and validation\\\"\\n  },\\n\\n  \\\"Supabase Query with Error Handling\\\": {\\n    \\\"prefix\\\": \\\"neon-query\\\",\\n    \\\"body\\\": [\\n      \\\"const { data: ${1:dataName}, error } = await supabase\\\",\\n      \\\"  .from('${2:table_name}')\\\",\\n      \\\"  .select('${3:*}')\\\",\\n      \\\"  ${4:.eq('column', value)}\\\",\\n      \\\"\\\",\\n      \\\"if (error) {\\\",\\n      \\\"  console.error('Database error:', error)\\\",\\n      \\\"  throw new Error('${5:Failed to fetch data}')\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"return ${1:dataName}\\\"\\n    ],\\n    \\\"description\\\": \\\"Supabase query with proper error handling\\\"\\n  },\\n\\n  \\\"Supabase RLS Insert\\\": {\\n    \\\"prefix\\\": \\\"neon-insert\\\",\\n    \\\"body\\\": [\\n      \\\"const { data: ${1:insertedData}, error } = await supabase\\\",\\n      \\\"  .from('${2:table_name}')\\\",\\n      \\\"  .insert({\\\",\\n      \\\"    ${3:column}: ${4:value},\\\",\\n      \\\"    user_id: session.user.id,\\\",\\n      \\\"    created_at: new Date().toISOString(),\\\",\\n      \\\"  })\\\",\\n      \\\"  .select()\\\",\\n      \\\"  .single()\\\",\\n      \\\"\\\",\\n      \\\"if (error) {\\\",\\n      \\\"  console.error('Insert error:', error)\\\",\\n      \\\"  throw new Error('${5:Failed to create record}')\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"return ${1:insertedData}\\\"\\n    ],\\n    \\\"description\\\": \\\"Supabase insert with RLS compliance\\\"\\n  },\\n\\n  \\\"shadcn/ui Card Layout\\\": {\\n    \\\"prefix\\\": \\\"neon-card\\\",\\n    \\\"body\\\": [\\n      \\\"import {\\\",\\n      \\\"  Card,\\\",\\n      \\\"  CardContent,\\\",\\n      \\\"  CardDescription,\\\",\\n      \\\"  CardHeader,\\\",\\n      \\\"  CardTitle,\\\",\\n      \\\"} from '@/components/ui/card'\\\",\\n      \\\"\\\",\\n      \\\"<Card className=\\\\\\\"${1:w-full}\\\\\\\">\\\",\\n      \\\"  <CardHeader>\\\",\\n      \\\"    <CardTitle>${2:Card Title}</CardTitle>\\\",\\n      \\\"    <CardDescription>\\\",\\n      \\\"      ${3:Card description}\\\",\\n      \\\"    </CardDescription>\\\",\\n      \\\"  </CardHeader>\\\",\\n      \\\"  <CardContent className=\\\\\\\"${4:space-y-4}\\\\\\\">\\\",\\n      \\\"    ${5:// Card content}\\\",\\n      \\\"  </CardContent>\\\",\\n      \\\"</Card>\\\"\\n    ],\\n    \\\"description\\\": \\\"shadcn/ui Card component structure\\\"\\n  },\\n\\n  \\\"Loading Button\\\": {\\n    \\\"prefix\\\": \\\"neon-button-loading\\\",\\n    \\\"body\\\": [\\n      \\\"import { Loader2 } from 'lucide-react'\\\",\\n      \\\"import { Button } from '@/components/ui/button'\\\",\\n      \\\"\\\",\\n      \\\"<Button disabled={${1:isLoading}} className=\\\\\\\"${2:w-full}\\\\\\\">\\\",\\n      \\\"  {${1:isLoading} && <Loader2 className=\\\\\\\"mr-2 h-4 w-4 animate-spin\\\\\\\" />}\\\",\\n      \\\"  ${3:Button Text}\\\",\\n      \\\"</Button>\\\"\\n    ],\\n    \\\"description\\\": \\\"Button with loading state\\\"\\n  },\\n\\n  \\\"Toast Notification\\\": {\\n    \\\"prefix\\\": \\\"neon-toast\\\",\\n    \\\"body\\\": [\\n      \\\"import { toast } from 'sonner'\\\",\\n      \\\"\\\",\\n      \\\"// Success\\\",\\n      \\\"toast.success('${1:Success message}')\\\",\\n      \\\"\\\",\\n      \\\"// Error\\\", \\n      \\\"toast.error('${2:Error message}')\\\",\\n      \\\"\\\",\\n      \\\"// Loading\\\",\\n      \\\"const toastId = toast.loading('${3:Loading message}')\\\",\\n      \\\"\\\",\\n      \\\"// Update loading toast\\\",\\n      \\\"toast.success('${4:Completed!}', { id: toastId })\\\"\\n    ],\\n    \\\"description\\\": \\\"Toast notification patterns\\\"\\n  },\\n\\n  \\\"BMad Story Implementation\\\": {\\n    \\\"prefix\\\": \\\"neon-bmad-story\\\",\\n    \\\"body\\\": [\\n      \\\"// Story: ${1:Story Name}\\\",\\n      \\\"// Implementation following BMad Method patterns\\\",\\n      \\\"\\\",\\n      \\\"\\\\\\\"use client\\\\\\\"\\\",\\n      \\\"\\\",\\n      \\\"import { useState, useEffect } from 'react'\\\",\\n      \\\"import { createClient } from '@/app/utils/supabase/client'\\\",\\n      \\\"import { toast } from 'sonner'\\\",\\n      \\\"\\\",\\n      \\\"export default function ${2:ComponentName}() {\\\",\\n      \\\"  const [isLoading, setIsLoading] = useState(false)\\\",\\n      \\\"  const [data, setData] = useState(null)\\\",\\n      \\\"  const supabase = createClient()\\\",\\n      \\\"\\\",\\n      \\\"  useEffect(() => {\\\",\\n      \\\"    // Load initial data\\\",\\n      \\\"    const loadData = async () => {\\\",\\n      \\\"      try {\\\",\\n      \\\"        setIsLoading(true)\\\",\\n      \\\"        ${3:// Fetch data logic}\\\",\\n      \\\"      } catch (error) {\\\",\\n      \\\"        console.error('Error:', error)\\\",\\n      \\\"        toast.error('Failed to load data')\\\",\\n      \\\"      } finally {\\\",\\n      \\\"        setIsLoading(false)\\\",\\n      \\\"      }\\\",\\n      \\\"    }\\\",\\n      \\\"\\\",\\n      \\\"    loadData()\\\",\\n      \\\"  }, [])\\\",\\n      \\\"\\\",\\n      \\\"  return (\\\",\\n      \\\"    <div className=\\\\\\\"${4:space-y-6}\\\\\\\">\\\",\\n      \\\"      <div className=\\\\\\\"flex items-center justify-between\\\\\\\">\\\",\\n      \\\"        <h2 className=\\\\\\\"text-2xl font-bold\\\\\\\">${1:Story Name}</h2>\\\",\\n      \\\"      </div>\\\",\\n      \\\"      \\\",\\n      \\\"      {isLoading ? (\\\",\\n      \\\"        <div className=\\\\\\\"flex items-center justify-center py-8\\\\\\\">\\\",\\n      \\\"          <div className=\\\\\\\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\\\\\\\" />\\\",\\n      \\\"        </div>\\\",\\n      \\\"      ) : (\\\",\\n      \\\"        <div className=\\\\\\\"${5:grid gap-4}\\\\\\\">\\\",\\n      \\\"          ${6:// Story implementation content}\\\",\\n      \\\"        </div>\\\",\\n      \\\"      )}\\\",\\n      \\\"    </div>\\\",\\n      \\\"  )\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"BMad Method story implementation template\\\"\\n  }\\n}\",\"neonpro-healthcare.code-snippets\":\"{\\n  // ==============================================\\n  // 🏥 NEONPRO HEALTHCARE COMPLIANCE SNIPPETS\\n  // ==============================================\\n  \\n  \\\"Healthcare Test Suite\\\": {\\n    \\\"prefix\\\": \\\"test-healthcare\\\",\\n    \\\"body\\\": [\\n      \\\"import { describe, it, expect, vi, beforeEach } from 'vitest'\\\",\\n      \\\"import { renderWithHealthcareProvider, healthcareTestData } from '@/test/utils/healthcare-test-utils'\\\",\\n      \\\"\\\",\\n      \\\"describe('${1:Component/Function} - Healthcare Compliance', () => {\\\",\\n      \\\"  beforeEach(() => {\\\",\\n      \\\"    vi.clearAllMocks()\\\",\\n      \\\"  })\\\",\\n      \\\"\\\",\\n      \\\"  describe('LGPD Compliance', () => {\\\",\\n      \\\"    it('should require patient consent before processing data', async () => {\\\",\\n      \\\"      // Test LGPD compliance\\\",\\n      \\\"      ${2:// Add your test implementation}\\\",\\n      \\\"    })\\\",\\n      \\\"  })\\\",\\n      \\\"\\\",\\n      \\\"  describe('ANVISA Compliance', () => {\\\",\\n      \\\"    it('should validate medical procedure authorization', async () => {\\\",\\n      \\\"      // Test ANVISA compliance\\\",\\n      \\\"      ${3:// Add your test implementation}\\\",\\n      \\\"    })\\\",\\n      \\\"  })\\\",\\n      \\\"\\\",\\n      \\\"  describe('CFM Requirements', () => {\\\",\\n      \\\"    it('should verify medical professional credentials', async () => {\\\",\\n      \\\"      // Test CFM compliance\\\",\\n      \\\"      ${4:// Add your test implementation}\\\",\\n      \\\"    })\\\",\\n      \\\"  })\\\",\\n      \\\"})\\\"\\n    ],\\n    \\\"description\\\": \\\"Create a comprehensive healthcare compliance test suite\\\"\\n  },\\n\\n  \\\"Patient Data Validation\\\": {\\n    \\\"prefix\\\": \\\"validate-patient\\\",\\n    \\\"body\\\": [\\n      \\\"const validatePatientData = (patientData: PatientData): ValidationResult => {\\\",\\n      \\\"  const errors: string[] = []\\\",\\n      \\\"\\\",\\n      \\\"  // CPF validation\\\",\\n      \\\"  if (!validateCPF(patientData.cpf)) {\\\",\\n      \\\"    errors.push('Invalid CPF format')\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  // LGPD consent validation\\\", \\n      \\\"  if (!patientData.lgpdConsent?.granted) {\\\",\\n      \\\"    errors.push('LGPD consent is required')\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  // Required fields validation\\\",\\n      \\\"  if (!patientData.name?.trim()) {\\\",\\n      \\\"    errors.push('Patient name is required')\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  if (!patientData.email?.trim()) {\\\",\\n      \\\"    errors.push('Patient email is required')\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  return {\\\",\\n      \\\"    isValid: errors.length === 0,\\\",\\n      \\\"    errors,\\\",\\n      \\\"    patientData: errors.length === 0 ? patientData : null\\\",\\n      \\\"  }\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Create patient data validation function with LGPD compliance\\\"\\n  },\\n\\n  \\\"Medical Record Component\\\": {\\n    \\\"prefix\\\": \\\"comp-medical-record\\\",\\n    \\\"body\\\": [\\n      \\\"interface ${1:MedicalRecord}Props {\\\",\\n      \\\"  patientId: string\\\",\\n      \\\"  doctorId: string\\\",\\n      \\\"  treatmentType: string\\\",\\n      \\\"  onSave?: (record: MedicalRecord) => void\\\",\\n      \\\"  onCancel?: () => void\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"export function ${1:MedicalRecord}({\\\",\\n      \\\"  patientId,\\\",\\n      \\\"  doctorId,\\\",\\n      \\\"  treatmentType,\\\",\\n      \\\"  onSave,\\\",\\n      \\\"  onCancel\\\",\\n      \\\"}: ${1:MedicalRecord}Props) {\\\",\\n      \\\"  const [recordData, setRecordData] = useState<Partial<MedicalRecord>>({})\\\",\\n      \\\"\\\",\\n      \\\"  const handleSave = async () => {\\\",\\n      \\\"    // Validate medical record data\\\",\\n      \\\"    // Ensure ANVISA compliance for procedures\\\",\\n      \\\"    // Record audit trail for LGPD compliance\\\",\\n      \\\"    // Apply digital signature for CFM compliance\\\",\\n      \\\"    \\\",\\n      \\\"    ${2:// Implementation here}\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  return (\\\",\\n      \\\"    <div className=\\\\\\\"medical-record-form\\\\\\\">\\\",\\n      \\\"      {/* Medical record form implementation */}\\\",\\n      \\\"      ${3:// Add your JSX here}\\\",\\n      \\\"    </div>\\\",\\n      \\\"  )\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Create a medical record component with healthcare compliance\\\"\\n  },\\n\\n  \\\"LGPD Consent Hook\\\": {\\n    \\\"prefix\\\": \\\"hook-lgpd\\\",\\n    \\\"body\\\": [\\n      \\\"export function useLGPDConsent(patientId: string) {\\\",\\n      \\\"  const [consent, setConsent] = useState<LGPDConsent | null>(null)\\\",\\n      \\\"  const [loading, setLoading] = useState(false)\\\",\\n      \\\"\\\",\\n      \\\"  const recordConsent = async (purposes: string[]) => {\\\",\\n      \\\"    setLoading(true)\\\",\\n      \\\"    try {\\\",\\n      \\\"      const consentRecord = await supabase\\\",\\n      \\\"        .from('lgpd_consents')\\\",\\n      \\\"        .insert({\\\",\\n      \\\"          patient_id: patientId,\\\",\\n      \\\"          purposes,\\\",\\n      \\\"          granted_at: new Date().toISOString(),\\\",\\n      \\\"          ip_address: await getClientIP(),\\\",\\n      \\\"          user_agent: navigator.userAgent\\\",\\n      \\\"        })\\\",\\n      \\\"        .select()\\\",\\n      \\\"        .single()\\\",\\n      \\\"\\\",\\n      \\\"      setConsent(consentRecord.data)\\\",\\n      \\\"      return consentRecord.data\\\",\\n      \\\"    } catch (error) {\\\",\\n      \\\"      console.error('Error recording LGPD consent:', error)\\\",\\n      \\\"      throw error\\\",\\n      \\\"    } finally {\\\",\\n      \\\"      setLoading(false)\\\",\\n      \\\"    }\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  const withdrawConsent = async (consentId: string) => {\\\",\\n      \\\"    // Implementation for consent withdrawal\\\",\\n      \\\"    ${1:// Add withdrawal logic}\\\",\\n      \\\"  }\\\",\\n      \\\"\\\",\\n      \\\"  return {\\\",\\n      \\\"    consent,\\\",\\n      \\\"    loading,\\\",\\n      \\\"    recordConsent,\\\",\\n      \\\"    withdrawConsent,\\\",\\n      \\\"  }\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Create LGPD consent management hook\\\"\\n  },\\n\\n  \\\"ANVISA Compliance Check\\\": {\\n    \\\"prefix\\\": \\\"anvisa-check\\\",\\n    \\\"body\\\": [\\n      \\\"const validateANVISACompliance = async (productOrProcedure: {\\\",\\n      \\\"  type: 'product' | 'procedure'\\\",\\n      \\\"  code: string\\\",\\n      \\\"  name: string\\\",\\n      \\\"}) => {\\\",\\n      \\\"  try {\\\",\\n      \\\"    // Check ANVISA registration database\\\",\\n      \\\"    const response = await fetch('/api/anvisa/validate', {\\\",\\n      \\\"      method: 'POST',\\\",\\n      \\\"      headers: { 'Content-Type': 'application/json' },\\\",\\n      \\\"      body: JSON.stringify(productOrProcedure)\\\",\\n      \\\"    })\\\",\\n      \\\"\\\",\\n      \\\"    const validation = await response.json()\\\",\\n      \\\"\\\",\\n      \\\"    if (!validation.isValid) {\\\",\\n      \\\"      throw new Error(`ANVISA validation failed: ${validation.reason}`)\\\",\\n      \\\"    }\\\",\\n      \\\"\\\",\\n      \\\"    // Log compliance check for audit\\\",\\n      \\\"    await auditLogger.log({\\\",\\n      \\\"      action: 'anvisa_compliance_check',\\\",\\n      \\\"      resource: productOrProcedure.code,\\\",\\n      \\\"      result: 'valid',\\\",\\n      \\\"      timestamp: new Date().toISOString()\\\",\\n      \\\"    })\\\",\\n      \\\"\\\",\\n      \\\"    return validation\\\",\\n      \\\"  } catch (error) {\\\",\\n      \\\"    console.error('ANVISA compliance check failed:', error)\\\",\\n      \\\"    throw error\\\",\\n      \\\"  }\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Create ANVISA compliance validation function\\\"\\n  },\\n\\n  \\\"CFM Digital Signature\\\": {\\n    \\\"prefix\\\": \\\"cfm-signature\\\",\\n    \\\"body\\\": [\\n      \\\"const applyDigitalSignature = async (document: MedicalDocument, doctorId: string) => {\\\",\\n      \\\"  try {\\\",\\n      \\\"    // Validate doctor's CFM credentials\\\",\\n      \\\"    const doctor = await validateCFMCredentials(doctorId)\\\",\\n      \\\"    if (!doctor.isValid) {\\\",\\n      \\\"      throw new Error('Invalid CFM credentials')\\\",\\n      \\\"    }\\\",\\n      \\\"\\\",\\n      \\\"    // Generate digital signature\\\",\\n      \\\"    const signature = await crypto.subtle.sign(\\\",\\n      \\\"      'RSASSA-PKCS1-v1_5',\\\",\\n      \\\"      doctor.privateKey,\\\",\\n      \\\"      new TextEncoder().encode(JSON.stringify(document))\\\",\\n      \\\"    )\\\",\\n      \\\"\\\",\\n      \\\"    // Create signature record\\\",\\n      \\\"    const signatureRecord = {\\\",\\n      \\\"      documentId: document.id,\\\",\\n      \\\"      doctorId,\\\",\\n      \\\"      crmNumber: doctor.crmNumber,\\\",\\n      \\\"      signature: Array.from(new Uint8Array(signature)),\\\",\\n      \\\"      timestamp: new Date().toISOString(),\\\",\\n      \\\"      algorithm: 'RSASSA-PKCS1-v1_5'\\\",\\n      \\\"    }\\\",\\n      \\\"\\\",\\n      \\\"    // Store signature in database\\\",\\n      \\\"    await supabase\\\",\\n      \\\"      .from('digital_signatures')\\\",\\n      \\\"      .insert(signatureRecord)\\\",\\n      \\\"\\\",\\n      \\\"    return signatureRecord\\\",\\n      \\\"  } catch (error) {\\\",\\n      \\\"    console.error('Digital signature failed:', error)\\\",\\n      \\\"    throw error\\\",\\n      \\\"  }\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Create CFM digital signature function\\\"\\n  },\\n\\n  \\\"Healthcare API Route\\\": {\\n    \\\"prefix\\\": \\\"api-healthcare\\\",\\n    \\\"body\\\": [\\n      \\\"import { NextRequest, NextResponse } from 'next/server'\\\",\\n      \\\"import { createClient } from '@/lib/supabase/server'\\\",\\n      \\\"import { validateHealthcareAccess } from '@/lib/auth/healthcare'\\\",\\n      \\\"\\\",\\n      \\\"export async function ${1:GET}(request: NextRequest) {\\\",\\n      \\\"  try {\\\",\\n      \\\"    // Validate authentication and healthcare access\\\",\\n      \\\"    const user = await validateHealthcareAccess(request)\\\",\\n      \\\"    if (!user) {\\\",\\n      \\\"      return NextResponse.json(\\\",\\n      \\\"        { error: 'Unauthorized access to healthcare data' },\\\",\\n      \\\"        { status: 401 }\\\",\\n      \\\"      )\\\",\\n      \\\"    }\\\",\\n      \\\"\\\",\\n      \\\"    // Create Supabase client with RLS\\\",\\n      \\\"    const supabase = createClient()\\\",\\n      \\\"\\\",\\n      \\\"    // Healthcare operation with audit logging\\\",\\n      \\\"    ${2:// Your healthcare API logic here}\\\",\\n      \\\"\\\",\\n      \\\"    // Log access for LGPD compliance\\\",\\n      \\\"    await auditLogger.logAccess({\\\",\\n      \\\"      userId: user.id,\\\",\\n      \\\"      action: '${3:api_access}',\\\",\\n      \\\"      resource: '${4:resource_name}',\\\",\\n      \\\"      ip: request.headers.get('x-forwarded-for') || 'unknown',\\\",\\n      \\\"      userAgent: request.headers.get('user-agent') || 'unknown'\\\",\\n      \\\"    })\\\",\\n      \\\"\\\",\\n      \\\"    return NextResponse.json({ success: true, data: ${5:result} })\\\",\\n      \\\"  } catch (error) {\\\",\\n      \\\"    console.error('Healthcare API error:', error)\\\",\\n      \\\"    return NextResponse.json(\\\",\\n      \\\"      { error: 'Internal server error' },\\\",\\n      \\\"      { status: 500 }\\\",\\n      \\\"    )\\\",\\n      \\\"  }\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Create healthcare-compliant API route\\\"\\n  }\\n}\",\"neonpro-global.code-snippets\":\"{\\n\\t// ================================\\n\\t// 🎯 ULTRACITE + BIOME SNIPPETS\\n\\t// ================================\\n\\t\\\"Ultracite React Component\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"urc\\\", \\\"ultracite-component\\\"],\\n\\t\\t\\\"description\\\": \\\"Ultracite-optimized React component with accessibility, performance, and Biome compliance\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { type FC, type ReactNode } from 'react';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${1:ComponentName}Props {\\\",\\n\\t\\t\\t\\\"\\\\tchildren?: ReactNode;\\\",\\n\\t\\t\\t\\\"\\\\tclassName?: string;\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * ${1:ComponentName} - Ultracite-optimized React component\\\",\\n\\t\\t\\t\\\" * @param props - Component props with full type safety\\\",\\n\\t\\t\\t\\\" * @returns JSX.Element with accessibility and performance optimizations\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export const ${1:ComponentName}: FC<${1:ComponentName}Props> = ({\\\",\\n\\t\\t\\t\\\"\\\\tchildren,\\\",\\n\\t\\t\\t\\\"\\\\tclassName,\\\",\\n\\t\\t\\t\\\"\\\\t$3\\\",\\n\\t\\t\\t\\\"}) => {\\\",\\n\\t\\t\\t\\\"\\\\treturn (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t<div\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tclassName={className}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\trole=\\\\\\\"${4:region}\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taria-label=\\\\\\\"${5:Component description}\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{children}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t);\\\",\\n\\t\\t\\t\\\"};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"${1:ComponentName}.displayName = '${1:ComponentName}';\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"Ultracite Custom Hook\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescript,typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"uch\\\", \\\"ultracite-hook\\\"],\\n\\t\\t\\\"description\\\": \\\"Ultracite-optimized custom React hook with TypeScript and performance patterns\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { useState, useCallback, useMemo } from 'react';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${1:HookName}Options {\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${1:HookName}Return {\\\",\\n\\t\\t\\t\\\"\\\\t$3\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * ${1:HookName} - Custom hook with performance optimizations\\\",\\n\\t\\t\\t\\\" * @param options - Hook configuration options\\\",\\n\\t\\t\\t\\\" * @returns Hook state and actions with memoization\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export const ${1:HookName} = (options: ${1:HookName}Options): ${1:HookName}Return => {\\\",\\n\\t\\t\\t\\\"\\\\tconst [$4, set$4] = useState$5();\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tconst handleAction = useCallback(() => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t$6\\\",\\n\\t\\t\\t\\\"\\\\t}, [$7]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tconst memoizedValue = useMemo(() => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\treturn $8;\\\",\\n\\t\\t\\t\\\"\\\\t}, [$9]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\treturn {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t$4,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\thandleAction,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tmemoizedValue,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\\t};\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"Biome Config Generator\\\": {\\n\\t\\t\\\"scope\\\": \\\"json,jsonc\\\",\\n\\t\\t\\\"prefix\\\": [\\\"biome-config\\\", \\\"ubiome\\\"],\\n\\t\\t\\\"description\\\": \\\"Generate Biome configuration with Ultracite patterns and healthcare compliance\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"$schema\\\\\\\": \\\\\\\"https://biomejs.dev/schemas/1.9.4/schema.json\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"organizeImports\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"enabled\\\\\\\": true\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"files\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"include\\\\\\\": [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/*.ts\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/*.tsx\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/*.js\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/*.jsx\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"ignore\\\\\\\": [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"node_modules/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"dist/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\".next/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"coverage/**\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t]\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"linter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"enabled\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"rules\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"a11y\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"security\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"performance\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"formatter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"enabled\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"formatWithErrors\\\\\\\": false,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"indentStyle\\\\\\\": \\\\\\\"tab\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"indentWidth\\\\\\\": 2,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"lineWidth\\\\\\\": 100,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"lineEnding\\\\\\\": \\\\\\\"lf\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"javascript\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"formatter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"jsxQuoteStyle\\\\\\\": \\\\\\\"double\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"quoteProperties\\\\\\\": \\\\\\\"asNeeded\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"trailingCommas\\\\\\\": \\\\\\\"es5\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"semicolons\\\\\\\": \\\\\\\"always\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"arrowParentheses\\\\\\\": \\\\\\\"always\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"bracketSpacing\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"bracketSameLine\\\\\\\": false\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"overrides\\\\\\\": [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"include\\\\\\\": [\\\\\\\"**/*.test.ts\\\\\\\", \\\\\\\"**/*.test.tsx\\\\\\\"],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"linter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"rules\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"suspicious\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noExplicitAny\\\\\\\": \\\\\\\"off\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t]\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"Ultracite Error Boundary\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"ueb\\\", \\\"error-boundary\\\"],\\n\\t\\t\\\"description\\\": \\\"Ultracite-optimized Error Boundary with healthcare compliance and accessibility\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { Component, type ErrorInfo, type ReactNode } from 'react';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${1:ErrorBoundary}Props {\\\",\\n\\t\\t\\t\\\"\\\\tchildren: ReactNode;\\\",\\n\\t\\t\\t\\\"\\\\tfallback?: ReactNode;\\\",\\n\\t\\t\\t\\\"\\\\tonError?: (error: Error, errorInfo: ErrorInfo) => void;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${1:ErrorBoundary}State {\\\",\\n\\t\\t\\t\\\"\\\\thasError: boolean;\\\",\\n\\t\\t\\t\\\"\\\\terror?: Error;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * ${1:ErrorBoundary} - Healthcare-compliant error boundary\\\",\\n\\t\\t\\t\\\" * Follows LGPD data protection and accessibility standards\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export class ${1:ErrorBoundary} extends Component<${1:ErrorBoundary}Props, ${1:ErrorBoundary}State> {\\\",\\n\\t\\t\\t\\\"\\\\tconstructor(props: ${1:ErrorBoundary}Props) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tsuper(props);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tthis.state = { hasError: false };\\\",\\n\\t\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tstatic getDerivedStateFromError(error: Error): ${1:ErrorBoundary}State {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\treturn { hasError: true, error };\\\",\\n\\t\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tcomponentDidCatch(error: Error, errorInfo: ErrorInfo): void {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Healthcare compliance: No sensitive data in logs\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconsole.error('ErrorBoundary caught an error:', {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tmessage: error.message,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tstack: error.stack,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tcomponentStack: errorInfo.componentStack,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Call external error handler if provided\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tthis.props.onError?.(error, errorInfo);\\\",\\n\\t\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\trender(): ReactNode {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tif (this.state.hasError) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\treturn (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tthis.props.fallback || (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<div\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trole=\\\\\\\"alert\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-live=\\\\\\\"assertive\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tclassName=\\\\\\\"error-boundary\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<h2>Ops! Algo deu errado</h2>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<p>Por favor, recarregue a página ou entre em contato com o suporte.</p>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<button\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttype=\\\\\\\"button\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tonClick={() => window.location.reload()}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-label=\\\\\\\"Recarregar página\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tRecarregar Página\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</button>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t)\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\treturn this.props.children;\\\",\\n\\t\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"Ultracite API Route\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescript\\\",\\n\\t\\t\\\"prefix\\\": [\\\"uapi\\\", \\\"api-route\\\"],\\n\\t\\t\\\"description\\\": \\\"Ultracite-optimized API route with healthcare compliance and error handling\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { type NextRequest, NextResponse } from 'next/server';\\\",\\n\\t\\t\\t\\\"import { z } from 'zod';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"// Request validation schema\\\",\\n\\t\\t\\t\\\"const ${1:requestSchema} = z.object({\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"// Response type definition\\\",\\n\\t\\t\\t\\\"interface ${3:ResponseType} {\\\",\\n\\t\\t\\t\\\"\\\\tsuccess: boolean;\\\",\\n\\t\\t\\t\\\"\\\\tdata?: $4;\\\",\\n\\t\\t\\t\\\"\\\\terror?: string;\\\",\\n\\t\\t\\t\\\"\\\\ttimestamp: string;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * ${5:API Route Name} - Healthcare-compliant API endpoint\\\",\\n\\t\\t\\t\\\" * @param request - Next.js request object\\\",\\n\\t\\t\\t\\\" * @returns JSON response with LGPD compliance\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export async function ${6:GET}(request: NextRequest): Promise<NextResponse<${3:ResponseType}>> {\\\",\\n\\t\\t\\t\\\"\\\\ttry {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Parse and validate request data\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst url = new URL(request.url);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst searchParams = Object.fromEntries(url.searchParams);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst validatedData = ${1:requestSchema}.parse(searchParams);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Healthcare compliance: Audit log (no sensitive data)\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconsole.log('API Request:', {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tmethod: '${6:GET}',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tpath: url.pathname,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tuserAgent: request.headers.get('user-agent'),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Main business logic\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst result = await $7;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\treturn NextResponse.json(\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tsuccess: true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tdata: result,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{ status: 200 }\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t);\\\",\\n\\t\\t\\t\\\"\\\\t} catch (error) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Healthcare compliance: Error logging without sensitive data\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst errorMessage = error instanceof Error ? error.message : 'Unknown error';\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconsole.error('API Error:', {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tmethod: '${6:GET}',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\terror: errorMessage,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\treturn NextResponse.json(\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tsuccess: false,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\terror: 'Internal server error',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{ status: 500 }\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t);\\\",\\n\\t\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"Ultracite Form Component\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"uform\\\", \\\"form-component\\\"],\\n\\t\\t\\\"description\\\": \\\"Ultracite-optimized form component with validation, accessibility, and healthcare compliance\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { type FC, type FormEvent } from 'react';\\\",\\n\\t\\t\\t\\\"import { useForm } from 'react-hook-form';\\\",\\n\\t\\t\\t\\\"import { zodResolver } from '@hookform/resolvers/zod';\\\",\\n\\t\\t\\t\\\"import { z } from 'zod';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"// Form validation schema\\\",\\n\\t\\t\\t\\\"const ${1:formSchema} = z.object({\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"type ${3:FormData} = z.infer<typeof ${1:formSchema}>;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${4:FormComponent}Props {\\\",\\n\\t\\t\\t\\\"\\\\tonSubmit: (data: ${3:FormData}) => Promise<void> | void;\\\",\\n\\t\\t\\t\\\"\\\\tloading?: boolean;\\\",\\n\\t\\t\\t\\\"\\\\tinitialData?: Partial<${3:FormData}>;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * ${4:FormComponent} - Healthcare-compliant form with accessibility\\\",\\n\\t\\t\\t\\\" * @param props - Form component props\\\",\\n\\t\\t\\t\\\" * @returns Accessible form with LGPD compliance\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export const ${4:FormComponent}: FC<${4:FormComponent}Props> = ({\\\",\\n\\t\\t\\t\\\"\\\\tonSubmit,\\\",\\n\\t\\t\\t\\\"\\\\tloading = false,\\\",\\n\\t\\t\\t\\\"\\\\tinitialData,\\\",\\n\\t\\t\\t\\\"}) => {\\\",\\n\\t\\t\\t\\\"\\\\tconst {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tregister,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\thandleSubmit,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tformState: { errors, isSubmitting },\\\",\\n\\t\\t\\t\\\"\\\\t\\\\treset,\\\",\\n\\t\\t\\t\\\"\\\\t} = useForm<${3:FormData}>({\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tresolver: zodResolver(${1:formSchema}),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tdefaultValues: initialData,\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tconst handleFormSubmit = async (data: ${3:FormData}) => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\ttry {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tawait onSubmit(data);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\treset();\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t} catch (error) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tconsole.error('Form submission error:', error);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\treturn (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t<form\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tonSubmit={handleSubmit(handleFormSubmit)}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tnoValidate\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taria-label=\\\\\\\"${5:Form description}\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t<fieldset disabled={loading || isSubmitting}>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<legend className=\\\\\\\"sr-only\\\\\\\">${5:Form description}</legend>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{/* Form fields */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<div className=\\\\\\\"form-group\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<label htmlFor=\\\\\\\"${6:fieldName}\\\\\\\" className=\\\\\\\"form-label\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t${7:Field Label}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span aria-hidden=\\\\\\\"true\\\\\\\">*</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t</label>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<input\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"${6:fieldName}\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttype=\\\\\\\"${8:text}\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{...register('${6:fieldName}')}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-invalid={errors.${6:fieldName} ? 'true' : 'false'}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-describedby={errors.${6:fieldName} ? '${6:fieldName}-error' : undefined}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tclassName=\\\\\\\"form-input\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trequired\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t/>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t{errors.${6:fieldName} && (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<div\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"${6:fieldName}-error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trole=\\\\\\\"alert\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-live=\\\\\\\"polite\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tclassName=\\\\\\\"form-error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{errors.${6:fieldName}?.message}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t)}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{/* Submit button */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<button\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\ttype=\\\\\\\"submit\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tdisabled={loading || isSubmitting}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\taria-label={isSubmitting ? 'Enviando...' : '${9:Submit button text}'}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tclassName=\\\\\\\"form-submit\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t{isSubmitting ? 'Enviando...' : '${9:Submit button text}'}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</button>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t</fieldset>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t</form>\\\",\\n\\t\\t\\t\\\"\\\\t);\\\",\\n\\t\\t\\t\\\"};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"${4:FormComponent}.displayName = '${4:FormComponent}';\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"Ultracite Test Suite\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescript,typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"utest\\\", \\\"test-suite\\\"],\\n\\t\\t\\\"description\\\": \\\"Ultracite-optimized test suite with Vitest, React Testing Library, and healthcare compliance\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\\\",\\n\\t\\t\\t\\\"import { render, screen, fireEvent, waitFor, cleanup } from '@testing-library/react';\\\",\\n\\t\\t\\t\\\"import userEvent from '@testing-library/user-event';\\\",\\n\\t\\t\\t\\\"import { ${1:ComponentName} } from './${2:component-file}';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"// Healthcare compliance: Mock sensitive data\\\",\\n\\t\\t\\t\\\"const mockProps = {\\\",\\n\\t\\t\\t\\\"\\\\t$3\\\",\\n\\t\\t\\t\\\"};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"describe('${1:ComponentName}', () => {\\\",\\n\\t\\t\\t\\\"\\\\tbeforeEach(() => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Setup test environment\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tvi.clearAllMocks();\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tafterEach(() => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Cleanup for healthcare compliance\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tcleanup();\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tit('should render correctly', () => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\trender(<${1:ComponentName} {...mockProps} />);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(screen.getByRole('${4:region}')).toBeInTheDocument();\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(screen.getByLabelText('${5:aria-label}')).toBeInTheDocument();\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tit('should be accessible', async () => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\trender(<${1:ComponentName} {...mockProps} />);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Accessibility testing\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst element = screen.getByRole('${4:region}');\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(element).toHaveAttribute('aria-label');\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(element).not.toHaveAttribute('aria-hidden', 'true');\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tit('should handle user interactions', async () => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst user = userEvent.setup();\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst mockHandler = vi.fn();\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\trender(<${1:ComponentName} {...mockProps} onAction={mockHandler} />);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst button = screen.getByRole('button');\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tawait user.click(button);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(mockHandler).toHaveBeenCalledOnce();\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tit('should comply with healthcare data protection', () => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\trender(<${1:ComponentName} {...mockProps} />);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// LGPD compliance: No sensitive data in DOM attributes\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst element = screen.getByRole('${4:region}');\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(element).not.toHaveAttribute('data-patient-id');\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(element).not.toHaveAttribute('data-cpf');\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(element).not.toHaveAttribute('data-medical-record');\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tit('should handle errors gracefully', async () => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst mockError = vi.fn();\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconsole.error = mockError;\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst invalidProps = { ...mockProps, invalidProp: null };\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\trender(<${1:ComponentName} {...invalidProps} />);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Error should be logged but component should render\\\",\\n\\t\\t\\t\\\"\\\\t\\\\texpect(screen.getByRole('${4:region}')).toBeInTheDocument();\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"});\\\"\\n\\t\\t]\\n\\t}\\n}\",\"neonpro-healthcare-global.code-snippets\":\"{\\n\\t// ================================\\n\\t// 🏥 HEALTHCARE COMPLIANCE SNIPPETS\\n\\t// ================================\\n\\t\\\"LGPD Compliant Component\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"lgpd\\\", \\\"lgpd-component\\\"],\\n\\t\\t\\\"description\\\": \\\"LGPD-compliant React component with data protection and audit logging\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { type FC, type ReactNode, useCallback } from 'react';\\\",\\n\\t\\t\\t\\\"import { useLGPDAudit } from '@neonpro/compliance';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${1:ComponentName}Props {\\\",\\n\\t\\t\\t\\\"\\\\tchildren?: ReactNode;\\\",\\n\\t\\t\\t\\\"\\\\tpatientData?: {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tid: string;\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tname: string;\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// No CPF, medical records, or sensitive data in props\\\",\\n\\t\\t\\t\\\"\\\\t};\\\",\\n\\t\\t\\t\\\"\\\\tonDataAccess?: (auditLog: LGPDAuditLog) => void;\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * ${1:ComponentName} - LGPD Article 7 compliant component\\\",\\n\\t\\t\\t\\\" * Implements data minimization and purpose limitation principles\\\",\\n\\t\\t\\t\\\" * @param props - Component props with LGPD compliance\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export const ${1:ComponentName}: FC<${1:ComponentName}Props> = ({\\\",\\n\\t\\t\\t\\\"\\\\tchildren,\\\",\\n\\t\\t\\t\\\"\\\\tpatientData,\\\",\\n\\t\\t\\t\\\"\\\\tonDataAccess,\\\",\\n\\t\\t\\t\\\"\\\\t$3\\\",\\n\\t\\t\\t\\\"}) => {\\\",\\n\\t\\t\\t\\\"\\\\tconst { logDataAccess, logDataProcessing } = useLGPDAudit();\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t// LGPD Article 6: Data processing lawful basis\\\",\\n\\t\\t\\t\\\"\\\\tconst handleDataAccess = useCallback(async () => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tif (patientData) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t// Log data access for LGPD compliance\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tconst auditLog = await logDataAccess({\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tdataSubject: patientData.id,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tpurpose: '${4:healthcare_consultation}',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tlegalBasis: 'vital_interests', // LGPD Article 7, II\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tprocessor: 'neonpro_system',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tonDataAccess?.(auditLog);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t}, [patientData, onDataAccess, logDataAccess]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\treturn (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t<div\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\trole=\\\\\\\"region\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taria-label=\\\\\\\"${5:Dados protegidos por LGPD}\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tdata-compliance=\\\\\\\"lgpd\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tdata-purpose=\\\\\\\"${4:healthcare_consultation}\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{/* LGPD Notice */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t<div className=\\\\\\\"lgpd-notice\\\\\\\" role=\\\\\\\"note\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<small>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t🔒 Dados protegidos pela LGPD - Lei 13.709/2018\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</small>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{children}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t);\\\",\\n\\t\\t\\t\\\"};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"${1:ComponentName}.displayName = '${1:ComponentName}';\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"ANVISA Compliant Form\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"anvisa\\\", \\\"anvisa-form\\\"],\\n\\t\\t\\\"description\\\": \\\"ANVISA-compliant medical form with regulatory validation and audit trails\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { type FC, type FormEvent } from 'react';\\\",\\n\\t\\t\\t\\\"import { useForm } from 'react-hook-form';\\\",\\n\\t\\t\\t\\\"import { zodResolver } from '@hookform/resolvers/zod';\\\",\\n\\t\\t\\t\\\"import { z } from 'zod';\\\",\\n\\t\\t\\t\\\"import { useANVISAAudit } from '@neonpro/compliance';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"// ANVISA RDC 44/2009 - Medical record validation\\\",\\n\\t\\t\\t\\\"const ${1:medicalFormSchema} = z.object({\\\",\\n\\t\\t\\t\\\"\\\\tpatientId: z.string().min(1, 'ID do paciente obrigatório'),\\\",\\n\\t\\t\\t\\\"\\\\tprocedureCode: z.string().regex(/^[A-Z0-9]{5,10}$/, 'Código ANVISA inválido'),\\\",\\n\\t\\t\\t\\\"\\\\tmedicalRecord: z.string().min(10, 'Prontuário médico obrigatório'),\\\",\\n\\t\\t\\t\\\"\\\\tphysicianCRM: z.string().regex(/^[0-9]{4,6}\\\\/[A-Z]{2}$/, 'CRM inválido'),\\\",\\n\\t\\t\\t\\\"\\\\tobservations: z.string().max(1000, 'Máximo 1000 caracteres'),\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"type ${3:MedicalFormData} = z.infer<typeof ${1:medicalFormSchema}>;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${4:ANVISAForm}Props {\\\",\\n\\t\\t\\t\\\"\\\\tonSubmit: (data: ${3:MedicalFormData}) => Promise<void>;\\\",\\n\\t\\t\\t\\\"\\\\tinitialData?: Partial<${3:MedicalFormData}>;\\\",\\n\\t\\t\\t\\\"\\\\treadOnly?: boolean;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * ${4:ANVISAForm} - RDC 44/2009 compliant medical form\\\",\\n\\t\\t\\t\\\" * Implements ANVISA regulations for medical records\\\",\\n\\t\\t\\t\\\" * @param props - Form props with ANVISA compliance\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export const ${4:ANVISAForm}: FC<${4:ANVISAForm}Props> = ({\\\",\\n\\t\\t\\t\\\"\\\\tonSubmit,\\\",\\n\\t\\t\\t\\\"\\\\tinitialData,\\\",\\n\\t\\t\\t\\\"\\\\treadOnly = false,\\\",\\n\\t\\t\\t\\\"}) => {\\\",\\n\\t\\t\\t\\\"\\\\tconst { logMedicalRecord, validateCompliance } = useANVISAAudit();\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\tconst {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tregister,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\thandleSubmit,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tformState: { errors, isSubmitting },\\\",\\n\\t\\t\\t\\\"\\\\t\\\\twatch,\\\",\\n\\t\\t\\t\\\"\\\\t} = useForm<${3:MedicalFormData}>({\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tresolver: zodResolver(${1:medicalFormSchema}),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tdefaultValues: initialData,\\\",\\n\\t\\t\\t\\\"\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t// ANVISA compliance validation\\\",\\n\\t\\t\\t\\\"\\\\tconst handleFormSubmit = async (data: ${3:MedicalFormData}) => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\ttry {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t// Validate ANVISA compliance before submission\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tconst complianceCheck = await validateCompliance(data);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tif (!complianceCheck.isCompliant) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tthrow new Error(`ANVISA Compliance Error: ${complianceCheck.violations.join(', ')}`);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t// Log medical record access for audit\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tawait logMedicalRecord({\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tpatientId: data.patientId,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tphysicianCRM: data.physicianCRM,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\taction: 'create_record',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tregulatoryBasis: 'RDC_44_2009',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tawait onSubmit(data);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t} catch (error) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tconsole.error('ANVISA Form Error:', error);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t// Show user-friendly error without sensitive data\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\talert('Erro de conformidade ANVISA. Verifique os dados inseridos.');\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\treturn (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t<form\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tonSubmit={handleSubmit(handleFormSubmit)}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tnoValidate\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tdata-compliance=\\\\\\\"anvisa-rdc-44\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taria-label=\\\\\\\"Formulário médico ANVISA\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t<fieldset disabled={readOnly || isSubmitting}>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<legend>Dados Médicos - ANVISA RDC 44/2009</legend>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{/* Patient ID Field */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<div className=\\\\\\\"medical-field\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<label htmlFor=\\\\\\\"patientId\\\\\\\" className=\\\\\\\"medical-label\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tID do Paciente <span aria-hidden=\\\\\\\"true\\\\\\\">*</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t</label>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<input\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"patientId\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttype=\\\\\\\"text\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{...register('patientId')}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-invalid={errors.patientId ? 'true' : 'false'}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-describedby=\\\\\\\"patientId-error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\treadOnly={readOnly}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trequired\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t/>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t{errors.patientId && (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<div id=\\\\\\\"patientId-error\\\\\\\" role=\\\\\\\"alert\\\\\\\" className=\\\\\\\"field-error\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{errors.patientId.message}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t)}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{/* Procedure Code Field */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<div className=\\\\\\\"medical-field\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<label htmlFor=\\\\\\\"procedureCode\\\\\\\" className=\\\\\\\"medical-label\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tCódigo do Procedimento ANVISA <span aria-hidden=\\\\\\\"true\\\\\\\">*</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t</label>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<input\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"procedureCode\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttype=\\\\\\\"text\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{...register('procedureCode')}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-invalid={errors.procedureCode ? 'true' : 'false'}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-describedby=\\\\\\\"procedureCode-error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tplaceholder=\\\\\\\"Ex: ABC123\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\treadOnly={readOnly}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trequired\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t/>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t{errors.procedureCode && (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<div id=\\\\\\\"procedureCode-error\\\\\\\" role=\\\\\\\"alert\\\\\\\" className=\\\\\\\"field-error\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{errors.procedureCode.message}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t)}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{/* Physician CRM Field */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<div className=\\\\\\\"medical-field\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<label htmlFor=\\\\\\\"physicianCRM\\\\\\\" className=\\\\\\\"medical-label\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tCRM do Médico <span aria-hidden=\\\\\\\"true\\\\\\\">*</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t</label>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<input\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"physicianCRM\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttype=\\\\\\\"text\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{...register('physicianCRM')}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-invalid={errors.physicianCRM ? 'true' : 'false'}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-describedby=\\\\\\\"physicianCRM-error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tplaceholder=\\\\\\\"Ex: 123456/SP\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\treadOnly={readOnly}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trequired\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t/>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t{errors.physicianCRM && (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<div id=\\\\\\\"physicianCRM-error\\\\\\\" role=\\\\\\\"alert\\\\\\\" className=\\\\\\\"field-error\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{errors.physicianCRM.message}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t)}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{/* Submit Button */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<button\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\ttype=\\\\\\\"submit\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tdisabled={readOnly || isSubmitting}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\taria-label=\\\\\\\"Salvar registro médico\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tclassName=\\\\\\\"medical-submit\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t{isSubmitting ? 'Salvando...' : 'Salvar Registro'}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</button>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t</fieldset>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{/* ANVISA Compliance Notice */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t<div className=\\\\\\\"compliance-notice\\\\\\\" role=\\\\\\\"note\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<small>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t📋 Formulário em conformidade com ANVISA RDC 44/2009\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<br />\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tTodos os dados são auditados conforme regulamentação.\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</small>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t</form>\\\",\\n\\t\\t\\t\\\"\\\\t);\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"CFM Standards Component\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"cfm\\\", \\\"cfm-component\\\"],\\n\\t\\t\\\"description\\\": \\\"CFM (Conselho Federal de Medicina) compliant component with medical ethics standards\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { type FC, useState, useCallback } from 'react';\\\",\\n\\t\\t\\t\\\"import { useCFMCompliance } from '@neonpro/compliance';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${1:CFMComponent}Props {\\\",\\n\\t\\t\\t\\\"\\\\tmedicalData: {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tphysicianCRM: string;\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tpatientConsent: boolean;\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tprocedureType: 'consultation' | 'procedure' | 'diagnosis';\\\",\\n\\t\\t\\t\\\"\\\\t};\\\",\\n\\t\\t\\t\\\"\\\\tonEthicsViolation?: (violation: CFMEthicsViolation) => void;\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * ${1:CFMComponent} - CFM Resolution compliance component\\\",\\n\\t\\t\\t\\\" * Implements Brazilian medical ethics standards and professional conduct\\\",\\n\\t\\t\\t\\\" * @param props - Component props with CFM compliance\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export const ${1:CFMComponent}: FC<${1:CFMComponent}Props> = ({\\\",\\n\\t\\t\\t\\\"\\\\tmedicalData,\\\",\\n\\t\\t\\t\\\"\\\\tonEthicsViolation,\\\",\\n\\t\\t\\t\\\"\\\\t$3\\\",\\n\\t\\t\\t\\\"}) => {\\\",\\n\\t\\t\\t\\\"\\\\tconst { validateMedicalEthics, logProfessionalConduct } = useCFMCompliance();\\\",\\n\\t\\t\\t\\\"\\\\tconst [ethicsValidated, setEthicsValidated] = useState(false);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t// CFM Resolution 1.974/2011 - Medical ethics validation\\\",\\n\\t\\t\\t\\\"\\\\tconst handleEthicsValidation = useCallback(async () => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\ttry {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tconst ethicsCheck = await validateMedicalEthics({\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tphysicianCRM: medicalData.physicianCRM,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tpatientConsent: medicalData.patientConsent,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tprocedureType: medicalData.procedureType,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tif (!ethicsCheck.isCompliant) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t// Log ethics violation for CFM review\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tconst violation: CFMEthicsViolation = {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\ttype: 'consent_violation',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tresolution: 'CFM_1974_2011',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tdescription: ethicsCheck.violations.join('; '),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tseverity: 'high',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tonEthicsViolation?.(violation);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\treturn;\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t// Log professional conduct for audit\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tawait logProfessionalConduct({\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tphysicianCRM: medicalData.physicianCRM,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\taction: 'ethics_validation_passed',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\tresolution: 'CFM_1974_2011',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tsetEthicsValidated(true);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t} catch (error) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tconsole.error('CFM Ethics Validation Error:', error);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t}, [medicalData, validateMedicalEthics, logProfessionalConduct, onEthicsViolation]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t// CFM Resolution 2.314/2022 - Patient consent requirements\\\",\\n\\t\\t\\t\\\"\\\\tconst handlePatientConsent = useCallback(() => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tif (!medicalData.patientConsent) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\talert('Consentimento do paciente obrigatório conforme Resolução CFM 2.314/2022');\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\treturn false;\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\treturn true;\\\",\\n\\t\\t\\t\\\"\\\\t}, [medicalData.patientConsent]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\treturn (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t<div\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\trole=\\\\\\\"region\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taria-label=\\\\\\\"Área médica regulamentada pelo CFM\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tdata-compliance=\\\\\\\"cfm\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tdata-resolution=\\\\\\\"CFM-1974-2011\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{/* CFM Ethics Header */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t<header className=\\\\\\\"cfm-ethics-header\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<h3>Área Médica Regulamentada</h3>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<div className=\\\\\\\"ethics-status\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t{ethicsValidated ? (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span className=\\\\\\\"ethics-validated\\\\\\\" role=\\\\\\\"status\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t✅ Ética médica validada\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t) : (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<button\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttype=\\\\\\\"button\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tonClick={handleEthicsValidation}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\taria-label=\\\\\\\"Validar ética médica\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tclassName=\\\\\\\"validate-ethics-btn\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t🏥 Validar Ética Médica\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</button>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t)}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t</header>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{/* Patient Consent Section */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t<section className=\\\\\\\"patient-consent-section\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<h4>Consentimento do Paciente</h4>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<div className=\\\\\\\"consent-status\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t{medicalData.patientConsent ? (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span className=\\\\\\\"consent-granted\\\\\\\" role=\\\\\\\"status\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t✅ Consentimento obtido (CFM 2.314/2022)\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t) : (\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span className=\\\\\\\"consent-required\\\\\\\" role=\\\\\\\"alert\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t⚠️ Consentimento obrigatório\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t)}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t</section>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{/* Medical Procedure Section */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t<section className=\\\\\\\"medical-procedure-section\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<h4>Procedimento Médico</h4>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<div className=\\\\\\\"procedure-info\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<span>Tipo: {medicalData.procedureType}</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<span>CRM: {medicalData.physicianCRM}</span>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t</section>\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t{/* CFM Compliance Notice */}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t<footer className=\\\\\\\"cfm-compliance-footer\\\\\\\">\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t<small>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t🏥 Em conformidade com as Resoluções CFM 1.974/2011 e 2.314/2022\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t<br />\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tConselho Federal de Medicina - Ética e Deontologia Médica\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t</small>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t</footer>\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t</div>\\\",\\n\\t\\t\\t\\\"\\\\t);\\\",\\n\\t\\t\\t\\\"};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"${1:CFMComponent}.displayName = '${1:CFMComponent}';\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"Healthcare Biome Rules\\\": {\\n\\t\\t\\\"scope\\\": \\\"json,jsonc\\\",\\n\\t\\t\\\"prefix\\\": [\\\"health-biome\\\", \\\"hbiome\\\"],\\n\\t\\t\\\"description\\\": \\\"Healthcare-specific Biome configuration with compliance and accessibility rules\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"$schema\\\\\\\": \\\\\\\"https://biomejs.dev/schemas/1.9.4/schema.json\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"organizeImports\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"enabled\\\\\\\": true\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"files\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"include\\\\\\\": [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/*.ts\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/*.tsx\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/*.js\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/*.jsx\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"ignore\\\\\\\": [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"node_modules/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"dist/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\".next/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"coverage/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"**/sensitive-data/**\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t]\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"linter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"enabled\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"rules\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"a11y\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noAccessKey\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noAriaHiddenOnFocusable\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noAutofocus\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useAltText\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useAnchorContent\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useAriaActivedescendantWithTabindex\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useAriaPropsForRole\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useValidAriaProps\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useValidAriaRole\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useValidAriaValues\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"security\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noDangerouslySetInnerHtml\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noGlobalObjectCalls\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"performance\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noAccumulatingSpread\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noDelete\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"style\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noVar\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useConst\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useTemplate\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"suspicious\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noExplicitAny\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noFallthroughSwitchClause\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noGlobalAssign\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"correctness\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"noUnusedVariables\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"useExhaustiveDependencies\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"formatter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"enabled\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"formatWithErrors\\\\\\\": false,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"indentStyle\\\\\\\": \\\\\\\"tab\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"indentWidth\\\\\\\": 2,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"lineWidth\\\\\\\": 100,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"lineEnding\\\\\\\": \\\\\\\"lf\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"javascript\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\\\\"formatter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"jsxQuoteStyle\\\\\\\": \\\\\\\"double\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"quoteProperties\\\\\\\": \\\\\\\"asNeeded\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"trailingCommas\\\\\\\": \\\\\\\"es5\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"semicolons\\\\\\\": \\\\\\\"always\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"arrowParentheses\\\\\\\": \\\\\\\"always\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"bracketSpacing\\\\\\\": true,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"bracketSameLine\\\\\\\": false\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\\\\"overrides\\\\\\\": [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"include\\\\\\\": [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"**/compliance/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"**/medical/**\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"**/patient/**\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"linter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"rules\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"security\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noDangerouslySetInnerHtml\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"a11y\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"useAltText\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"useAriaPropsForRole\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"useValidAriaProps\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"suspicious\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noExplicitAny\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noConsoleLog\\\\\\\": \\\\\\\"warn\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"include\\\\\\\": [\\\\\\\"**/*.test.ts\\\\\\\", \\\\\\\"**/*.test.tsx\\\\\\\"],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"linter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"rules\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"suspicious\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noExplicitAny\\\\\\\": \\\\\\\"off\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noConsoleLog\\\\\\\": \\\\\\\"off\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"include\\\\\\\": [\\\\\\\"**/lgpd/**\\\\\\\", \\\\\\\"**/anvisa/**\\\\\\\", \\\\\\\"**/cfm/**\\\\\\\"],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\\\\"linter\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\\\\"rules\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"security\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"recommended\\\\\\\": true\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"suspicious\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noExplicitAny\\\\\\\": \\\\\\\"error\\\\\\\",\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noConsoleLog\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"correctness\\\\\\\": {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\\\\"noUnusedVariables\\\\\\\": \\\\\\\"error\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t]\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\n\\t\\\"Healthcare Audit Hook\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescript,typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": [\\\"audit-hook\\\", \\\"haudit\\\"],\\n\\t\\t\\\"description\\\": \\\"Healthcare audit logging hook with LGPD, ANVISA, and CFM compliance\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { useCallback } from 'react';\\\",\\n\\t\\t\\t\\\"import { useAuditLogger } from '@neonpro/compliance';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface HealthcareAuditLog {\\\",\\n\\t\\t\\t\\\"\\\\tid: string;\\\",\\n\\t\\t\\t\\\"\\\\ttimestamp: string;\\\",\\n\\t\\t\\t\\\"\\\\taction: string;\\\",\\n\\t\\t\\t\\\"\\\\tactor: string;\\\",\\n\\t\\t\\t\\\"\\\\tresource: string;\\\",\\n\\t\\t\\t\\\"\\\\tcomplianceFramework: 'LGPD' | 'ANVISA' | 'CFM';\\\",\\n\\t\\t\\t\\\"\\\\tsensitivityLevel: 'low' | 'medium' | 'high' | 'critical';\\\",\\n\\t\\t\\t\\\"\\\\tauditTrail: AuditTrailEntry[];\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface AuditTrailEntry {\\\",\\n\\t\\t\\t\\\"\\\\ttimestamp: string;\\\",\\n\\t\\t\\t\\\"\\\\tevent: string;\\\",\\n\\t\\t\\t\\\"\\\\tdetails: Record<string, unknown>;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface UseHealthcareAuditReturn {\\\",\\n\\t\\t\\t\\\"\\\\tlogLGPDAccess: (data: LGPDAccessLog) => Promise<void>;\\\",\\n\\t\\t\\t\\\"\\\\tlogANVISARecord: (data: ANVISARecordLog) => Promise<void>;\\\",\\n\\t\\t\\t\\\"\\\\tlogCFMEthics: (data: CFMEthicsLog) => Promise<void>;\\\",\\n\\t\\t\\t\\\"\\\\tgetAuditHistory: (resourceId: string) => Promise<HealthcareAuditLog[]>;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"/**\\\",\\n\\t\\t\\t\\\" * useHealthcareAudit - Comprehensive healthcare audit logging\\\",\\n\\t\\t\\t\\\" * Implements LGPD, ANVISA, and CFM compliance requirements\\\",\\n\\t\\t\\t\\\" * @returns Audit logging functions for healthcare compliance\\\",\\n\\t\\t\\t\\\" */\\\",\\n\\t\\t\\t\\\"export const useHealthcareAudit = (): UseHealthcareAuditReturn => {\\\",\\n\\t\\t\\t\\\"\\\\tconst { createAuditLog, getAuditHistory: getHistory } = useAuditLogger();\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t// LGPD Article 37 - Data processing audit\\\",\\n\\t\\t\\t\\\"\\\\tconst logLGPDAccess = useCallback(async (data: LGPDAccessLog) => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst auditLog: HealthcareAuditLog = {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tid: `lgpd-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taction: data.action,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tactor: data.processor,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tresource: data.dataSubject,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tcomplianceFramework: 'LGPD',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tsensitivityLevel: data.sensitivityLevel || 'high',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tauditTrail: [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tevent: 'data_access',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tdetails: {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tlegalBasis: data.legalBasis,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpurpose: data.purpose,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tretentionPeriod: data.retentionPeriod,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tconsent: data.consent || false,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tawait createAuditLog(auditLog);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Log to external LGPD compliance system\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconsole.log('LGPD Audit:', {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tid: auditLog.id,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taction: data.action,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tlegalBasis: data.legalBasis,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\ttimestamp: auditLog.timestamp,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\\t}, [createAuditLog]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t// ANVISA RDC 44/2009 - Medical record audit\\\",\\n\\t\\t\\t\\\"\\\\tconst logANVISARecord = useCallback(async (data: ANVISARecordLog) => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst auditLog: HealthcareAuditLog = {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tid: `anvisa-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taction: data.action,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tactor: data.physicianCRM,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tresource: data.patientId,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tcomplianceFramework: 'ANVISA',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tsensitivityLevel: 'critical',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tauditTrail: [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tevent: 'medical_record_access',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tdetails: {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tprocedureCode: data.procedureCode,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tregulatoryBasis: data.regulatoryBasis,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tmedicalRecord: data.medicalRecord,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tawait createAuditLog(auditLog);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Log to external ANVISA system\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconsole.log('ANVISA Audit:', {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tid: auditLog.id,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tphysicianCRM: data.physicianCRM,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tprocedureCode: data.procedureCode,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\ttimestamp: auditLog.timestamp,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\\t}, [createAuditLog]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t// CFM Resolution audit\\\",\\n\\t\\t\\t\\\"\\\\tconst logCFMEthics = useCallback(async (data: CFMEthicsLog) => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconst auditLog: HealthcareAuditLog = {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tid: `cfm-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\taction: data.action,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tactor: data.physicianCRM,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tresource: data.patientId || 'anonymous',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tcomplianceFramework: 'CFM',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tsensitivityLevel: 'high',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tauditTrail: [\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t{\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\ttimestamp: new Date().toISOString(),\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tevent: 'ethics_validation',\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\tdetails: {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tresolution: data.resolution,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tethicsCompliance: data.ethicsCompliance,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpatientConsent: data.patientConsent,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t\\\\t},\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\t],\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tawait createAuditLog(auditLog);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t// Log to external CFM system\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tconsole.log('CFM Audit:', {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tid: auditLog.id,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tphysicianCRM: data.physicianCRM,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tresolution: data.resolution,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\ttimestamp: auditLog.timestamp,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t});\\\",\\n\\t\\t\\t\\\"\\\\t}, [createAuditLog]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t// Get audit history for compliance reports\\\",\\n\\t\\t\\t\\\"\\\\tconst getAuditHistory = useCallback(async (resourceId: string): Promise<HealthcareAuditLog[]> => {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\ttry {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tconst history = await getHistory(resourceId);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\treturn history;\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t} catch (error) {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\tconsole.error('Error fetching audit history:', error);\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t\\\\treturn [];\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t}\\\",\\n\\t\\t\\t\\\"\\\\t}, [getHistory]);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\treturn {\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tlogLGPDAccess,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tlogANVISARecord,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tlogCFMEthics,\\\",\\n\\t\\t\\t\\\"\\\\t\\\\tgetAuditHistory,\\\",\\n\\t\\t\\t\\\"\\\\t};\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t]\\n\\t}\\n}\"}"}}